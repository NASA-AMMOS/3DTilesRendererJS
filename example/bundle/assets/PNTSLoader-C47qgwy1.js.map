{"version":3,"file":"PNTSLoader-C47qgwy1.js","sources":["../../../src/core/renderer/loaders/PNTSLoaderBase.js","../../../src/three/renderer/loaders/rgb565torgb.js","../../../src/three/renderer/loaders/decodeOctNormal.js","../../../src/three/renderer/loaders/PNTSLoader.js"],"sourcesContent":["// PNTS File Format\n// https://github.com/CesiumGS/3d-tiles/blob/master/specification/TileFormats/PointCloud/README.md\n\nimport { BatchTable } from '../utilities/BatchTable.js';\nimport { FeatureTable } from '../utilities/FeatureTable.js';\nimport { readMagicBytes } from '../utilities/LoaderUtils.js';\nimport { LoaderBase } from './LoaderBase.js';\n\nexport class PNTSLoaderBase extends LoaderBase {\n\n\tparse( buffer ) {\n\n\t\tconst dataView = new DataView( buffer );\n\n\t\t// 28-byte header\n\n\t\t// 4 bytes\n\t\tconst magic = readMagicBytes( dataView );\n\n\t\tconsole.assert( magic === 'pnts' );\n\n\t\t// 4 bytes\n\t\tconst version = dataView.getUint32( 4, true );\n\n\t\tconsole.assert( version === 1 );\n\n\t\t// 4 bytes\n\t\tconst byteLength = dataView.getUint32( 8, true );\n\n\t\tconsole.assert( byteLength === buffer.byteLength );\n\n\t\t// 4 bytes\n\t\tconst featureTableJSONByteLength = dataView.getUint32( 12, true );\n\n\t\t// 4 bytes\n\t\tconst featureTableBinaryByteLength = dataView.getUint32( 16, true );\n\n\t\t// 4 bytes\n\t\tconst batchTableJSONByteLength = dataView.getUint32( 20, true );\n\n\t\t// 4 bytes\n\t\tconst batchTableBinaryByteLength = dataView.getUint32( 24, true );\n\n\t\t// Feature Table\n\t\tconst featureTableStart = 28;\n\t\tconst featureTableBuffer = buffer.slice(\n\t\t\tfeatureTableStart,\n\t\t\tfeatureTableStart + featureTableJSONByteLength + featureTableBinaryByteLength,\n\t\t);\n\t\tconst featureTable = new FeatureTable(\n\t\t\tfeatureTableBuffer,\n\t\t\t0,\n\t\t\tfeatureTableJSONByteLength,\n\t\t\tfeatureTableBinaryByteLength,\n\t\t);\n\n\t\t// Batch Table\n\t\tconst batchTableStart = featureTableStart + featureTableJSONByteLength + featureTableBinaryByteLength;\n\t\tconst batchTableBuffer = buffer.slice(\n\t\t\tbatchTableStart,\n\t\t\tbatchTableStart + batchTableJSONByteLength + batchTableBinaryByteLength,\n\t\t);\n\t\tconst batchTable = new BatchTable(\n\t\t\tbatchTableBuffer,\n\t\t\tfeatureTable.getData( 'BATCH_LENGTH' ) || featureTable.getData( 'POINTS_LENGTH' ),\n\t\t\t0,\n\t\t\tbatchTableJSONByteLength,\n\t\t\tbatchTableBinaryByteLength,\n\t\t);\n\n\t\treturn Promise.resolve( {\n\n\t\t\tversion,\n\t\t\tfeatureTable,\n\t\t\tbatchTable,\n\n\t\t} );\n\n\t}\n\n}\n\n","// The implementation of rgb565 to rgb888 is from\n// https://rgbcolorpicker.com/565\n\nexport function rgb565torgb( rgb565 ) {\n\n\t// Shift the red value to the right by 11 bits.\n\tconst red5 = rgb565 >> 11;\n\t// Shift the green value to the right by 5 bits and extract the lower 6 bits.\n\tconst green6 = ( rgb565 >> 5 ) & 0b111111;\n\t// Extract the lower 5 bits.\n\tconst blue5 = rgb565 & 0b11111;\n\n\t// Convert 5-bit red to 8-bit red.\n\tconst red8 = Math.round( ( red5 / 31 ) * 255 );\n\t// Convert 6-bit green to 8-bit green.\n\tconst green8 = Math.round( ( green6 / 63 ) * 255 );\n\t// Convert 5-bit blue to 8-bit blue.\n\tconst blue8 = Math.round( ( blue5 / 31 ) * 255 );\n\n\treturn [ red8, green8, blue8 ];\n\n}\n","import { Vector2, MathUtils, Vector3 } from 'three';\n\nconst f = new Vector2();\n\n/**\n * Decode an octahedron-encoded normal (as a pair of 8-bit unsigned numbers) into a Vector3.\n *\n * Resources:\n * - https://stackoverflow.com/a/74745666/2704779\n * - https://knarkowicz.wordpress.com/2014/04/16/octahedron-normal-vector-encoding/\n * @param {number} x The unsigned 8-bit X coordinate on the projected octahedron.\n * @param {number} y The unsigned 8-bit Y coordinate on the projected octahedron.\n * @param {Vector3} [target] The target vector.\n */\nexport function decodeOctNormal( x, y, target = new Vector3() ) {\n\n\tf.set( x, y ).divideScalar( 256 ).multiplyScalar( 2 ).subScalar( 1 );\n\n\ttarget.set( f.x, f.y, 1 - Math.abs( f.x ) - Math.abs( f.y ) );\n\n\tconst t = MathUtils.clamp( - target.z, 0, 1 );\n\n\tif ( target.x >= 0 ) {\n\n\t\ttarget.setX( target.x - t );\n\n\t} else {\n\n\t\ttarget.setX( target.x + t );\n\n\t}\n\n\tif ( target.y >= 0 ) {\n\n\t\ttarget.setY( target.y - t );\n\n\t} else {\n\n\t\ttarget.setY( target.y + t );\n\n\t}\n\n\ttarget.normalize();\n\n\treturn target;\n\n}\n","import { PNTSLoaderBase } from '3d-tiles-renderer/core';\nimport {\n\tPoints,\n\tPointsMaterial,\n\tBufferGeometry,\n\tBufferAttribute,\n\tDefaultLoadingManager,\n\tVector3,\n\tColor,\n} from 'three';\nimport { rgb565torgb } from './rgb565torgb.js';\nimport { decodeOctNormal } from './decodeOctNormal.js';\n\nconst DRACO_ATTRIBUTE_MAP = {\n\tRGB: 'color',\n\tPOSITION: 'position',\n};\n\nexport class PNTSLoader extends PNTSLoaderBase {\n\n\tconstructor( manager = DefaultLoadingManager ) {\n\n\t\tsuper();\n\t\tthis.manager = manager;\n\n\t}\n\n\tparse( buffer ) {\n\n\t\treturn super.parse( buffer ).then( async ( result ) => {\n\n\t\t\tconst { featureTable, batchTable } = result;\n\n\t\t\tconst material = new PointsMaterial();\n\t\t\tconst extensions = featureTable.header.extensions;\n\t\t\tconst translationOffset = new Vector3();\n\t\t\tlet geometry;\n\n\t\t\t// handle loading the draco data\n\t\t\tif ( extensions && extensions[ '3DTILES_draco_point_compression' ] ) {\n\n\t\t\t\tconst { byteOffset, byteLength, properties } = extensions[ '3DTILES_draco_point_compression' ];\n\t\t\t\tconst dracoLoader = this.manager.getHandler( 'draco.drc' );\n\t\t\t\tif ( dracoLoader == null ) {\n\n\t\t\t\t\tthrow new Error( 'PNTSLoader: dracoLoader not available.' );\n\n\t\t\t\t}\n\n\t\t\t\t// map PNTS keys to draco types\n\t\t\t\tconst attributeIDs = {};\n\t\t\t\tfor ( const key in properties ) {\n\n\t\t\t\t\tif ( key in DRACO_ATTRIBUTE_MAP && key in properties ) {\n\n\t\t\t\t\t\tconst mappedKey = DRACO_ATTRIBUTE_MAP[ key ];\n\t\t\t\t\t\tattributeIDs[ mappedKey ] = properties[ key ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// decode the geometry\n\t\t\t\tconst taskConfig = {\n\t\t\t\t\tattributeIDs,\n\t\t\t\t\tattributeTypes: {\n\t\t\t\t\t\tposition: 'Float32Array',\n\t\t\t\t\t\tcolor: 'Uint8Array',\n\t\t\t\t\t},\n\t\t\t\t\tuseUniqueIDs: true,\n\t\t\t\t};\n\n\t\t\t\tconst buffer = featureTable.getBuffer( byteOffset, byteLength );\n\t\t\t\tgeometry = await dracoLoader.decodeGeometry( buffer, taskConfig );\n\t\t\t\tif ( geometry.attributes.color ) {\n\n\t\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// handle non compressed case\n\t\t\t\tconst POINTS_LENGTH = featureTable.getData( 'POINTS_LENGTH' );\n\t\t\t\tconst POSITION = featureTable.getData( 'POSITION', POINTS_LENGTH, 'FLOAT', 'VEC3' );\n\t\t\t\tconst NORMAL = featureTable.getData( 'NORMAL', POINTS_LENGTH, 'FLOAT', 'VEC3' );\n\t\t\t\tconst NORMAL_OCT16P = featureTable.getData( 'NORMAL', POINTS_LENGTH, 'UNSIGNED_BYTE', 'VEC2' );\n\t\t\t\tconst RGB = featureTable.getData( 'RGB', POINTS_LENGTH, 'UNSIGNED_BYTE', 'VEC3' );\n\t\t\t\tconst RGBA = featureTable.getData( 'RGBA', POINTS_LENGTH, 'UNSIGNED_BYTE', 'VEC4' );\n\t\t\t\tconst RGB565 = featureTable.getData( 'RGB565', POINTS_LENGTH, 'UNSIGNED_SHORT', 'SCALAR' );\n\t\t\t\tconst CONSTANT_RGBA = featureTable.getData( 'CONSTANT_RGBA', POINTS_LENGTH, 'UNSIGNED_BYTE', 'VEC4' );\n\t\t\t\tconst POSITION_QUANTIZED = featureTable.getData( 'POSITION_QUANTIZED', POINTS_LENGTH, 'UNSIGNED_SHORT', 'VEC3' );\n\t\t\t\tconst QUANTIZED_VOLUME_SCALE = featureTable.getData( 'QUANTIZED_VOLUME_SCALE', POINTS_LENGTH, 'FLOAT', 'VEC3' );\n\t\t\t\tconst QUANTIZED_VOLUME_OFFSET = featureTable.getData( 'QUANTIZED_VOLUME_OFFSET', POINTS_LENGTH, 'FLOAT', 'VEC3' );\n\n\t\t\t\tgeometry = new BufferGeometry();\n\n\t\t\t\tif ( POSITION_QUANTIZED ) {\n\n\t\t\t\t\tconst decodedPositions = new Float32Array( POINTS_LENGTH * 3 );\n\t\t\t\t\tfor ( let i = 0; i < POINTS_LENGTH; i ++ ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tconst index = 3 * i + j;\n\t\t\t\t\t\t\tdecodedPositions[ index ] = ( POSITION_QUANTIZED[ index ] / 65535.0 ) * QUANTIZED_VOLUME_SCALE[ j ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\ttranslationOffset.x = QUANTIZED_VOLUME_OFFSET[ 0 ];\n\t\t\t\t\ttranslationOffset.y = QUANTIZED_VOLUME_OFFSET[ 1 ];\n\t\t\t\t\ttranslationOffset.z = QUANTIZED_VOLUME_OFFSET[ 2 ];\n\t\t\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( decodedPositions, 3, false ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( POSITION, 3, false ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( NORMAL !== null ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'normal', new BufferAttribute( NORMAL, 3, false ) );\n\n\t\t\t\t} else if ( NORMAL_OCT16P !== null ) {\n\n\t\t\t\t\tconst decodedNormals = new Float32Array( POINTS_LENGTH * 3 );\n\n\t\t\t\t\tconst n = new Vector3();\n\n\t\t\t\t\tfor ( let i = 0; i < POINTS_LENGTH; i ++ ) {\n\n\t\t\t\t\t\tconst x = NORMAL_OCT16P[ i * 2 ];\n\t\t\t\t\t\tconst y = NORMAL_OCT16P[ i * 2 + 1 ];\n\n\t\t\t\t\t\tconst normal = decodeOctNormal( x, y, n );\n\n\t\t\t\t\t\tdecodedNormals[ i * 3 ] = normal.x;\n\t\t\t\t\t\tdecodedNormals[ i * 3 + 1 ] = normal.y;\n\t\t\t\t\t\tdecodedNormals[ i * 3 + 2 ] = normal.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'normal', new BufferAttribute( decodedNormals, 3, false ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( RGBA !== null ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'color', new BufferAttribute( RGBA, 4, true ) );\n\t\t\t\t\tmaterial.vertexColors = true;\n\t\t\t\t\tmaterial.transparent = true;\n\t\t\t\t\tmaterial.depthWrite = false;\n\n\t\t\t\t} else if ( RGB !== null ) {\n\n\t\t\t\t\tgeometry.setAttribute( 'color', new BufferAttribute( RGB, 3, true ) );\n\t\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t\t} else if ( RGB565 !== null ) {\n\n\t\t\t\t\tconst color = new Uint8Array( POINTS_LENGTH * 3 );\n\t\t\t\t\tfor ( let i = 0; i < POINTS_LENGTH; i ++ ) {\n\n\t\t\t\t\t\tconst rgbColor = rgb565torgb( RGB565[ i ] );\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tconst index = 3 * i + j;\n\t\t\t\t\t\t\tcolor[ index ] = rgbColor[ j ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tgeometry.setAttribute( 'color', new BufferAttribute( color, 3, true ) );\n\t\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t\t} else if ( CONSTANT_RGBA !== null ) {\n\n\t\t\t\t\tconst color = new Color( CONSTANT_RGBA[ 0 ], CONSTANT_RGBA[ 1 ], CONSTANT_RGBA[ 2 ] );\n\t\t\t\t\tmaterial.color = color;\n\t\t\t\t\tconst opacity = CONSTANT_RGBA[ 3 ] / 255;\n\t\t\t\t\tif ( opacity < 1 ) {\n\n\t\t\t\t\t\tmaterial.opacity = opacity;\n\t\t\t\t\t\tmaterial.transparent = true;\n\t\t\t\t\t\tmaterial.depthWrite = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst object = new Points( geometry, material );\n\t\t\tobject.position.copy( translationOffset );\n\t\t\tresult.scene = object;\n\t\t\tresult.scene.featureTable = featureTable;\n\t\t\tresult.scene.batchTable = batchTable;\n\n\t\t\tconst rtcCenter = featureTable.getData( 'RTC_CENTER', 1, 'FLOAT', 'VEC3' );\n\t\t\tif ( rtcCenter ) {\n\n\t\t\t\tresult.scene.position.x += rtcCenter[ 0 ];\n\t\t\t\tresult.scene.position.y += rtcCenter[ 1 ];\n\t\t\t\tresult.scene.position.z += rtcCenter[ 2 ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t} );\n\n\t}\n\n}\n"],"names":["PNTSLoaderBase","LoaderBase","buffer","dataView","magic","readMagicBytes","version","byteLength","featureTableJSONByteLength","featureTableBinaryByteLength","batchTableJSONByteLength","batchTableBinaryByteLength","featureTableStart","featureTableBuffer","featureTable","FeatureTable","batchTableStart","batchTableBuffer","batchTable","BatchTable","rgb565torgb","rgb565","red5","green6","blue5","red8","green8","blue8","f","Vector2","decodeOctNormal","x","y","target","Vector3","MathUtils","DRACO_ATTRIBUTE_MAP","PNTSLoader","manager","DefaultLoadingManager","result","material","PointsMaterial","extensions","translationOffset","geometry","byteOffset","properties","dracoLoader","attributeIDs","key","mappedKey","taskConfig","POINTS_LENGTH","POSITION","NORMAL","NORMAL_OCT16P","RGB","RGBA","RGB565","CONSTANT_RGBA","POSITION_QUANTIZED","QUANTIZED_VOLUME_SCALE","QUANTIZED_VOLUME_OFFSET","BufferGeometry","decodedPositions","i","j","index","BufferAttribute","decodedNormals","n","normal","color","rgbColor","Color","opacity","object","Points","rtcCenter"],"mappings":"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"}