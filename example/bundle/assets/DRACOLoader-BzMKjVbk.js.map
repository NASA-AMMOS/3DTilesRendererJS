{"version":3,"file":"DRACOLoader-BzMKjVbk.js","sources":["../../../node_modules/three/examples/jsm/loaders/DRACOLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tColorManagement,\n\tFileLoader,\n\tLoader,\n\tLinearSRGBColorSpace,\n\tSRGBColorSpace\n} from 'three';\n\nconst _taskCache = new WeakMap();\n\nclass DRACOLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.decoderPath = '';\n\t\tthis.decoderConfig = {};\n\t\tthis.decoderBinary = null;\n\t\tthis.decoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\n\t\tthis.defaultAttributeIDs = {\n\t\t\tposition: 'POSITION',\n\t\t\tnormal: 'NORMAL',\n\t\t\tcolor: 'COLOR',\n\t\t\tuv: 'TEX_COORD'\n\t\t};\n\t\tthis.defaultAttributeTypes = {\n\t\t\tposition: 'Float32Array',\n\t\t\tnormal: 'Float32Array',\n\t\t\tcolor: 'Float32Array',\n\t\t\tuv: 'Float32Array'\n\t\t};\n\n\t}\n\n\tsetDecoderPath( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\tsetDecoderConfig( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t}\n\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis.parse( buffer, onLoad, onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\n\tparse( buffer, onLoad, onError = ()=>{} ) {\n\n\t\tthis.decodeDracoFile( buffer, onLoad, null, null, SRGBColorSpace, onError ).catch( onError );\n\n\t}\n\n\tdecodeDracoFile( buffer, callback, attributeIDs, attributeTypes, vertexColorSpace = LinearSRGBColorSpace, onError = () => {} ) {\n\n\t\tconst taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs,\n\t\t\tvertexColorSpace: vertexColorSpace,\n\t\t};\n\n\t\treturn this.decodeGeometry( buffer, taskConfig ).then( callback ).catch( onError );\n\n\t}\n\n\tdecodeGeometry( buffer, taskConfig ) {\n\n\t\tconst taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet worker;\n\t\tconst taskID = this.workerNextTaskID ++;\n\t\tconst taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tconst geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t}\n\n\t_createGeometry( geometryData ) {\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tconst result = geometryData.attributes[ i ];\n\t\t\tconst name = result.name;\n\t\t\tconst array = result.array;\n\t\t\tconst itemSize = result.itemSize;\n\n\t\t\tconst attribute = new BufferAttribute( array, itemSize );\n\n\t\t\tif ( name === 'color' ) {\n\n\t\t\t\tthis._assignVertexColorSpace( attribute, result.vertexColorSpace );\n\n\t\t\t\tattribute.normalized = ( array instanceof Float32Array ) === false;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( name, attribute );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\t_assignVertexColorSpace( attribute, inputColorSpace ) {\n\n\t\t// While .drc files do not specify colorspace, the only 'official' tooling\n\t\t// is PLY and OBJ converters, which use sRGB. We'll assume sRGB when a .drc\n\t\t// file is passed into .load() or .parse(). GLTFLoader uses internal APIs\n\t\t// to decode geometry, and vertex colors are already Linear-sRGB in there.\n\n\t\tif ( inputColorSpace !== SRGBColorSpace ) return;\n\n\t\tconst _color = new Color();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\t_color.fromBufferAttribute( attribute, i );\n\t\t\tColorManagement.toWorkingColorSpace( _color, SRGBColorSpace );\n\t\t\tattribute.setXYZ( i, _color.r, _color.g, _color.b );\n\n\t\t}\n\n\t}\n\n\t_loadLibrary( url, responseType ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t}\n\n\tpreload() {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t}\n\n\t_initDecoder() {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tconst useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tconst librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tconst jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tconst fn = DRACOWorker.toString();\n\n\t\t\t\tconst body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t}\n\n\t_getWorker( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tconst message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t}\n\n\t_releaseTask( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t}\n\n\tdebug() {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\tif ( this.workerSourceURL !== '' ) {\n\n\t\t\tURL.revokeObjectURL( this.workerSourceURL );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* WEB WORKER */\n\nfunction DRACOWorker() {\n\n\tlet decoderConfig;\n\tlet decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig ); // eslint-disable-line no-undef\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tconst buffer = message.buffer;\n\t\t\t\tconst taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tconst draco = module.draco;\n\t\t\t\t\tconst decoder = new draco.Decoder();\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst geometry = decodeGeometry( draco, decoder, new Int8Array( buffer ), taskConfig );\n\n\t\t\t\t\t\tconst buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, array, taskConfig ) {\n\n\t\tconst attributeIDs = taskConfig.attributeIDs;\n\t\tconst attributeTypes = taskConfig.attributeTypes;\n\n\t\tlet dracoGeometry;\n\t\tlet decodingStatus;\n\n\t\tconst geometryType = decoder.GetEncodedGeometryType( array );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeArrayToMesh( array, array.byteLength, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeArrayToPointCloud( array, array.byteLength, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tconst geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( const attributeName in attributeIDs ) {\n\n\t\t\tconst attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tlet attribute;\n\t\t\tlet attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tconst attributeResult = decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute );\n\n\t\t\tif ( attributeName === 'color' ) {\n\n\t\t\t\tattributeResult.vertexColorSpace = taskConfig.vertexColorSpace;\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( attributeResult );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tgeometry.index = decodeIndex( draco, decoder, dracoGeometry );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeIndex( draco, decoder, dracoGeometry ) {\n\n\t\tconst numFaces = dracoGeometry.num_faces();\n\t\tconst numIndices = numFaces * 3;\n\t\tconst byteLength = numIndices * 4;\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetTrianglesUInt32Array( dracoGeometry, byteLength, ptr );\n\t\tconst index = new Uint32Array( draco.HEAPF32.buffer, ptr, numIndices ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn { array: index, itemSize: 1 };\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tconst numComponents = attribute.num_components();\n\t\tconst numPoints = dracoGeometry.num_points();\n\t\tconst numValues = numPoints * numComponents;\n\t\tconst byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n\t\tconst dataType = getDracoDataType( draco, attributeType );\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, dataType, byteLength, ptr );\n\t\tconst array = new attributeType( draco.HEAPF32.buffer, ptr, numValues ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n\tfunction getDracoDataType( draco, attributeType ) {\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array: return draco.DT_FLOAT32;\n\t\t\tcase Int8Array: return draco.DT_INT8;\n\t\t\tcase Int16Array: return draco.DT_INT16;\n\t\t\tcase Int32Array: return draco.DT_INT32;\n\t\t\tcase Uint8Array: return draco.DT_UINT8;\n\t\t\tcase Uint16Array: return draco.DT_UINT16;\n\t\t\tcase Uint32Array: return draco.DT_UINT32;\n\n\t\t}\n\n\t}\n\n}\n\nexport { DRACOLoader };\n"],"names":["_taskCache","DRACOLoader","Loader","manager","path","config","workerLimit","url","onLoad","onProgress","onError","loader","FileLoader","buffer","SRGBColorSpace","callback","attributeIDs","attributeTypes","vertexColorSpace","LinearSRGBColorSpace","taskConfig","taskKey","cachedTask","worker","taskID","taskCost","geometryPending","_worker","resolve","reject","message","geometryData","geometry","BufferGeometry","BufferAttribute","i","result","name","array","itemSize","attribute","inputColorSpace","_color","Color","il","ColorManagement","responseType","useJS","librariesPending","libraries","jsContent","fn","DRACOWorker","body","e","a","b","decoderConfig","decoderPending","draco","module","decoder","decodeGeometry","buffers","attr","error","dracoGeometry","decodingStatus","geometryType","attributeName","attributeType","attributeID","attributeResult","decodeAttribute","decodeIndex","numIndices","byteLength","ptr","index","numComponents","numValues","dataType","getDracoDataType"],"mappings":"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","x_google_ignoreList":[0]}