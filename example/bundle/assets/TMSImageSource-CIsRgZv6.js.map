{"version":3,"file":"TMSImageSource-CIsRgZv6.js","sources":["../../../src/three/plugins/images/utils/ProjectionScheme.js","../../../src/three/plugins/images/sources/XYZImageSource.js","../../../src/three/plugins/images/sources/TMSImageSource.js"],"sourcesContent":["import { MathUtils } from 'three';\n\n// Class for storing and querying a certain projection scheme for an image and converting\n// between the [0, 1] image range to cartographic longitude / latitude values.\nexport class ProjectionScheme {\n\n\tget isMercator() {\n\n\t\treturn this.scheme === 'EPSG:3857';\n\n\t}\n\n\tconstructor( scheme = 'EPSG:4326' ) {\n\n\t\tthis.scheme = scheme;\n\t\tthis.tileCountX = 1;\n\t\tthis.tileCountY = 1;\n\n\t\tthis.setScheme( scheme );\n\n\t}\n\n\tsetScheme( scheme ) {\n\n\t\tthis.scheme = scheme;\n\t\tswitch ( scheme ) {\n\n\t\t\t// equirect\n\t\t\tcase 'EPSG:4326':\n\t\t\t\tthis.tileCountX = 2;\n\t\t\t\tthis.tileCountY = 1;\n\t\t\t\tbreak;\n\n\t\t\t// mercator\n\t\t\tcase 'EPSG:3857':\n\t\t\t\tthis.tileCountX = 1;\n\t\t\t\tthis.tileCountY = 1;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( `ProjectionScheme: Unknown projection scheme \"${ scheme }\"` );\n\n\t\t}\n\n\t}\n\n\tconvertProjectionToLatitude( v ) {\n\n\t\tif ( this.isMercator ) {\n\n\t\t\t// https://gis.stackexchange.com/questions/447421/convert-a-point-on-a-flat-2d-web-mercator-map-image-to-a-coordinate\n\t\t\tconst ratio = MathUtils.mapLinear( v, 0, 1, - 1, 1 );\n\t\t\treturn 2 * Math.atan( Math.exp( ratio * Math.PI ) ) - Math.PI / 2;\n\n\t\t} else {\n\n\t\t\treturn MathUtils.mapLinear( v, 0, 1, - Math.PI / 2, Math.PI / 2 );\n\n\t\t}\n\n\t}\n\n\tconvertProjectionToLongitude( v ) {\n\n\t\treturn MathUtils.mapLinear( v, 0, 1, - Math.PI, Math.PI );\n\n\t}\n\n\tconvertLatitudeToProjection( lat ) {\n\n\t\tif ( this.isMercator ) {\n\n\t\t\t// https://stackoverflow.com/questions/14329691/convert-latitude-longitude-point-to-a-pixels-x-y-on-mercator-projection\n\t\t\tconst mercatorN = Math.log( Math.tan( ( Math.PI / 4 ) + ( lat / 2 ) ) );\n\t\t\treturn ( 1 / 2 ) + ( 1 * mercatorN / ( 2 * Math.PI ) );\n\n\t\t} else {\n\n\t\t\treturn MathUtils.mapLinear( lat, - Math.PI / 2, Math.PI / 2, 0, 1 );\n\n\t\t}\n\n\t}\n\n\tconvertLongitudeToProjection( lon ) {\n\n\t\treturn ( lon + Math.PI ) / ( 2 * Math.PI );\n\n\t}\n\n\tgetLongitudeDerivativeAtProjection( value ) {\n\n\t\treturn 2 * Math.PI;\n\n\t}\n\n\tgetLatitudeDerivativeAtProjection( value ) {\n\n\t\tconst EPS = 1e-5;\n\t\tlet yp = value - EPS;\n\t\tif ( yp < 0 ) {\n\n\t\t\typ = value + EPS;\n\n\t\t}\n\n\t\tif ( this.isMercator ) {\n\n\t\t\t// TODO: why is this 2 * Math.PI rather than Math.PI?\n\t\t\treturn Math.abs( this.convertProjectionToLatitude( value ) - this.convertProjectionToLatitude( yp ) ) / EPS;\n\n\t\t} else {\n\n\t\t\treturn Math.PI;\n\n\t\t}\n\n\t}\n\n\tgetBounds() {\n\n\t\treturn [\n\t\t\tthis.convertProjectionToLongitude( 0 ), this.convertProjectionToLatitude( 0 ),\n\t\t\tthis.convertProjectionToLongitude( 1 ), this.convertProjectionToLatitude( 1 ),\n\t\t];\n\n\t}\n\n}\n","import { ProjectionScheme } from '../utils/ProjectionScheme.js';\nimport { TiledImageSource } from './TiledImageSource.js';\n\nexport class XYZImageSource extends TiledImageSource {\n\n\tconstructor( options = {} ) {\n\n\t\tsuper();\n\n\t\tconst {\n\t\t\tlevels = 20,\n\t\t\ttileDimension = 256,\n\t\t\turl = null,\n\t\t} = options;\n\n\t\tthis.tileDimension = tileDimension;\n\t\tthis.levels = levels;\n\t\tthis.url = url;\n\n\t}\n\n\tgetUrl( x, y, level ) {\n\n\t\treturn this.url\n\t\t\t.replace( /{\\s*z\\s*}/gi, level )\n\t\t\t.replace( /{\\s*x\\s*}/gi, x )\n\t\t\t.replace( /{\\s*(y|reverseY|-\\s*y)\\s*}/gi, y );\n\n\t}\n\n\tinit() {\n\n\t\t// transform the url\n\t\tconst { tiling, tileDimension, levels, url } = this;\n\n\t\ttiling.flipY = ! /{\\s*reverseY|-\\s*y\\s*}/g.test( url );\n\t\ttiling.setProjection( new ProjectionScheme( 'EPSG:3857' ) );\n\t\ttiling.setContentBounds( ...tiling.projection.getBounds() );\n\t\ttiling.generateLevels( levels, tiling.projection.tileCountX, tiling.projection.tileCountY, {\n\t\t\ttilePixelWidth: tileDimension,\n\t\t\ttilePixelHeight: tileDimension,\n\t\t} );\n\n\t\tthis.url = url;\n\n\t\treturn Promise.resolve();\n\n\t}\n\n}\n","import { ProjectionScheme } from '../utils/ProjectionScheme.js';\nimport { TiledImageSource } from './TiledImageSource.js';\nimport { MathUtils } from 'three';\n\nexport class TMSImageSource extends TiledImageSource {\n\n\tconstructor( options = {} ) {\n\n\t\tconst { url = null } = options;\n\n\t\tsuper();\n\n\t\tthis.tileSets = null;\n\t\tthis.extension = null;\n\t\tthis.url = url;\n\n\t}\n\n\tgetUrl( x, y, level ) {\n\n\t\tconst { url, extension, tileSets, tiling } = this;\n\t\treturn new URL( `${ parseInt( tileSets[ level - tiling.minLevel ].href ) }/${ x }/${ y }.${ extension }`, url ).toString();\n\n\t}\n\n\tinit() {\n\n\t\tconst { url } = this;\n\n\t\treturn this\n\t\t\t.fetchData( new URL( 'tilemapresource.xml', url ), this.fetchOptions )\n\t\t\t.then( res => res.text() )\n\t\t\t.then( text => {\n\n\t\t\t\tconst { tiling } = this;\n\n\t\t\t\t// elements\n\t\t\t\tconst xml = new DOMParser().parseFromString( text, 'text/xml' );\n\t\t\t\tconst boundingBox = xml.querySelector( 'BoundingBox' );\n\t\t\t\tconst tileFormat = xml.querySelector( 'TileFormat' );\n\t\t\t\tconst tileSets = xml.querySelector( 'TileSets' ).querySelectorAll( 'TileSet' );\n\n\t\t\t\t// tile set definitions\n\t\t\t\tconst tileSetList = [ ...tileSets ]\n\t\t\t\t\t.map( ts => ( {\n\t\t\t\t\t\thref: parseInt( ts.getAttribute( 'href' ) ),\n\t\t\t\t\t\tunitsPerPixel: parseFloat( ts.getAttribute( 'units-per-pixel' ) ),\n\t\t\t\t\t\torder: parseInt( ts.getAttribute( 'order' ) ),\n\t\t\t\t\t} ) )\n\t\t\t\t\t.sort( ( a, b ) => {\n\n\t\t\t\t\t\treturn a.order - b.order;\n\n\t\t\t\t\t} );\n\n\t\t\t\t// bounding box\n\t\t\t\tconst minX = parseFloat( boundingBox.getAttribute( 'minx' ) ) * MathUtils.DEG2RAD;\n\t\t\t\tconst maxX = parseFloat( boundingBox.getAttribute( 'maxx' ) ) * MathUtils.DEG2RAD;\n\t\t\t\tconst minY = parseFloat( boundingBox.getAttribute( 'miny' ) ) * MathUtils.DEG2RAD;\n\t\t\t\tconst maxY = parseFloat( boundingBox.getAttribute( 'maxy' ) ) * MathUtils.DEG2RAD;\n\n\t\t\t\t// origin in lat / lon\n\t\t\t\t// Note: The \"origin\" value in TMS is documented but otherwise not used in any data set as\n\t\t\t\t// defined by the spec so ignore it here.\n\t\t\t\t// const origin = xml.querySelector( 'Origin' );\n\t\t\t\t// const originX = parseFloat( origin.getAttribute( 'x' ) ) * MathUtils.DEG2RAD;\n\t\t\t\t// const originY = parseFloat( origin.getAttribute( 'y' ) ) * MathUtils.DEG2RAD;\n\n\t\t\t\t// image dimensions in pixels\n\t\t\t\tconst tileWidth = parseInt( tileFormat.getAttribute( 'width' ) );\n\t\t\t\tconst tileHeight = parseInt( tileFormat.getAttribute( 'height' ) );\n\t\t\t\tconst extension = tileFormat.getAttribute( 'extension' );\n\t\t\t\tconst srs = xml.querySelector( 'SRS' ).textContent;\n\n\t\t\t\t// assign settings\n\t\t\t\tthis.extension = extension;\n\t\t\t\tthis.url = url;\n\t\t\t\tthis.tileSets = tileSetList;\n\n\t\t\t\t// initialize tiling and projection schemes\n\t\t\t\ttiling.setProjection( new ProjectionScheme( srs ) );\n\t\t\t\ttiling.setContentBounds( minX, minY, maxX, maxY );\n\n\t\t\t\ttileSetList.forEach( ( { order } ) => {\n\n\t\t\t\t\ttiling.setLevel( order, {\n\t\t\t\t\t\ttileCountX: tiling.projection.tileCountX * 2 ** order,\n\t\t\t\t\t\ttilePixelWidth: tileWidth,\n\t\t\t\t\t\ttilePixelHeight: tileHeight,\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t}\n\n}\n"],"names":["ProjectionScheme","scheme","v","ratio","MathUtils","lat","mercatorN","lon","value","yp","XYZImageSource","TiledImageSource","options","levels","tileDimension","url","x","y","level","tiling","TMSImageSource","extension","tileSets","res","text","xml","boundingBox","tileFormat","tileSetList","ts","a","b","minX","maxX","minY","maxY","tileWidth","tileHeight","srs","order"],"mappings":"kGAIO,MAAMA,CAAiB,CAE7B,IAAI,YAAa,CAEhB,OAAO,KAAK,SAAW,WAExB,CAEA,YAAaC,EAAS,YAAc,CAEnC,KAAK,OAASA,EACd,KAAK,WAAa,EAClB,KAAK,WAAa,EAElB,KAAK,UAAWA,CAAM,CAEvB,CAEA,UAAWA,EAAS,CAGnB,OADA,KAAK,OAASA,EACLA,EAAM,CAGd,IAAK,YACJ,KAAK,WAAa,EAClB,KAAK,WAAa,EAClB,MAGD,IAAK,YACJ,KAAK,WAAa,EAClB,KAAK,WAAa,EAClB,MAED,QACC,MAAM,IAAI,MAAO,gDAAiDA,CAAM,GAAI,CAEhF,CAEC,CAEA,4BAA6BC,EAAI,CAEhC,GAAK,KAAK,WAAa,CAGtB,MAAMC,EAAQC,EAAU,UAAWF,EAAG,EAAG,EAAG,GAAK,CAAC,EAClD,MAAO,GAAI,KAAK,KAAM,KAAK,IAAKC,EAAQ,KAAK,EAAE,CAAE,EAAK,KAAK,GAAK,CAEjE,KAEC,QAAOC,EAAU,UAAWF,EAAG,EAAG,EAAG,CAAE,KAAK,GAAK,EAAG,KAAK,GAAK,CAAC,CAIjE,CAEA,6BAA8BA,EAAI,CAEjC,OAAOE,EAAU,UAAWF,EAAG,EAAG,EAAG,CAAE,KAAK,GAAI,KAAK,EAAE,CAExD,CAEA,4BAA6BG,EAAM,CAElC,GAAK,KAAK,WAAa,CAGtB,MAAMC,EAAY,KAAK,IAAK,KAAK,IAAO,KAAK,GAAK,EAAQD,EAAM,CAAG,CAAE,EACrE,MAAS,GAAI,EAAQ,EAAIC,GAAc,EAAI,KAAK,GAEjD,KAEC,QAAOF,EAAU,UAAWC,EAAK,CAAE,KAAK,GAAK,EAAG,KAAK,GAAK,EAAG,EAAG,CAAC,CAInE,CAEA,6BAA8BE,EAAM,CAEnC,OAASA,EAAM,KAAK,KAAS,EAAI,KAAK,GAEvC,CAEA,mCAAoCC,EAAQ,CAE3C,MAAO,GAAI,KAAK,EAEjB,CAEA,kCAAmCA,EAAQ,CAG1C,IAAIC,EAAKD,EAAQ,KAOjB,OANKC,EAAK,IAETA,EAAKD,EAAQ,MAIT,KAAK,WAGF,KAAK,IAAK,KAAK,4BAA6BA,GAAU,KAAK,4BAA6BC,CAAE,CAAE,EAAK,KAIjG,KAAK,EAId,CAEA,WAAY,CAEX,MAAO,CACN,KAAK,6BAA8B,CAAC,EAAI,KAAK,4BAA6B,CAAC,EAC3E,KAAK,6BAA8B,CAAC,EAAI,KAAK,4BAA6B,CAAC,CAC9E,CAEC,CAED,CC7HO,MAAMC,UAAuBC,CAAiB,CAEpD,YAAaC,EAAU,GAAK,CAE3B,MAAK,EAEL,KAAM,CACL,OAAAC,EAAS,GACT,cAAAC,EAAgB,IAChB,IAAAC,EAAM,IACT,EAAMH,EAEJ,KAAK,cAAgBE,EACrB,KAAK,OAASD,EACd,KAAK,IAAME,CAEZ,CAEA,OAAQC,EAAGC,EAAGC,EAAQ,CAErB,OAAO,KAAK,IACV,QAAS,cAAeA,CAAK,EAC7B,QAAS,cAAeF,CAAC,EACzB,QAAS,+BAAgCC,CAAC,CAE7C,CAEA,MAAO,CAGN,KAAM,CAAE,OAAAE,EAAQ,cAAAL,EAAe,OAAAD,EAAQ,IAAAE,CAAG,EAAK,KAE/C,OAAAI,EAAO,MAAQ,CAAE,0BAA0B,KAAMJ,CAAG,EACpDI,EAAO,cAAe,IAAInB,EAAkB,WAAW,CAAE,EACzDmB,EAAO,iBAAkB,GAAGA,EAAO,WAAW,UAAS,CAAE,EACzDA,EAAO,eAAgBN,EAAQM,EAAO,WAAW,WAAYA,EAAO,WAAW,WAAY,CAC1F,eAAgBL,EAChB,gBAAiBA,CACpB,CAAG,EAED,KAAK,IAAMC,EAEJ,QAAQ,QAAO,CAEvB,CAED,CC7CO,MAAMK,UAAuBT,CAAiB,CAEpD,YAAaC,EAAU,GAAK,CAE3B,KAAM,CAAE,IAAAG,EAAM,IAAI,EAAKH,EAEvB,MAAK,EAEL,KAAK,SAAW,KAChB,KAAK,UAAY,KACjB,KAAK,IAAMG,CAEZ,CAEA,OAAQC,EAAGC,EAAGC,EAAQ,CAErB,KAAM,CAAE,IAAAH,EAAK,UAAAM,EAAW,SAAAC,EAAU,OAAAH,CAAM,EAAK,KAC7C,OAAO,IAAI,IAAK,GAAI,SAAUG,EAAUJ,EAAQC,EAAO,QAAQ,EAAG,IAAI,CAAE,IAAMH,CAAC,IAAMC,CAAC,IAAMI,IAAcN,CAAG,EAAG,SAAQ,CAEzH,CAEA,MAAO,CAEN,KAAM,CAAE,IAAAA,CAAG,EAAK,KAEhB,OAAO,KACL,UAAW,IAAI,IAAK,sBAAuBA,CAAG,EAAI,KAAK,YAAY,EACnE,KAAMQ,GAAOA,EAAI,KAAI,CAAE,EACvB,KAAMC,GAAQ,CAEd,KAAM,CAAE,OAAAL,CAAM,EAAK,KAGbM,EAAM,IAAI,UAAS,EAAG,gBAAiBD,EAAM,UAAU,EACvDE,EAAcD,EAAI,cAAe,aAAa,EAC9CE,EAAaF,EAAI,cAAe,YAAY,EAI5CG,EAAc,CAAE,GAHLH,EAAI,cAAe,UAAU,EAAG,iBAAkB,SAAS,CAG3C,EAC/B,IAAKI,IAAQ,CACb,KAAM,SAAUA,EAAG,aAAc,MAAM,CAAE,EACzC,cAAe,WAAYA,EAAG,aAAc,iBAAiB,CAAE,EAC/D,MAAO,SAAUA,EAAG,aAAc,OAAO,CAAE,CACjD,EAAQ,EACF,KAAM,CAAEC,EAAGC,IAEJD,EAAE,MAAQC,EAAE,KAEnB,EAGIC,EAAO,WAAYN,EAAY,aAAc,MAAM,CAAE,EAAKtB,EAAU,QACpE6B,EAAO,WAAYP,EAAY,aAAc,MAAM,CAAE,EAAKtB,EAAU,QACpE8B,EAAO,WAAYR,EAAY,aAAc,MAAM,CAAE,EAAKtB,EAAU,QACpE+B,EAAO,WAAYT,EAAY,aAAc,MAAM,CAAE,EAAKtB,EAAU,QAUpEgC,EAAY,SAAUT,EAAW,aAAc,OAAO,CAAE,EACxDU,EAAa,SAAUV,EAAW,aAAc,QAAQ,CAAE,EAC1DN,EAAYM,EAAW,aAAc,WAAW,EAChDW,EAAMb,EAAI,cAAe,KAAK,EAAG,YAGvC,KAAK,UAAYJ,EACjB,KAAK,IAAMN,EACX,KAAK,SAAWa,EAGhBT,EAAO,cAAe,IAAInB,EAAkBsC,CAAG,CAAE,EACjDnB,EAAO,iBAAkBa,EAAME,EAAMD,EAAME,CAAI,EAE/CP,EAAY,QAAS,CAAE,CAAE,MAAAW,KAAa,CAErCpB,EAAO,SAAUoB,EAAO,CACvB,WAAYpB,EAAO,WAAW,WAAa,GAAKoB,EAChD,eAAgBH,EAChB,gBAAiBC,CACvB,CAAM,CAEF,CAAC,CAEF,CAAC,CAEH,CAED"}