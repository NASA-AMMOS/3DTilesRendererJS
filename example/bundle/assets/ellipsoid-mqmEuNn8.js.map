{"version":3,"file":"ellipsoid-mqmEuNn8.js","sources":["../../ellipsoid.js"],"sourcesContent":["import { SphereHelper } from '../src/three/plugins/objects/SphereHelper.js';\nimport { EllipsoidRegionHelper, EllipsoidRegionLineHelper } from '../src/three/plugins/objects/EllipsoidRegionHelper.js';\nimport {\n\tScene,\n\tGroup,\n\tDirectionalLight,\n\tAmbientLight,\n\tWebGLRenderer,\n\tPerspectiveCamera,\n\tMeshPhongMaterial,\n\tBox3Helper,\n\tBox3,\n\tSphere,\n\tSphereGeometry,\n\tMesh,\n} from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport GUI from 'three/examples/jsm/libs/lil-gui.module.min.js';\n\nlet camera, controls, scene, renderer, group;\nlet dirLight;\nlet sphereHelper, boxHelper;\nlet helper, ghostHelper, edges, boxGroup;\nconst pointsArray = [];\nlet pointsGroup;\n\nconst params = {\n\n\tdisplaySphereHelper: false,\n\tdisplayBoxHelper: false,\n\tdisplayPoints: false,\n\n};\n\ninit();\nanimate();\n\nfunction init() {\n\n\tscene = new Scene();\n\n\t// set up renderer\n\trenderer = new WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( 0x151c1f );\n\trenderer.shadowMap.enabled = true;\n\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// set up camera\n\tcamera = new PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0.1, 100 );\n\tcamera.position.set( 3, 1.5, 1 );\n\n\t// add the region group with rotation\n\tgroup = new Group();\n\tgroup.rotation.x = - Math.PI / 2;\n\tscene.add( group );\n\n\tpointsGroup = new Group();\n\tgroup.add( pointsGroup );\n\n\t// add ellipsoid helper\n\thelper = new EllipsoidRegionHelper();\n\thelper.material = new MeshPhongMaterial( {\n\n\t\tpolygonOffset: true,\n\t\tpolygonOffsetFactor: 1,\n\t\tpolygonOffsetUnits: 1,\n\n\t} );\n\thelper.ellipsoidRegion.radius.z = 0.95;\n\n\thelper.ellipsoidRegion.heightStart = - 0.05;\n\thelper.ellipsoidRegion.heightEnd = 0.05;\n\n\thelper.ellipsoidRegion.latStart = 0;\n\thelper.ellipsoidRegion.latEnd = Math.PI / 4;\n\n\thelper.ellipsoidRegion.lonStart = 0;\n\thelper.ellipsoidRegion.lonEnd = Math.PI / 4;\n\n\t// add ghosted region\n\tghostHelper = new EllipsoidRegionHelper();\n\tghostHelper.material = new MeshPhongMaterial( { opacity: 0.1, transparent: true, depthWrite: false } );\n\n\t// add region edges\n\tedges = new EllipsoidRegionLineHelper( helper.ellipsoidRegion );\n\tedges.material.color.set( 0x151c1f ).convertSRGBToLinear();\n\n\t// add sphere helper\n\tsphereHelper = new SphereHelper( new Sphere() );\n\n\t// add box helper\n\tboxGroup = new Group();\n\n\tboxHelper = new Box3Helper( new Box3() );\n\tboxGroup.add( boxHelper );\n\n\tgroup.add( helper, ghostHelper, edges, sphereHelper, boxGroup );\n\n\tupdateHelper();\n\n\t// controls\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\tcontrols.screenSpacePanning = false;\n\tcontrols.minDistance = 1;\n\tcontrols.maxDistance = 2000;\n\n\t// lights\n\tdirLight = new DirectionalLight( 0xffffff, 1.25 );\n\tdirLight.position.set( 1, 2, 3 ).multiplyScalar( 40 );\n\tscene.add( dirLight );\n\n\tconst ambLight = new AmbientLight( 0xffffff, 0.15 );\n\tscene.add( ambLight );\n\n\tconst gui = new GUI();\n\tgui.add( params, 'displayBoxHelper' );\n\tgui.add( params, 'displaySphereHelper' );\n\tgui.add( params, 'displayPoints' );\n\n\tconst radiusFolder = gui.addFolder( 'radius' );\n\tradiusFolder.add( helper.ellipsoidRegion.radius, 'x', 0.1, 2 ).onChange( updateHelper );\n\tradiusFolder.add( helper.ellipsoidRegion.radius, 'y', 0.1, 2 ).onChange( updateHelper );\n\tradiusFolder.add( helper.ellipsoidRegion.radius, 'z', 0.1, 2 ).onChange( updateHelper );\n\n\tconst regionFolder = gui.addFolder( 'region' );\n\tregionFolder.add( helper.ellipsoidRegion, 'latStart', - Math.PI / 2, Math.PI / 2 ).onChange( updateHelper );\n\tregionFolder.add( helper.ellipsoidRegion, 'latEnd', - Math.PI / 2, Math.PI / 2 ).onChange( updateHelper );\n\tregionFolder.add( helper.ellipsoidRegion, 'lonStart', 0, 2 * Math.PI ).onChange( updateHelper );\n\tregionFolder.add( helper.ellipsoidRegion, 'lonEnd', 0, 2 * Math.PI ).onChange( updateHelper );\n\tregionFolder.add( helper.ellipsoidRegion, 'heightStart', - 0.25, 0.25 ).onChange( updateHelper );\n\tregionFolder.add( helper.ellipsoidRegion, 'heightEnd', - 0.25, 0.25 ).onChange( updateHelper );\n\n\tonWindowResize();\n\twindow.addEventListener( 'resize', onWindowResize, false );\n\n}\n\nfunction updateHelper() {\n\n\t// update the ghost radius\n\tghostHelper.ellipsoidRegion.radius.copy( helper.ellipsoidRegion.radius );\n\n\t// update geometry\n\thelper.update();\n\tghostHelper.update();\n\tedges.update();\n\n\t// update the bounds helpers\n\thelper.ellipsoidRegion.getBoundingSphere( sphereHelper.sphere );\n\thelper.ellipsoidRegion.getBoundingBox( boxHelper.box, boxGroup.matrix );\n\tboxGroup.matrix.decompose(\n\t\tboxGroup.position,\n\t\tboxGroup.quaternion,\n\t\tboxGroup.scale,\n\t);\n\n\tconst points = helper.ellipsoidRegion._getPoints();\n\tpointsArray.forEach( o => o.visible = false );\n\tfor ( let i = 0; i < points.length; i ++ ) {\n\n\t\tif ( ! pointsArray[ i ] ) {\n\n\t\t\tpointsArray.push( new Mesh( new SphereGeometry( 0.01 ) ) );\n\t\t\tpointsArray[ i ].material.color.set( 0xff0000 );\n\t\t\tpointsGroup.add( pointsArray[ i ] );\n\n\t\t}\n\n\t\tpointsArray[ i ].position.copy( points[ i ] );\n\t\tpointsArray[ i ].visible = true;\n\n\t}\n\n}\n\nfunction onWindowResize() {\n\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\tcamera.updateProjectionMatrix();\n\n}\n\nfunction animate() {\n\n\trequestAnimationFrame( animate );\n\n\trender();\n\n}\n\nfunction render() {\n\n\tsphereHelper.visible = params.displaySphereHelper;\n\tboxHelper.visible = params.displayBoxHelper;\n\tpointsGroup.visible = params.displayPoints;\n\trenderer.render( scene, camera );\n\n}\n"],"names":["camera","controls","scene","renderer","group","dirLight","sphereHelper","boxHelper","helper","ghostHelper","edges","boxGroup","pointsArray","pointsGroup","params","init","animate","Scene","WebGLRenderer","PerspectiveCamera","Group","EllipsoidRegionHelper","MeshPhongMaterial","EllipsoidRegionLineHelper","SphereHelper","Sphere","Box3Helper","Box3","updateHelper","OrbitControls","DirectionalLight","ambLight","AmbientLight","gui","GUI","radiusFolder","regionFolder","onWindowResize","points","o","Mesh","SphereGeometry","render"],"mappings":"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"}