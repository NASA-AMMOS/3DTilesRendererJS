{"version":3,"file":"Environment-DnnZCRxH.js","sources":["../../../node_modules/three-stdlib/node_modules/fflate/esm/browser.js","../../../node_modules/three-stdlib/objects/GroundProjectedEnv.js","../../../node_modules/three-stdlib/loaders/RGBELoader.js","../../../node_modules/three-stdlib/loaders/EXRLoader.js","../../../node_modules/@monogrid/gainmap-js/dist/QuadRenderer-DuOPRGA4.js","../../../node_modules/@monogrid/gainmap-js/dist/decode.js","../../../node_modules/@react-three/drei/helpers/environment-assets.js","../../../node_modules/@react-three/drei/core/useEnvironment.js","../../../node_modules/@react-three/drei/core/Environment.js"],"sourcesContent":["// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([c], { type: 'text/javascript' }))));\n    w.onerror = function (e) { return cb(e.error, null); };\n    w.onmessage = function (e) { return cb(null, e.data); };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\n// see fleb note\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new u32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return [b, r];\n};\nvar _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i)\n        ++l[cd[i] - 1];\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 0; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >>> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p / 8) | 0) + (p & 7 && 1); };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, buf, st) {\n    // source length\n    var sl = dat.length;\n    if (!sl || (st && !st.l && sl < 5))\n        return buf || new u8(0);\n    // have to estimate size\n    var noBuf = !buf || st;\n    // no state\n    var noSt = !st || st.i;\n    if (!st)\n        st = {};\n    // Assumes roughly 33% compression ratio average\n    if (!buf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            st.f = final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        throw 'unexpected EOF';\n                    break;\n                }\n                // ensure size\n                if (noBuf)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >>> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                throw 'invalid block type';\n            if (pos > tbts) {\n                if (noSt)\n                    throw 'unexpected EOF';\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17;\n        if (noBuf)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    throw 'unexpected EOF';\n                break;\n            }\n            if (!c)\n                throw 'invalid length/literal';\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                if (!d)\n                    throw 'invalid distance';\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        throw 'unexpected EOF';\n                    break;\n                }\n                if (noBuf)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                for (; bt < end; bt += 4) {\n                    buf[bt] = buf[bt - dt];\n                    buf[bt + 1] = buf[bt + 1 - dt];\n                    buf[bt + 2] = buf[bt + 2 - dt];\n                    buf[bt + 3] = buf[bt + 3 - dt];\n                }\n                bt = end;\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    return bt == buf.length ? buf : slc(buf, 0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n    d[o + 2] |= v >>> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return [et, 0];\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return [v, 1];\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return [new u8(tr), mbt];\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return [cl.subarray(0, cli), s];\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >>> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a[0], mlb = _a[1];\n    var _b = hTree(df, 15), ddt = _b[0], mdb = _b[1];\n    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];\n    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        lcfreq[lclt[i] & 31]++;\n    for (var i = 0; i < lcdt.length; ++i)\n        lcfreq[lcdt[i] & 31]++;\n    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);\n    if (flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >>> 5) & 127), p += clct[i] >>> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        if (syms[i] > 255) {\n            var len = (syms[i] >>> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (syms[i] >>> 23) & 31), p += fleb[len];\n            var dst = syms[i] & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (syms[i] >>> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, lst) {\n    var s = dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var pos = 0;\n    if (!lvl || s < 8) {\n        for (var i = 0; i <= s; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e < s) {\n                // write full block\n                pos = wfblk(w, pos, dat.subarray(i, e));\n            }\n            else {\n                // write final block\n                w[i] = lst;\n                pos = wfblk(w, pos, dat.subarray(i, s));\n            }\n        }\n    }\n    else {\n        var opt = deo[lvl - 1];\n        var n = opt >>> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = new u16(32768), head = new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new u32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos\n        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;\n        for (; i < s; ++i) {\n            // hash value\n            // deopt when i > s - 3 - at end, deopt acceptable\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && rem > 423) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = (imod - pimod) & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = (i - dif + j + 32768) & 32767;\n                                    var pti = prev[ti];\n                                    var cd = (ti - pti + 32768) & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += (imod - pimod + 32768) & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one Uint32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        // this is the easiest way to avoid needing to maintain state\n        if (!lst && pos & 7)\n            pos = wfblk(w, pos + 1, et);\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Alder32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a >>> 8) << 16 | (b & 255) << 8 | (b >>> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, !st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/ /g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return [fnStr, td];\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k] instanceof u8 || v[k] instanceof u16 || v[k] instanceof u32)\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    var _a;\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];\n        ch[id] = wcln(fns[m], fnStr, td_1);\n    }\n    var td = mrg({}, ch[id][1]);\n    return wk(ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, hMap, max, bits, bits16, shft, slc, inflt, inflateSync, pbf, gu8]; };\nvar bDflt = function () { return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zlv]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get u8\nvar gu8 = function (o) { return o && o.size && new u8(o.size); };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (t)\n            throw 'stream finished';\n        if (!strm.ondata)\n            throw 'no stream handler';\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        throw 'invalid gzip data';\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += d[10] | (d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return ((d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) | (d[l - 1] << 24)) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + ((o.filename && (o.filename.length + 1)) || 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (fl ? (32 - 2 * fl) : 1);\n};\n// zlib valid\nvar zlv = function (d) {\n    if ((d[0] & 15) != 8 || (d[0] >>> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        throw 'invalid zlib data';\n    if (d[1] & 32)\n        throw 'invalid zlib data: preset dictionaries not supported';\n};\nfunction AsyncCmpStrm(opts, cb) {\n    if (!cb && typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n// zlib footer: -4 to -0 is Adler32\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (!cb && typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, !f), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (this.d)\n            throw 'stream finished';\n        if (!this.ondata)\n            throw 'no stream handler';\n        this.d = final;\n        this.p(chunk, final || false);\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an inflation stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Inflate(cb) {\n        this.s = {};\n        this.p = new u8(0);\n        this.ondata = cb;\n    }\n    Inflate.prototype.e = function (c) {\n        if (this.d)\n            throw 'stream finished';\n        if (!this.ondata)\n            throw 'no stream handler';\n        var l = this.p.length;\n        var n = new u8(l + c.length);\n        n.set(this.p), n.set(c, l), this.p = n;\n    };\n    Inflate.prototype.c = function (final) {\n        this.d = this.s.i = final || false;\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.o, this.s);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous inflation stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncInflate(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, 0, function () {\n            var strm = new Inflate();\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gu8(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, out) {\n    return inflt(data, out);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        this.c.p(c);\n        this.l += c.length;\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a GUNZIP stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Gunzip(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            var s = this.p.length > 3 ? gzs(this.p) : 4;\n            if (s >= this.p.length && !final)\n                return;\n            this.p = this.p.subarray(s), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 8)\n                throw 'invalid gzip stream';\n            this.p = this.p.subarray(0, -8);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous GUNZIP stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncGunzip(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, 0, function () {\n            var strm = new Gunzip();\n            onmessage = astrm(strm);\n        }, 9);\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, out) {\n    return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        this.c.p(c);\n        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates a Zlib decompression stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Unzlib(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 2 && !final)\n                return;\n            this.p = this.p.subarray(2), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                throw 'invalid zlib stream';\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous Zlib decompression stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncUnzlib(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, 0, function () {\n            var strm = new Unzlib();\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gu8(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, out) {\n    return inflt((zlv(data), data.subarray(2, -4)), out);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    /**\n     * Creates a decompression stream\n     * @param cb The callback to call whenever data is decompressed\n     */\n    function Decompress(cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            throw 'no stream handler';\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_1 = this;\n                var cb = function () { _this_1.ondata.apply(_this_1, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(cb)\n                        : new this.Z(cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    /**\n   * Creates an asynchronous decompression stream\n   * @param cb The callback to call whenever data is decompressed\n   */\n    function AsyncDecompress(cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, out) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, out)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, out)\n            : unzlibSync(data, out);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k;\n        if (val instanceof u8)\n            t[n] = [val, o];\n        else if (Array.isArray(val))\n            t[n] = [val[0], mrg(o, val[1])];\n        else\n            fltn(val, n + '/', t, o);\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return [r, slc(d, i - 1)];\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            throw 'no callback';\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    throw 'invalid utf-8 data';\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            throw 'stream finished';\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), ch = _a[0], np = _a[1];\n        if (final) {\n            if (np.length)\n                throw 'invalid utf-8 data';\n            this.p = null;\n        }\n        else\n            this.p = np;\n        this.ondata(ch, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            throw 'no callback';\n        if (this.d)\n            throw 'stream finished';\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td)\n        return td.decode(dat);\n    else {\n        var _a = dutf8(dat), out = _a[0], ext = _a[1];\n        if (ext.length)\n            throw 'invalid utf-8 data';\n        return out;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                throw 'extra field too long';\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c == null && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        throw 'date not in range 1980-2099';\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >>> 1)), b += 4;\n    if (c != null) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            throw 'no callback - add to ZIP archive before pushing';\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (this.d & 2)\n            throw 'stream finished';\n        var f = strToU8(file.filename), fl = f.length;\n        var com = file.comment, o = com && strToU8(com);\n        var u = fl != file.filename.length || (o && (com.length != o.length));\n        var hl = fl + exfl(file.extra) + 30;\n        if (fl > 65535)\n            throw 'filename too long';\n        var header = new u8(hl);\n        wzh(header, 0, file, f, u);\n        var chks = [header];\n        var pAll = function () {\n            for (var _i = 0, chks_1 = chks; _i < chks_1.length; _i++) {\n                var chk = chks_1[_i];\n                _this_1.ondata(null, chk, false);\n            }\n            chks = [];\n        };\n        var tr = this.d;\n        this.d = 0;\n        var ind = this.u.length;\n        var uf = mrg(file, {\n            f: f,\n            u: u,\n            o: o,\n            t: function () {\n                if (file.terminate)\n                    file.terminate();\n            },\n            r: function () {\n                pAll();\n                if (tr) {\n                    var nxt = _this_1.u[ind + 1];\n                    if (nxt)\n                        nxt.r();\n                    else\n                        _this_1.d = 1;\n                }\n                tr = 1;\n            }\n        });\n        var cl = 0;\n        file.ondata = function (err, dat, final) {\n            if (err) {\n                _this_1.ondata(err, dat, final);\n                _this_1.terminate();\n            }\n            else {\n                cl += dat.length;\n                chks.push(dat);\n                if (final) {\n                    var dd = new u8(16);\n                    wbytes(dd, 0, 0x8074B50);\n                    wbytes(dd, 4, file.crc);\n                    wbytes(dd, 8, cl);\n                    wbytes(dd, 12, file.size);\n                    chks.push(dd);\n                    uf.c = cl, uf.b = hl + cl + 16, uf.crc = file.crc, uf.size = file.size;\n                    if (tr)\n                        uf.r();\n                    tr = 1;\n                }\n                else if (tr)\n                    pAll();\n            }\n        };\n        this.u.push(uf);\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            if (this.d & 1)\n                throw 'stream finishing';\n            throw 'stream finished';\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, f.c, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        throw 'no callback';\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cb(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cb(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cb(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl('filename too long', null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            throw 'filename too long';\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, data, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            throw 'no callback';\n        if (!this.p)\n            throw 'stream finished';\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_2 = [];\n                        this_1.k.unshift(chks_2);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    throw 'no callback';\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        throw 'unknown compression type ' + cmp_1;\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_3 = chks_2; _i < chks_3.length; _i++) {\n                                        var dat = chks_3[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_2 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                throw 'invalid zip file';\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\n/**\n * Asynchronously decompresses a ZIP archive\n * @param data The raw compressed ZIP file\n * @param cb The callback to call with the decompressed files\n * @returns A function that can be used to immediately terminate the unzipping\n */\nexport function unzip(data, cb) {\n    if (typeof cb != 'function')\n        throw 'no callback';\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cb('invalid zip file', null);\n            return;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (!lft)\n        cb(null, {});\n    var c = lft;\n    var o = b4(data, e + 16);\n    var z = o == 4294967295;\n    if (z) {\n        e = b4(data, e - 12);\n        if (b4(data, e) != 0x6064B50) {\n            cb('invalid zip file', null);\n            return;\n        }\n        c = lft = b4(data, e + 32);\n        o = b4(data, e + 48);\n    }\n    var _loop_3 = function (i) {\n        var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cb(e, null);\n            }\n            else {\n                files[fn] = d;\n                if (!--lft)\n                    cb(null, files);\n            }\n        };\n        if (!c_1)\n            cbl(null, slc(data, b, b + sc));\n        else if (c_1 == 8) {\n            var infl = data.subarray(b, b + sc);\n            if (sc < 320000) {\n                try {\n                    cbl(null, inflateSync(infl, new u8(su)));\n                }\n                catch (e) {\n                    cbl(e, null);\n                }\n            }\n            else\n                term.push(inflate(infl, { size: su }, cbl));\n        }\n        else\n            cbl('unknown compression type ' + c_1, null);\n    };\n    for (var i = 0; i < c; ++i) {\n        _loop_3(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @returns The decompressed files\n */\nexport function unzipSync(data) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            throw 'invalid zip file';\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295;\n    if (z) {\n        e = b4(data, e - 12);\n        if (b4(data, e) != 0x6064B50)\n            throw 'invalid zip file';\n        c = b4(data, e + 32);\n        o = b4(data, e + 48);\n    }\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!c_2)\n            files[fn] = slc(data, b, b + sc);\n        else if (c_2 == 8)\n            files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));\n        else\n            throw 'unknown compression type ' + c_2;\n    }\n    return files;\n}\n","import { Mesh, IcosahedronGeometry, ShaderMaterial, DoubleSide } from \"three\";\nimport { version } from \"../_polyfill/constants.js\";\nconst isCubeTexture = (def) => def && def.isCubeTexture;\nclass GroundProjectedEnv extends Mesh {\n  constructor(texture, options) {\n    var _a, _b;\n    const isCubeMap = isCubeTexture(texture);\n    const w = (_b = isCubeMap ? (_a = texture.image[0]) == null ? void 0 : _a.width : texture.image.width) != null ? _b : 1024;\n    const cubeSize = w / 4;\n    const _lodMax = Math.floor(Math.log2(cubeSize));\n    const _cubeSize = Math.pow(2, _lodMax);\n    const width = 3 * Math.max(_cubeSize, 16 * 7);\n    const height = 4 * _cubeSize;\n    const defines = [\n      isCubeMap ? \"#define ENVMAP_TYPE_CUBE\" : \"\",\n      `#define CUBEUV_TEXEL_WIDTH ${1 / width}`,\n      `#define CUBEUV_TEXEL_HEIGHT ${1 / height}`,\n      `#define CUBEUV_MAX_MIP ${_lodMax}.0`\n    ];\n    const vertexShader = (\n      /* glsl */\n      `\n        varying vec3 vWorldPosition;\n        void main() \n        {\n            vec4 worldPosition = ( modelMatrix * vec4( position, 1.0 ) );\n            vWorldPosition = worldPosition.xyz;\n            \n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n        `\n    );\n    const fragmentShader = defines.join(\"\\n\") + /* glsl */\n    `\n        #define ENVMAP_TYPE_CUBE_UV\n        varying vec3 vWorldPosition;\n        uniform float radius;\n        uniform float height;\n        uniform float angle;\n        #ifdef ENVMAP_TYPE_CUBE\n            uniform samplerCube map;\n        #else\n            uniform sampler2D map;\n        #endif\n        // From: https://www.shadertoy.com/view/4tsBD7\n        float diskIntersectWithBackFaceCulling( vec3 ro, vec3 rd, vec3 c, vec3 n, float r ) \n        {\n            float d = dot ( rd, n );\n            \n            if( d > 0.0 ) { return 1e6; }\n            \n            vec3  o = ro - c;\n            float t = - dot( n, o ) / d;\n            vec3  q = o + rd * t;\n            \n            return ( dot( q, q ) < r * r ) ? t : 1e6;\n        }\n        // From: https://www.iquilezles.org/www/articles/intersectors/intersectors.htm\n        float sphereIntersect( vec3 ro, vec3 rd, vec3 ce, float ra ) \n        {\n            vec3 oc = ro - ce;\n            float b = dot( oc, rd );\n            float c = dot( oc, oc ) - ra * ra;\n            float h = b * b - c;\n            \n            if( h < 0.0 ) { return -1.0; }\n            \n            h = sqrt( h );\n            \n            return - b + h;\n        }\n        vec3 project() \n        {\n            vec3 p = normalize( vWorldPosition );\n            vec3 camPos = cameraPosition;\n            camPos.y -= height;\n            float intersection = sphereIntersect( camPos, p, vec3( 0.0 ), radius );\n            if( intersection > 0.0 ) {\n                \n                vec3 h = vec3( 0.0, - height, 0.0 );\n                float intersection2 = diskIntersectWithBackFaceCulling( camPos, p, h, vec3( 0.0, 1.0, 0.0 ), radius );\n                p = ( camPos + min( intersection, intersection2 ) * p ) / radius;\n            } else {\n                p = vec3( 0.0, 1.0, 0.0 );\n            }\n            return p;\n        }\n        #include <common>\n        #include <cube_uv_reflection_fragment>\n        void main() \n        {\n            vec3 projectedWorldPosition = project();\n            \n            #ifdef ENVMAP_TYPE_CUBE\n                vec3 outcolor = textureCube( map, projectedWorldPosition ).rgb;\n            #else\n                vec3 direction = normalize( projectedWorldPosition );\n                vec2 uv = equirectUv( direction );\n                vec3 outcolor = texture2D( map, uv ).rgb;\n            #endif\n            gl_FragColor = vec4( outcolor, 1.0 );\n            #include <tonemapping_fragment>\n            #include <${version >= 154 ? \"colorspace_fragment\" : \"encodings_fragment\"}>\n        }\n        `;\n    const uniforms = {\n      map: { value: texture },\n      height: { value: (options == null ? void 0 : options.height) || 15 },\n      radius: { value: (options == null ? void 0 : options.radius) || 100 }\n    };\n    const geometry = new IcosahedronGeometry(1, 16);\n    const material = new ShaderMaterial({\n      uniforms,\n      fragmentShader,\n      vertexShader,\n      side: DoubleSide\n    });\n    super(geometry, material);\n  }\n  set radius(radius) {\n    this.material.uniforms.radius.value = radius;\n  }\n  get radius() {\n    return this.material.uniforms.radius.value;\n  }\n  set height(height) {\n    this.material.uniforms.height.value = height;\n  }\n  get height() {\n    return this.material.uniforms.height.value;\n  }\n}\nexport {\n  GroundProjectedEnv\n};\n//# sourceMappingURL=GroundProjectedEnv.js.map\n","import { DataTextureLoader, HalfFloatType, FloatType, DataUtils, LinearFilter } from \"three\";\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n  parse(buffer) {\n    const rgbe_read_error = 1, rgbe_write_error = 2, rgbe_format_error = 3, rgbe_memory_error = 4, rgbe_error = function(rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          throw new Error(\"THREE.RGBELoader: Read Error: \" + (msg || \"\"));\n        case rgbe_write_error:\n          throw new Error(\"THREE.RGBELoader: Write Error: \" + (msg || \"\"));\n        case rgbe_format_error:\n          throw new Error(\"THREE.RGBELoader: Bad File Format: \" + (msg || \"\"));\n        default:\n        case rgbe_memory_error:\n          throw new Error(\"THREE.RGBELoader: Memory Error: \" + (msg || \"\"));\n      }\n    }, RGBE_VALID_PROGRAMTYPE = 1, RGBE_VALID_FORMAT = 2, RGBE_VALID_DIMENSIONS = 4, NEWLINE = \"\\n\", fgets = function(buffer2, lineLimit, consume) {\n      const chunkSize = 128;\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      let p = buffer2.pos, i = -1, len = 0, s = \"\", chunk = String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer2.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n      }\n      if (-1 < i) {\n        if (false !== consume)\n          buffer2.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n      return false;\n    }, RGBE_ReadHeader = function(buffer2) {\n      const magic_token_re = /^#\\?(\\S+)/, gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, format_re = /^\\s*FORMAT=(\\S+)\\s*$/, dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/, header = {\n        valid: 0,\n        string: \"\",\n        comments: \"\",\n        programtype: \"RGBE\",\n        format: \"\",\n        gamma: 1,\n        exposure: 1,\n        width: 0,\n        height: 0\n      };\n      let line, match;\n      if (buffer2.pos >= buffer2.byteLength || !(line = fgets(buffer2))) {\n        rgbe_error(rgbe_read_error, \"no header found\");\n      }\n      if (!(match = line.match(magic_token_re))) {\n        rgbe_error(rgbe_format_error, \"bad initial token\");\n      }\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + \"\\n\";\n      while (true) {\n        line = fgets(buffer2);\n        if (false === line)\n          break;\n        header.string += line + \"\\n\";\n        if (\"#\" === line.charAt(0)) {\n          header.comments += line + \"\\n\";\n          continue;\n        }\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1]);\n        }\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1]);\n        }\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1];\n        }\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS)\n          break;\n      }\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        rgbe_error(rgbe_format_error, \"missing format specifier\");\n      }\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        rgbe_error(rgbe_format_error, \"missing image size specifier\");\n      }\n      return header;\n    }, RGBE_ReadPixels_RLE = function(buffer2, w2, h2) {\n      const scanline_width = w2;\n      if (\n        // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 32767 || // this file is not run length encoded\n        2 !== buffer2[0] || 2 !== buffer2[1] || buffer2[2] & 128\n      ) {\n        return new Uint8Array(buffer2);\n      }\n      if (scanline_width !== (buffer2[2] << 8 | buffer2[3])) {\n        rgbe_error(rgbe_format_error, \"wrong scanline width\");\n      }\n      const data_rgba = new Uint8Array(4 * w2 * h2);\n      if (!data_rgba.length) {\n        rgbe_error(rgbe_memory_error, \"unable to allocate buffer space\");\n      }\n      let offset = 0, pos = 0;\n      const ptr_end = 4 * scanline_width;\n      const rgbeStart = new Uint8Array(4);\n      const scanline_buffer = new Uint8Array(ptr_end);\n      let num_scanlines = h2;\n      while (num_scanlines > 0 && pos < buffer2.byteLength) {\n        if (pos + 4 > buffer2.byteLength) {\n          rgbe_error(rgbe_read_error);\n        }\n        rgbeStart[0] = buffer2[pos++];\n        rgbeStart[1] = buffer2[pos++];\n        rgbeStart[2] = buffer2[pos++];\n        rgbeStart[3] = buffer2[pos++];\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          rgbe_error(rgbe_format_error, \"bad rgbe scanline format\");\n        }\n        let ptr = 0, count;\n        while (ptr < ptr_end && pos < buffer2.byteLength) {\n          count = buffer2[pos++];\n          const isEncodedRun = count > 128;\n          if (isEncodedRun)\n            count -= 128;\n          if (0 === count || ptr + count > ptr_end) {\n            rgbe_error(rgbe_format_error, \"bad scanline data\");\n          }\n          if (isEncodedRun) {\n            const byteValue = buffer2[pos++];\n            for (let i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            }\n          } else {\n            scanline_buffer.set(buffer2.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        }\n        const l = scanline_width;\n        for (let i = 0; i < l; i++) {\n          let off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n        num_scanlines--;\n      }\n      return data_rgba;\n    };\n    const RGBEByteToRGBFloat = function(sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n    const RGBEByteToRGBHalf = function(sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n    const w = rgbe_header_info.width, h = rgbe_header_info.height, image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n    let data, type;\n    let numElements;\n    switch (this.type) {\n      case FloatType:\n        numElements = image_rgba_data.length / 4;\n        const floatArray = new Float32Array(numElements * 4);\n        for (let j = 0; j < numElements; j++) {\n          RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n        }\n        data = floatArray;\n        type = FloatType;\n        break;\n      case HalfFloatType:\n        numElements = image_rgba_data.length / 4;\n        const halfArray = new Uint16Array(numElements * 4);\n        for (let j = 0; j < numElements; j++) {\n          RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n        }\n        data = halfArray;\n        type = HalfFloatType;\n        break;\n      default:\n        throw new Error(\"THREE.RGBELoader: Unsupported type: \" + this.type);\n    }\n    return {\n      width: w,\n      height: h,\n      data,\n      header: rgbe_header_info.string,\n      gamma: rgbe_header_info.gamma,\n      exposure: rgbe_header_info.exposure,\n      type\n    };\n  }\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if (\"colorSpace\" in texture)\n            texture.colorSpace = \"srgb-linear\";\n          else\n            texture.encoding = 3e3;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n      if (onLoad)\n        onLoad(texture, texData);\n    }\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n}\nexport {\n  RGBELoader\n};\n//# sourceMappingURL=RGBELoader.js.map\n","import { DataTextureLoader, HalfFloatType, FloatType, RGBAFormat, RedFormat, LinearFilter, DataUtils } from \"three\";\nimport { unzlibSync } from \"fflate\";\nimport { version } from \"../_polyfill/constants.js\";\nconst hasColorSpace = version >= 152;\nclass EXRLoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n  parse(buffer) {\n    const USHORT_RANGE = 1 << 16;\n    const BITMAP_SIZE = USHORT_RANGE >> 3;\n    const HUF_ENCBITS = 16;\n    const HUF_DECBITS = 14;\n    const HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1;\n    const HUF_DECSIZE = 1 << HUF_DECBITS;\n    const HUF_DECMASK = HUF_DECSIZE - 1;\n    const NBITS = 16;\n    const A_OFFSET = 1 << NBITS - 1;\n    const MOD_MASK = (1 << NBITS) - 1;\n    const SHORT_ZEROCODE_RUN = 59;\n    const LONG_ZEROCODE_RUN = 63;\n    const SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n    const ULONG_SIZE = 8;\n    const FLOAT32_SIZE = 4;\n    const INT32_SIZE = 4;\n    const INT16_SIZE = 2;\n    const INT8_SIZE = 1;\n    const STATIC_HUFFMAN = 0;\n    const DEFLATE = 1;\n    const UNKNOWN = 0;\n    const LOSSY_DCT = 1;\n    const RLE = 2;\n    const logBase = Math.pow(2.7182818, 2.2);\n    function reverseLutFromBitmap(bitmap, lut) {\n      var k = 0;\n      for (var i = 0; i < USHORT_RANGE; ++i) {\n        if (i == 0 || bitmap[i >> 3] & 1 << (i & 7)) {\n          lut[k++] = i;\n        }\n      }\n      var n = k - 1;\n      while (k < USHORT_RANGE)\n        lut[k++] = 0;\n      return n;\n    }\n    function hufClearDecTable(hdec) {\n      for (var i = 0; i < HUF_DECSIZE; i++) {\n        hdec[i] = {};\n        hdec[i].len = 0;\n        hdec[i].lit = 0;\n        hdec[i].p = null;\n      }\n    }\n    const getBitsReturn = { l: 0, c: 0, lc: 0 };\n    function getBits(nBits, c, lc, uInt8Array2, inOffset) {\n      while (lc < nBits) {\n        c = c << 8 | parseUint8Array(uInt8Array2, inOffset);\n        lc += 8;\n      }\n      lc -= nBits;\n      getBitsReturn.l = c >> lc & (1 << nBits) - 1;\n      getBitsReturn.c = c;\n      getBitsReturn.lc = lc;\n    }\n    const hufTableBuffer = new Array(59);\n    function hufCanonicalCodeTable(hcode) {\n      for (var i = 0; i <= 58; ++i)\n        hufTableBuffer[i] = 0;\n      for (var i = 0; i < HUF_ENCSIZE; ++i)\n        hufTableBuffer[hcode[i]] += 1;\n      var c = 0;\n      for (var i = 58; i > 0; --i) {\n        var nc = c + hufTableBuffer[i] >> 1;\n        hufTableBuffer[i] = c;\n        c = nc;\n      }\n      for (var i = 0; i < HUF_ENCSIZE; ++i) {\n        var l = hcode[i];\n        if (l > 0)\n          hcode[i] = l | hufTableBuffer[l]++ << 6;\n      }\n    }\n    function hufUnpackEncTable(uInt8Array2, inDataView, inOffset, ni, im, iM, hcode) {\n      var p = inOffset;\n      var c = 0;\n      var lc = 0;\n      for (; im <= iM; im++) {\n        if (p.value - inOffset.value > ni)\n          return false;\n        getBits(6, c, lc, uInt8Array2, p);\n        var l = getBitsReturn.l;\n        c = getBitsReturn.c;\n        lc = getBitsReturn.lc;\n        hcode[im] = l;\n        if (l == LONG_ZEROCODE_RUN) {\n          if (p.value - inOffset.value > ni) {\n            throw \"Something wrong with hufUnpackEncTable\";\n          }\n          getBits(8, c, lc, uInt8Array2, p);\n          var zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n          c = getBitsReturn.c;\n          lc = getBitsReturn.lc;\n          if (im + zerun > iM + 1) {\n            throw \"Something wrong with hufUnpackEncTable\";\n          }\n          while (zerun--)\n            hcode[im++] = 0;\n          im--;\n        } else if (l >= SHORT_ZEROCODE_RUN) {\n          var zerun = l - SHORT_ZEROCODE_RUN + 2;\n          if (im + zerun > iM + 1) {\n            throw \"Something wrong with hufUnpackEncTable\";\n          }\n          while (zerun--)\n            hcode[im++] = 0;\n          im--;\n        }\n      }\n      hufCanonicalCodeTable(hcode);\n    }\n    function hufLength(code) {\n      return code & 63;\n    }\n    function hufCode(code) {\n      return code >> 6;\n    }\n    function hufBuildDecTable(hcode, im, iM, hdecod) {\n      for (; im <= iM; im++) {\n        var c = hufCode(hcode[im]);\n        var l = hufLength(hcode[im]);\n        if (c >> l) {\n          throw \"Invalid table entry\";\n        }\n        if (l > HUF_DECBITS) {\n          var pl = hdecod[c >> l - HUF_DECBITS];\n          if (pl.len) {\n            throw \"Invalid table entry\";\n          }\n          pl.lit++;\n          if (pl.p) {\n            var p = pl.p;\n            pl.p = new Array(pl.lit);\n            for (var i = 0; i < pl.lit - 1; ++i) {\n              pl.p[i] = p[i];\n            }\n          } else {\n            pl.p = new Array(1);\n          }\n          pl.p[pl.lit - 1] = im;\n        } else if (l) {\n          var plOffset = 0;\n          for (var i = 1 << HUF_DECBITS - l; i > 0; i--) {\n            var pl = hdecod[(c << HUF_DECBITS - l) + plOffset];\n            if (pl.len || pl.p) {\n              throw \"Invalid table entry\";\n            }\n            pl.len = l;\n            pl.lit = im;\n            plOffset++;\n          }\n        }\n      }\n      return true;\n    }\n    const getCharReturn = { c: 0, lc: 0 };\n    function getChar(c, lc, uInt8Array2, inOffset) {\n      c = c << 8 | parseUint8Array(uInt8Array2, inOffset);\n      lc += 8;\n      getCharReturn.c = c;\n      getCharReturn.lc = lc;\n    }\n    const getCodeReturn = { c: 0, lc: 0 };\n    function getCode(po, rlc, c, lc, uInt8Array2, inDataView, inOffset, outBuffer, outBufferOffset, outBufferEndOffset) {\n      if (po == rlc) {\n        if (lc < 8) {\n          getChar(c, lc, uInt8Array2, inOffset);\n          c = getCharReturn.c;\n          lc = getCharReturn.lc;\n        }\n        lc -= 8;\n        var cs = c >> lc;\n        var cs = new Uint8Array([cs])[0];\n        if (outBufferOffset.value + cs > outBufferEndOffset) {\n          return false;\n        }\n        var s = outBuffer[outBufferOffset.value - 1];\n        while (cs-- > 0) {\n          outBuffer[outBufferOffset.value++] = s;\n        }\n      } else if (outBufferOffset.value < outBufferEndOffset) {\n        outBuffer[outBufferOffset.value++] = po;\n      } else {\n        return false;\n      }\n      getCodeReturn.c = c;\n      getCodeReturn.lc = lc;\n    }\n    function UInt16(value) {\n      return value & 65535;\n    }\n    function Int16(value) {\n      var ref = UInt16(value);\n      return ref > 32767 ? ref - 65536 : ref;\n    }\n    const wdec14Return = { a: 0, b: 0 };\n    function wdec14(l, h) {\n      var ls = Int16(l);\n      var hs = Int16(h);\n      var hi = hs;\n      var ai = ls + (hi & 1) + (hi >> 1);\n      var as = ai;\n      var bs = ai - hi;\n      wdec14Return.a = as;\n      wdec14Return.b = bs;\n    }\n    function wdec16(l, h) {\n      var m = UInt16(l);\n      var d = UInt16(h);\n      var bb = m - (d >> 1) & MOD_MASK;\n      var aa = d + bb - A_OFFSET & MOD_MASK;\n      wdec14Return.a = aa;\n      wdec14Return.b = bb;\n    }\n    function wav2Decode(buffer2, j, nx, ox, ny, oy, mx) {\n      var w14 = mx < 1 << 14;\n      var n = nx > ny ? ny : nx;\n      var p = 1;\n      var p2;\n      while (p <= n)\n        p <<= 1;\n      p >>= 1;\n      p2 = p;\n      p >>= 1;\n      while (p >= 1) {\n        var py = 0;\n        var ey = py + oy * (ny - p2);\n        var oy1 = oy * p;\n        var oy2 = oy * p2;\n        var ox1 = ox * p;\n        var ox2 = ox * p2;\n        var i00, i01, i10, i11;\n        for (; py <= ey; py += oy2) {\n          var px = py;\n          var ex = py + ox * (nx - p2);\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1;\n            var p10 = px + oy1;\n            var p11 = p10 + ox1;\n            if (w14) {\n              wdec14(buffer2[px + j], buffer2[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec14(buffer2[p01 + j], buffer2[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec14(i00, i01);\n              buffer2[px + j] = wdec14Return.a;\n              buffer2[p01 + j] = wdec14Return.b;\n              wdec14(i10, i11);\n              buffer2[p10 + j] = wdec14Return.a;\n              buffer2[p11 + j] = wdec14Return.b;\n            } else {\n              wdec16(buffer2[px + j], buffer2[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec16(buffer2[p01 + j], buffer2[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec16(i00, i01);\n              buffer2[px + j] = wdec14Return.a;\n              buffer2[p01 + j] = wdec14Return.b;\n              wdec16(i10, i11);\n              buffer2[p10 + j] = wdec14Return.a;\n              buffer2[p11 + j] = wdec14Return.b;\n            }\n          }\n          if (nx & p) {\n            var p10 = px + oy1;\n            if (w14)\n              wdec14(buffer2[px + j], buffer2[p10 + j]);\n            else\n              wdec16(buffer2[px + j], buffer2[p10 + j]);\n            i00 = wdec14Return.a;\n            buffer2[p10 + j] = wdec14Return.b;\n            buffer2[px + j] = i00;\n          }\n        }\n        if (ny & p) {\n          var px = py;\n          var ex = py + ox * (nx - p2);\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1;\n            if (w14)\n              wdec14(buffer2[px + j], buffer2[p01 + j]);\n            else\n              wdec16(buffer2[px + j], buffer2[p01 + j]);\n            i00 = wdec14Return.a;\n            buffer2[p01 + j] = wdec14Return.b;\n            buffer2[px + j] = i00;\n          }\n        }\n        p2 = p;\n        p >>= 1;\n      }\n      return py;\n    }\n    function hufDecode(encodingTable, decodingTable, uInt8Array2, inDataView, inOffset, ni, rlc, no, outBuffer, outOffset) {\n      var c = 0;\n      var lc = 0;\n      var outBufferEndOffset = no;\n      var inOffsetEnd = Math.trunc(inOffset.value + (ni + 7) / 8);\n      while (inOffset.value < inOffsetEnd) {\n        getChar(c, lc, uInt8Array2, inOffset);\n        c = getCharReturn.c;\n        lc = getCharReturn.lc;\n        while (lc >= HUF_DECBITS) {\n          var index = c >> lc - HUF_DECBITS & HUF_DECMASK;\n          var pl = decodingTable[index];\n          if (pl.len) {\n            lc -= pl.len;\n            getCode(pl.lit, rlc, c, lc, uInt8Array2, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n            c = getCodeReturn.c;\n            lc = getCodeReturn.lc;\n          } else {\n            if (!pl.p) {\n              throw \"hufDecode issues\";\n            }\n            var j;\n            for (j = 0; j < pl.lit; j++) {\n              var l = hufLength(encodingTable[pl.p[j]]);\n              while (lc < l && inOffset.value < inOffsetEnd) {\n                getChar(c, lc, uInt8Array2, inOffset);\n                c = getCharReturn.c;\n                lc = getCharReturn.lc;\n              }\n              if (lc >= l) {\n                if (hufCode(encodingTable[pl.p[j]]) == (c >> lc - l & (1 << l) - 1)) {\n                  lc -= l;\n                  getCode(\n                    pl.p[j],\n                    rlc,\n                    c,\n                    lc,\n                    uInt8Array2,\n                    inDataView,\n                    inOffset,\n                    outBuffer,\n                    outOffset,\n                    outBufferEndOffset\n                  );\n                  c = getCodeReturn.c;\n                  lc = getCodeReturn.lc;\n                  break;\n                }\n              }\n            }\n            if (j == pl.lit) {\n              throw \"hufDecode issues\";\n            }\n          }\n        }\n      }\n      var i = 8 - ni & 7;\n      c >>= i;\n      lc -= i;\n      while (lc > 0) {\n        var pl = decodingTable[c << HUF_DECBITS - lc & HUF_DECMASK];\n        if (pl.len) {\n          lc -= pl.len;\n          getCode(pl.lit, rlc, c, lc, uInt8Array2, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n          c = getCodeReturn.c;\n          lc = getCodeReturn.lc;\n        } else {\n          throw \"hufDecode issues\";\n        }\n      }\n      return true;\n    }\n    function hufUncompress(uInt8Array2, inDataView, inOffset, nCompressed, outBuffer, nRaw) {\n      var outOffset = { value: 0 };\n      var initialInOffset = inOffset.value;\n      var im = parseUint32(inDataView, inOffset);\n      var iM = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n      var nBits = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n      if (im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE) {\n        throw \"Something wrong with HUF_ENCSIZE\";\n      }\n      var freq = new Array(HUF_ENCSIZE);\n      var hdec = new Array(HUF_DECSIZE);\n      hufClearDecTable(hdec);\n      var ni = nCompressed - (inOffset.value - initialInOffset);\n      hufUnpackEncTable(uInt8Array2, inDataView, inOffset, ni, im, iM, freq);\n      if (nBits > 8 * (nCompressed - (inOffset.value - initialInOffset))) {\n        throw \"Something wrong with hufUncompress\";\n      }\n      hufBuildDecTable(freq, im, iM, hdec);\n      hufDecode(freq, hdec, uInt8Array2, inDataView, inOffset, nBits, iM, nRaw, outBuffer, outOffset);\n    }\n    function applyLut(lut, data, nData) {\n      for (var i = 0; i < nData; ++i) {\n        data[i] = lut[data[i]];\n      }\n    }\n    function predictor(source) {\n      for (var t = 1; t < source.length; t++) {\n        var d = source[t - 1] + source[t] - 128;\n        source[t] = d;\n      }\n    }\n    function interleaveScalar(source, out) {\n      var t1 = 0;\n      var t2 = Math.floor((source.length + 1) / 2);\n      var s = 0;\n      var stop = source.length - 1;\n      while (true) {\n        if (s > stop)\n          break;\n        out[s++] = source[t1++];\n        if (s > stop)\n          break;\n        out[s++] = source[t2++];\n      }\n    }\n    function decodeRunLength(source) {\n      var size = source.byteLength;\n      var out = new Array();\n      var p = 0;\n      var reader = new DataView(source);\n      while (size > 0) {\n        var l = reader.getInt8(p++);\n        if (l < 0) {\n          var count = -l;\n          size -= count + 1;\n          for (var i = 0; i < count; i++) {\n            out.push(reader.getUint8(p++));\n          }\n        } else {\n          var count = l;\n          size -= 2;\n          var value = reader.getUint8(p++);\n          for (var i = 0; i < count + 1; i++) {\n            out.push(value);\n          }\n        }\n      }\n      return out;\n    }\n    function lossyDctDecode(cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer) {\n      var dataView = new DataView(outBuffer.buffer);\n      var width = channelData[cscSet.idx[0]].width;\n      var height = channelData[cscSet.idx[0]].height;\n      var numComp = 3;\n      var numFullBlocksX = Math.floor(width / 8);\n      var numBlocksX = Math.ceil(width / 8);\n      var numBlocksY = Math.ceil(height / 8);\n      var leftoverX = width - (numBlocksX - 1) * 8;\n      var leftoverY = height - (numBlocksY - 1) * 8;\n      var currAcComp = { value: 0 };\n      var currDcComp = new Array(numComp);\n      var dctData = new Array(numComp);\n      var halfZigBlock = new Array(numComp);\n      var rowBlock = new Array(numComp);\n      var rowOffsets = new Array(numComp);\n      for (let comp2 = 0; comp2 < numComp; ++comp2) {\n        rowOffsets[comp2] = rowPtrs[cscSet.idx[comp2]];\n        currDcComp[comp2] = comp2 < 1 ? 0 : currDcComp[comp2 - 1] + numBlocksX * numBlocksY;\n        dctData[comp2] = new Float32Array(64);\n        halfZigBlock[comp2] = new Uint16Array(64);\n        rowBlock[comp2] = new Uint16Array(numBlocksX * 64);\n      }\n      for (let blocky = 0; blocky < numBlocksY; ++blocky) {\n        var maxY = 8;\n        if (blocky == numBlocksY - 1)\n          maxY = leftoverY;\n        var maxX = 8;\n        for (let blockx = 0; blockx < numBlocksX; ++blockx) {\n          if (blockx == numBlocksX - 1)\n            maxX = leftoverX;\n          for (let comp2 = 0; comp2 < numComp; ++comp2) {\n            halfZigBlock[comp2].fill(0);\n            halfZigBlock[comp2][0] = dcBuffer[currDcComp[comp2]++];\n            unRleAC(currAcComp, acBuffer, halfZigBlock[comp2]);\n            unZigZag(halfZigBlock[comp2], dctData[comp2]);\n            dctInverse(dctData[comp2]);\n          }\n          {\n            csc709Inverse(dctData);\n          }\n          for (let comp2 = 0; comp2 < numComp; ++comp2) {\n            convertToHalf(dctData[comp2], rowBlock[comp2], blockx * 64);\n          }\n        }\n        let offset2 = 0;\n        for (let comp2 = 0; comp2 < numComp; ++comp2) {\n          const type2 = channelData[cscSet.idx[comp2]].type;\n          for (let y2 = 8 * blocky; y2 < 8 * blocky + maxY; ++y2) {\n            offset2 = rowOffsets[comp2][y2];\n            for (let blockx = 0; blockx < numFullBlocksX; ++blockx) {\n              const src = blockx * 64 + (y2 & 7) * 8;\n              dataView.setUint16(offset2 + 0 * INT16_SIZE * type2, rowBlock[comp2][src + 0], true);\n              dataView.setUint16(offset2 + 1 * INT16_SIZE * type2, rowBlock[comp2][src + 1], true);\n              dataView.setUint16(offset2 + 2 * INT16_SIZE * type2, rowBlock[comp2][src + 2], true);\n              dataView.setUint16(offset2 + 3 * INT16_SIZE * type2, rowBlock[comp2][src + 3], true);\n              dataView.setUint16(offset2 + 4 * INT16_SIZE * type2, rowBlock[comp2][src + 4], true);\n              dataView.setUint16(offset2 + 5 * INT16_SIZE * type2, rowBlock[comp2][src + 5], true);\n              dataView.setUint16(offset2 + 6 * INT16_SIZE * type2, rowBlock[comp2][src + 6], true);\n              dataView.setUint16(offset2 + 7 * INT16_SIZE * type2, rowBlock[comp2][src + 7], true);\n              offset2 += 8 * INT16_SIZE * type2;\n            }\n          }\n          if (numFullBlocksX != numBlocksX) {\n            for (let y2 = 8 * blocky; y2 < 8 * blocky + maxY; ++y2) {\n              const offset3 = rowOffsets[comp2][y2] + 8 * numFullBlocksX * INT16_SIZE * type2;\n              const src = numFullBlocksX * 64 + (y2 & 7) * 8;\n              for (let x2 = 0; x2 < maxX; ++x2) {\n                dataView.setUint16(offset3 + x2 * INT16_SIZE * type2, rowBlock[comp2][src + x2], true);\n              }\n            }\n          }\n        }\n      }\n      var halfRow = new Uint16Array(width);\n      var dataView = new DataView(outBuffer.buffer);\n      for (var comp = 0; comp < numComp; ++comp) {\n        channelData[cscSet.idx[comp]].decoded = true;\n        var type = channelData[cscSet.idx[comp]].type;\n        if (channelData[comp].type != 2)\n          continue;\n        for (var y = 0; y < height; ++y) {\n          const offset2 = rowOffsets[comp][y];\n          for (var x = 0; x < width; ++x) {\n            halfRow[x] = dataView.getUint16(offset2 + x * INT16_SIZE * type, true);\n          }\n          for (var x = 0; x < width; ++x) {\n            dataView.setFloat32(offset2 + x * INT16_SIZE * type, decodeFloat16(halfRow[x]), true);\n          }\n        }\n      }\n    }\n    function unRleAC(currAcComp, acBuffer, halfZigBlock) {\n      var acValue;\n      var dctComp = 1;\n      while (dctComp < 64) {\n        acValue = acBuffer[currAcComp.value];\n        if (acValue == 65280) {\n          dctComp = 64;\n        } else if (acValue >> 8 == 255) {\n          dctComp += acValue & 255;\n        } else {\n          halfZigBlock[dctComp] = acValue;\n          dctComp++;\n        }\n        currAcComp.value++;\n      }\n    }\n    function unZigZag(src, dst) {\n      dst[0] = decodeFloat16(src[0]);\n      dst[1] = decodeFloat16(src[1]);\n      dst[2] = decodeFloat16(src[5]);\n      dst[3] = decodeFloat16(src[6]);\n      dst[4] = decodeFloat16(src[14]);\n      dst[5] = decodeFloat16(src[15]);\n      dst[6] = decodeFloat16(src[27]);\n      dst[7] = decodeFloat16(src[28]);\n      dst[8] = decodeFloat16(src[2]);\n      dst[9] = decodeFloat16(src[4]);\n      dst[10] = decodeFloat16(src[7]);\n      dst[11] = decodeFloat16(src[13]);\n      dst[12] = decodeFloat16(src[16]);\n      dst[13] = decodeFloat16(src[26]);\n      dst[14] = decodeFloat16(src[29]);\n      dst[15] = decodeFloat16(src[42]);\n      dst[16] = decodeFloat16(src[3]);\n      dst[17] = decodeFloat16(src[8]);\n      dst[18] = decodeFloat16(src[12]);\n      dst[19] = decodeFloat16(src[17]);\n      dst[20] = decodeFloat16(src[25]);\n      dst[21] = decodeFloat16(src[30]);\n      dst[22] = decodeFloat16(src[41]);\n      dst[23] = decodeFloat16(src[43]);\n      dst[24] = decodeFloat16(src[9]);\n      dst[25] = decodeFloat16(src[11]);\n      dst[26] = decodeFloat16(src[18]);\n      dst[27] = decodeFloat16(src[24]);\n      dst[28] = decodeFloat16(src[31]);\n      dst[29] = decodeFloat16(src[40]);\n      dst[30] = decodeFloat16(src[44]);\n      dst[31] = decodeFloat16(src[53]);\n      dst[32] = decodeFloat16(src[10]);\n      dst[33] = decodeFloat16(src[19]);\n      dst[34] = decodeFloat16(src[23]);\n      dst[35] = decodeFloat16(src[32]);\n      dst[36] = decodeFloat16(src[39]);\n      dst[37] = decodeFloat16(src[45]);\n      dst[38] = decodeFloat16(src[52]);\n      dst[39] = decodeFloat16(src[54]);\n      dst[40] = decodeFloat16(src[20]);\n      dst[41] = decodeFloat16(src[22]);\n      dst[42] = decodeFloat16(src[33]);\n      dst[43] = decodeFloat16(src[38]);\n      dst[44] = decodeFloat16(src[46]);\n      dst[45] = decodeFloat16(src[51]);\n      dst[46] = decodeFloat16(src[55]);\n      dst[47] = decodeFloat16(src[60]);\n      dst[48] = decodeFloat16(src[21]);\n      dst[49] = decodeFloat16(src[34]);\n      dst[50] = decodeFloat16(src[37]);\n      dst[51] = decodeFloat16(src[47]);\n      dst[52] = decodeFloat16(src[50]);\n      dst[53] = decodeFloat16(src[56]);\n      dst[54] = decodeFloat16(src[59]);\n      dst[55] = decodeFloat16(src[61]);\n      dst[56] = decodeFloat16(src[35]);\n      dst[57] = decodeFloat16(src[36]);\n      dst[58] = decodeFloat16(src[48]);\n      dst[59] = decodeFloat16(src[49]);\n      dst[60] = decodeFloat16(src[57]);\n      dst[61] = decodeFloat16(src[58]);\n      dst[62] = decodeFloat16(src[62]);\n      dst[63] = decodeFloat16(src[63]);\n    }\n    function dctInverse(data) {\n      const a = 0.5 * Math.cos(3.14159 / 4);\n      const b = 0.5 * Math.cos(3.14159 / 16);\n      const c = 0.5 * Math.cos(3.14159 / 8);\n      const d = 0.5 * Math.cos(3 * 3.14159 / 16);\n      const e = 0.5 * Math.cos(5 * 3.14159 / 16);\n      const f = 0.5 * Math.cos(3 * 3.14159 / 8);\n      const g = 0.5 * Math.cos(7 * 3.14159 / 16);\n      var alpha = new Array(4);\n      var beta = new Array(4);\n      var theta = new Array(4);\n      var gamma = new Array(4);\n      for (var row = 0; row < 8; ++row) {\n        var rowPtr = row * 8;\n        alpha[0] = c * data[rowPtr + 2];\n        alpha[1] = f * data[rowPtr + 2];\n        alpha[2] = c * data[rowPtr + 6];\n        alpha[3] = f * data[rowPtr + 6];\n        beta[0] = b * data[rowPtr + 1] + d * data[rowPtr + 3] + e * data[rowPtr + 5] + g * data[rowPtr + 7];\n        beta[1] = d * data[rowPtr + 1] - g * data[rowPtr + 3] - b * data[rowPtr + 5] - e * data[rowPtr + 7];\n        beta[2] = e * data[rowPtr + 1] - b * data[rowPtr + 3] + g * data[rowPtr + 5] + d * data[rowPtr + 7];\n        beta[3] = g * data[rowPtr + 1] - e * data[rowPtr + 3] + d * data[rowPtr + 5] - b * data[rowPtr + 7];\n        theta[0] = a * (data[rowPtr + 0] + data[rowPtr + 4]);\n        theta[3] = a * (data[rowPtr + 0] - data[rowPtr + 4]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[rowPtr + 0] = gamma[0] + beta[0];\n        data[rowPtr + 1] = gamma[1] + beta[1];\n        data[rowPtr + 2] = gamma[2] + beta[2];\n        data[rowPtr + 3] = gamma[3] + beta[3];\n        data[rowPtr + 4] = gamma[3] - beta[3];\n        data[rowPtr + 5] = gamma[2] - beta[2];\n        data[rowPtr + 6] = gamma[1] - beta[1];\n        data[rowPtr + 7] = gamma[0] - beta[0];\n      }\n      for (var column = 0; column < 8; ++column) {\n        alpha[0] = c * data[16 + column];\n        alpha[1] = f * data[16 + column];\n        alpha[2] = c * data[48 + column];\n        alpha[3] = f * data[48 + column];\n        beta[0] = b * data[8 + column] + d * data[24 + column] + e * data[40 + column] + g * data[56 + column];\n        beta[1] = d * data[8 + column] - g * data[24 + column] - b * data[40 + column] - e * data[56 + column];\n        beta[2] = e * data[8 + column] - b * data[24 + column] + g * data[40 + column] + d * data[56 + column];\n        beta[3] = g * data[8 + column] - e * data[24 + column] + d * data[40 + column] - b * data[56 + column];\n        theta[0] = a * (data[column] + data[32 + column]);\n        theta[3] = a * (data[column] - data[32 + column]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[0 + column] = gamma[0] + beta[0];\n        data[8 + column] = gamma[1] + beta[1];\n        data[16 + column] = gamma[2] + beta[2];\n        data[24 + column] = gamma[3] + beta[3];\n        data[32 + column] = gamma[3] - beta[3];\n        data[40 + column] = gamma[2] - beta[2];\n        data[48 + column] = gamma[1] - beta[1];\n        data[56 + column] = gamma[0] - beta[0];\n      }\n    }\n    function csc709Inverse(data) {\n      for (var i = 0; i < 64; ++i) {\n        var y = data[0][i];\n        var cb = data[1][i];\n        var cr = data[2][i];\n        data[0][i] = y + 1.5747 * cr;\n        data[1][i] = y - 0.1873 * cb - 0.4682 * cr;\n        data[2][i] = y + 1.8556 * cb;\n      }\n    }\n    function convertToHalf(src, dst, idx) {\n      for (var i = 0; i < 64; ++i) {\n        dst[idx + i] = DataUtils.toHalfFloat(toLinear(src[i]));\n      }\n    }\n    function toLinear(float) {\n      if (float <= 1) {\n        return Math.sign(float) * Math.pow(Math.abs(float), 2.2);\n      } else {\n        return Math.sign(float) * Math.pow(logBase, Math.abs(float) - 1);\n      }\n    }\n    function uncompressRAW(info) {\n      return new DataView(info.array.buffer, info.offset.value, info.size);\n    }\n    function uncompressRLE(info) {\n      var compressed = info.viewer.buffer.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = new Uint8Array(decodeRunLength(compressed));\n      var tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer);\n      interleaveScalar(rawBuffer, tmpBuffer);\n      return new DataView(tmpBuffer.buffer);\n    }\n    function uncompressZIP(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = unzlibSync(compressed);\n      var tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer);\n      interleaveScalar(rawBuffer, tmpBuffer);\n      return new DataView(tmpBuffer.buffer);\n    }\n    function uncompressPIZ(info) {\n      var inDataView = info.viewer;\n      var inOffset = { value: info.offset.value };\n      var outBuffer = new Uint16Array(info.width * info.scanlineBlockSize * (info.channels * info.type));\n      var bitmap = new Uint8Array(BITMAP_SIZE);\n      var outBufferEnd = 0;\n      var pizChannelData = new Array(info.channels);\n      for (var i = 0; i < info.channels; i++) {\n        pizChannelData[i] = {};\n        pizChannelData[i][\"start\"] = outBufferEnd;\n        pizChannelData[i][\"end\"] = pizChannelData[i][\"start\"];\n        pizChannelData[i][\"nx\"] = info.width;\n        pizChannelData[i][\"ny\"] = info.lines;\n        pizChannelData[i][\"size\"] = info.type;\n        outBufferEnd += pizChannelData[i].nx * pizChannelData[i].ny * pizChannelData[i].size;\n      }\n      var minNonZero = parseUint16(inDataView, inOffset);\n      var maxNonZero = parseUint16(inDataView, inOffset);\n      if (maxNonZero >= BITMAP_SIZE) {\n        throw \"Something is wrong with PIZ_COMPRESSION BITMAP_SIZE\";\n      }\n      if (minNonZero <= maxNonZero) {\n        for (var i = 0; i < maxNonZero - minNonZero + 1; i++) {\n          bitmap[i + minNonZero] = parseUint8(inDataView, inOffset);\n        }\n      }\n      var lut = new Uint16Array(USHORT_RANGE);\n      var maxValue = reverseLutFromBitmap(bitmap, lut);\n      var length = parseUint32(inDataView, inOffset);\n      hufUncompress(info.array, inDataView, inOffset, length, outBuffer, outBufferEnd);\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = pizChannelData[i];\n        for (var j = 0; j < pizChannelData[i].size; ++j) {\n          wav2Decode(outBuffer, cd.start + j, cd.nx, cd.size, cd.ny, cd.nx * cd.size, maxValue);\n        }\n      }\n      applyLut(lut, outBuffer, outBufferEnd);\n      var tmpOffset2 = 0;\n      var tmpBuffer = new Uint8Array(outBuffer.buffer.byteLength);\n      for (var y = 0; y < info.lines; y++) {\n        for (var c = 0; c < info.channels; c++) {\n          var cd = pizChannelData[c];\n          var n = cd.nx * cd.size;\n          var cp = new Uint8Array(outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE);\n          tmpBuffer.set(cp, tmpOffset2);\n          tmpOffset2 += n * INT16_SIZE;\n          cd.end += n;\n        }\n      }\n      return new DataView(tmpBuffer.buffer);\n    }\n    function uncompressPXR(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = unzlibSync(compressed);\n      const sz = info.lines * info.channels * info.width;\n      const tmpBuffer = info.type == 1 ? new Uint16Array(sz) : new Uint32Array(sz);\n      let tmpBufferEnd = 0;\n      let writePtr = 0;\n      const ptr = new Array(4);\n      for (let y = 0; y < info.lines; y++) {\n        for (let c = 0; c < info.channels; c++) {\n          let pixel = 0;\n          switch (info.type) {\n            case 1:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              tmpBufferEnd = ptr[1] + info.width;\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 8 | rawBuffer[ptr[1]++];\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n              break;\n            case 2:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              ptr[2] = ptr[1] + info.width;\n              tmpBufferEnd = ptr[2] + info.width;\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 24 | rawBuffer[ptr[1]++] << 16 | rawBuffer[ptr[2]++] << 8;\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n              break;\n          }\n        }\n      }\n      return new DataView(tmpBuffer.buffer);\n    }\n    function uncompressDWA(info) {\n      var inDataView = info.viewer;\n      var inOffset = { value: info.offset.value };\n      var outBuffer = new Uint8Array(info.width * info.lines * (info.channels * info.type * INT16_SIZE));\n      var dwaHeader = {\n        version: parseInt64(inDataView, inOffset),\n        unknownUncompressedSize: parseInt64(inDataView, inOffset),\n        unknownCompressedSize: parseInt64(inDataView, inOffset),\n        acCompressedSize: parseInt64(inDataView, inOffset),\n        dcCompressedSize: parseInt64(inDataView, inOffset),\n        rleCompressedSize: parseInt64(inDataView, inOffset),\n        rleUncompressedSize: parseInt64(inDataView, inOffset),\n        rleRawSize: parseInt64(inDataView, inOffset),\n        totalAcUncompressedCount: parseInt64(inDataView, inOffset),\n        totalDcUncompressedCount: parseInt64(inDataView, inOffset),\n        acCompression: parseInt64(inDataView, inOffset)\n      };\n      if (dwaHeader.version < 2) {\n        throw \"EXRLoader.parse: \" + EXRHeader.compression + \" version \" + dwaHeader.version + \" is unsupported\";\n      }\n      var channelRules = new Array();\n      var ruleSize = parseUint16(inDataView, inOffset) - INT16_SIZE;\n      while (ruleSize > 0) {\n        var name = parseNullTerminatedString(inDataView.buffer, inOffset);\n        var value = parseUint8(inDataView, inOffset);\n        var compression = value >> 2 & 3;\n        var csc = (value >> 4) - 1;\n        var index = new Int8Array([csc])[0];\n        var type = parseUint8(inDataView, inOffset);\n        channelRules.push({\n          name,\n          index,\n          type,\n          compression\n        });\n        ruleSize -= name.length + 3;\n      }\n      var channels = EXRHeader.channels;\n      var channelData = new Array(info.channels);\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = channelData[i] = {};\n        var channel = channels[i];\n        cd.name = channel.name;\n        cd.compression = UNKNOWN;\n        cd.decoded = false;\n        cd.type = channel.pixelType;\n        cd.pLinear = channel.pLinear;\n        cd.width = info.width;\n        cd.height = info.lines;\n      }\n      var cscSet = {\n        idx: new Array(3)\n      };\n      for (var offset2 = 0; offset2 < info.channels; ++offset2) {\n        var cd = channelData[offset2];\n        for (var i = 0; i < channelRules.length; ++i) {\n          var rule = channelRules[i];\n          if (cd.name == rule.name) {\n            cd.compression = rule.compression;\n            if (rule.index >= 0) {\n              cscSet.idx[rule.index] = offset2;\n            }\n            cd.offset = offset2;\n          }\n        }\n      }\n      if (dwaHeader.acCompressedSize > 0) {\n        switch (dwaHeader.acCompression) {\n          case STATIC_HUFFMAN:\n            var acBuffer = new Uint16Array(dwaHeader.totalAcUncompressedCount);\n            hufUncompress(\n              info.array,\n              inDataView,\n              inOffset,\n              dwaHeader.acCompressedSize,\n              acBuffer,\n              dwaHeader.totalAcUncompressedCount\n            );\n            break;\n          case DEFLATE:\n            var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount);\n            var data = unzlibSync(compressed);\n            var acBuffer = new Uint16Array(data.buffer);\n            inOffset.value += dwaHeader.totalAcUncompressedCount;\n            break;\n        }\n      }\n      if (dwaHeader.dcCompressedSize > 0) {\n        var zlibInfo = {\n          array: info.array,\n          offset: inOffset,\n          size: dwaHeader.dcCompressedSize\n        };\n        var dcBuffer = new Uint16Array(uncompressZIP(zlibInfo).buffer);\n        inOffset.value += dwaHeader.dcCompressedSize;\n      }\n      if (dwaHeader.rleRawSize > 0) {\n        var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.rleCompressedSize);\n        var data = unzlibSync(compressed);\n        var rleBuffer = decodeRunLength(data.buffer);\n        inOffset.value += dwaHeader.rleCompressedSize;\n      }\n      var outBufferEnd = 0;\n      var rowOffsets = new Array(channelData.length);\n      for (var i = 0; i < rowOffsets.length; ++i) {\n        rowOffsets[i] = new Array();\n      }\n      for (var y = 0; y < info.lines; ++y) {\n        for (var chan = 0; chan < channelData.length; ++chan) {\n          rowOffsets[chan].push(outBufferEnd);\n          outBufferEnd += channelData[chan].width * info.type * INT16_SIZE;\n        }\n      }\n      lossyDctDecode(cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer);\n      for (var i = 0; i < channelData.length; ++i) {\n        var cd = channelData[i];\n        if (cd.decoded)\n          continue;\n        switch (cd.compression) {\n          case RLE:\n            var row = 0;\n            var rleOffset = 0;\n            for (var y = 0; y < info.lines; ++y) {\n              var rowOffsetBytes = rowOffsets[i][row];\n              for (var x = 0; x < cd.width; ++x) {\n                for (var byte = 0; byte < INT16_SIZE * cd.type; ++byte) {\n                  outBuffer[rowOffsetBytes++] = rleBuffer[rleOffset + byte * cd.width * cd.height];\n                }\n                rleOffset++;\n              }\n              row++;\n            }\n            break;\n          case LOSSY_DCT:\n          default:\n            throw \"EXRLoader.parse: unsupported channel compression\";\n        }\n      }\n      return new DataView(outBuffer.buffer);\n    }\n    function parseNullTerminatedString(buffer2, offset2) {\n      var uintBuffer = new Uint8Array(buffer2);\n      var endOffset = 0;\n      while (uintBuffer[offset2.value + endOffset] != 0) {\n        endOffset += 1;\n      }\n      var stringValue = new TextDecoder().decode(uintBuffer.slice(offset2.value, offset2.value + endOffset));\n      offset2.value = offset2.value + endOffset + 1;\n      return stringValue;\n    }\n    function parseFixedLengthString(buffer2, offset2, size) {\n      var stringValue = new TextDecoder().decode(new Uint8Array(buffer2).slice(offset2.value, offset2.value + size));\n      offset2.value = offset2.value + size;\n      return stringValue;\n    }\n    function parseRational(dataView, offset2) {\n      var x = parseInt32(dataView, offset2);\n      var y = parseUint32(dataView, offset2);\n      return [x, y];\n    }\n    function parseTimecode(dataView, offset2) {\n      var x = parseUint32(dataView, offset2);\n      var y = parseUint32(dataView, offset2);\n      return [x, y];\n    }\n    function parseInt32(dataView, offset2) {\n      var Int32 = dataView.getInt32(offset2.value, true);\n      offset2.value = offset2.value + INT32_SIZE;\n      return Int32;\n    }\n    function parseUint32(dataView, offset2) {\n      var Uint32 = dataView.getUint32(offset2.value, true);\n      offset2.value = offset2.value + INT32_SIZE;\n      return Uint32;\n    }\n    function parseUint8Array(uInt8Array2, offset2) {\n      var Uint8 = uInt8Array2[offset2.value];\n      offset2.value = offset2.value + INT8_SIZE;\n      return Uint8;\n    }\n    function parseUint8(dataView, offset2) {\n      var Uint8 = dataView.getUint8(offset2.value);\n      offset2.value = offset2.value + INT8_SIZE;\n      return Uint8;\n    }\n    const parseInt64 = function(dataView, offset2) {\n      let int;\n      if (\"getBigInt64\" in DataView.prototype) {\n        int = Number(dataView.getBigInt64(offset2.value, true));\n      } else {\n        int = dataView.getUint32(offset2.value + 4, true) + Number(dataView.getUint32(offset2.value, true) << 32);\n      }\n      offset2.value += ULONG_SIZE;\n      return int;\n    };\n    function parseFloat32(dataView, offset2) {\n      var float = dataView.getFloat32(offset2.value, true);\n      offset2.value += FLOAT32_SIZE;\n      return float;\n    }\n    function decodeFloat32(dataView, offset2) {\n      return DataUtils.toHalfFloat(parseFloat32(dataView, offset2));\n    }\n    function decodeFloat16(binary) {\n      var exponent = (binary & 31744) >> 10, fraction = binary & 1023;\n      return (binary >> 15 ? -1 : 1) * (exponent ? exponent === 31 ? fraction ? NaN : Infinity : Math.pow(2, exponent - 15) * (1 + fraction / 1024) : 6103515625e-14 * (fraction / 1024));\n    }\n    function parseUint16(dataView, offset2) {\n      var Uint16 = dataView.getUint16(offset2.value, true);\n      offset2.value += INT16_SIZE;\n      return Uint16;\n    }\n    function parseFloat16(buffer2, offset2) {\n      return decodeFloat16(parseUint16(buffer2, offset2));\n    }\n    function parseChlist(dataView, buffer2, offset2, size) {\n      var startOffset = offset2.value;\n      var channels = [];\n      while (offset2.value < startOffset + size - 1) {\n        var name = parseNullTerminatedString(buffer2, offset2);\n        var pixelType = parseInt32(dataView, offset2);\n        var pLinear = parseUint8(dataView, offset2);\n        offset2.value += 3;\n        var xSampling = parseInt32(dataView, offset2);\n        var ySampling = parseInt32(dataView, offset2);\n        channels.push({\n          name,\n          pixelType,\n          pLinear,\n          xSampling,\n          ySampling\n        });\n      }\n      offset2.value += 1;\n      return channels;\n    }\n    function parseChromaticities(dataView, offset2) {\n      var redX = parseFloat32(dataView, offset2);\n      var redY = parseFloat32(dataView, offset2);\n      var greenX = parseFloat32(dataView, offset2);\n      var greenY = parseFloat32(dataView, offset2);\n      var blueX = parseFloat32(dataView, offset2);\n      var blueY = parseFloat32(dataView, offset2);\n      var whiteX = parseFloat32(dataView, offset2);\n      var whiteY = parseFloat32(dataView, offset2);\n      return {\n        redX,\n        redY,\n        greenX,\n        greenY,\n        blueX,\n        blueY,\n        whiteX,\n        whiteY\n      };\n    }\n    function parseCompression(dataView, offset2) {\n      var compressionCodes = [\n        \"NO_COMPRESSION\",\n        \"RLE_COMPRESSION\",\n        \"ZIPS_COMPRESSION\",\n        \"ZIP_COMPRESSION\",\n        \"PIZ_COMPRESSION\",\n        \"PXR24_COMPRESSION\",\n        \"B44_COMPRESSION\",\n        \"B44A_COMPRESSION\",\n        \"DWAA_COMPRESSION\",\n        \"DWAB_COMPRESSION\"\n      ];\n      var compression = parseUint8(dataView, offset2);\n      return compressionCodes[compression];\n    }\n    function parseBox2i(dataView, offset2) {\n      var xMin = parseUint32(dataView, offset2);\n      var yMin = parseUint32(dataView, offset2);\n      var xMax = parseUint32(dataView, offset2);\n      var yMax = parseUint32(dataView, offset2);\n      return { xMin, yMin, xMax, yMax };\n    }\n    function parseLineOrder(dataView, offset2) {\n      var lineOrders = [\"INCREASING_Y\"];\n      var lineOrder = parseUint8(dataView, offset2);\n      return lineOrders[lineOrder];\n    }\n    function parseV2f(dataView, offset2) {\n      var x = parseFloat32(dataView, offset2);\n      var y = parseFloat32(dataView, offset2);\n      return [x, y];\n    }\n    function parseV3f(dataView, offset2) {\n      var x = parseFloat32(dataView, offset2);\n      var y = parseFloat32(dataView, offset2);\n      var z = parseFloat32(dataView, offset2);\n      return [x, y, z];\n    }\n    function parseValue(dataView, buffer2, offset2, type, size) {\n      if (type === \"string\" || type === \"stringvector\" || type === \"iccProfile\") {\n        return parseFixedLengthString(buffer2, offset2, size);\n      } else if (type === \"chlist\") {\n        return parseChlist(dataView, buffer2, offset2, size);\n      } else if (type === \"chromaticities\") {\n        return parseChromaticities(dataView, offset2);\n      } else if (type === \"compression\") {\n        return parseCompression(dataView, offset2);\n      } else if (type === \"box2i\") {\n        return parseBox2i(dataView, offset2);\n      } else if (type === \"lineOrder\") {\n        return parseLineOrder(dataView, offset2);\n      } else if (type === \"float\") {\n        return parseFloat32(dataView, offset2);\n      } else if (type === \"v2f\") {\n        return parseV2f(dataView, offset2);\n      } else if (type === \"v3f\") {\n        return parseV3f(dataView, offset2);\n      } else if (type === \"int\") {\n        return parseInt32(dataView, offset2);\n      } else if (type === \"rational\") {\n        return parseRational(dataView, offset2);\n      } else if (type === \"timecode\") {\n        return parseTimecode(dataView, offset2);\n      } else if (type === \"preview\") {\n        offset2.value += size;\n        return \"skipped\";\n      } else {\n        offset2.value += size;\n        return void 0;\n      }\n    }\n    function parseHeader(dataView, buffer2, offset2) {\n      const EXRHeader2 = {};\n      if (dataView.getUint32(0, true) != 20000630) {\n        throw \"THREE.EXRLoader: provided file doesn't appear to be in OpenEXR format.\";\n      }\n      EXRHeader2.version = dataView.getUint8(4);\n      const spec = dataView.getUint8(5);\n      EXRHeader2.spec = {\n        singleTile: !!(spec & 2),\n        longName: !!(spec & 4),\n        deepFormat: !!(spec & 8),\n        multiPart: !!(spec & 16)\n      };\n      offset2.value = 8;\n      var keepReading = true;\n      while (keepReading) {\n        var attributeName = parseNullTerminatedString(buffer2, offset2);\n        if (attributeName == 0) {\n          keepReading = false;\n        } else {\n          var attributeType = parseNullTerminatedString(buffer2, offset2);\n          var attributeSize = parseUint32(dataView, offset2);\n          var attributeValue = parseValue(dataView, buffer2, offset2, attributeType, attributeSize);\n          if (attributeValue === void 0) {\n            console.warn(`EXRLoader.parse: skipped unknown header attribute type '${attributeType}'.`);\n          } else {\n            EXRHeader2[attributeName] = attributeValue;\n          }\n        }\n      }\n      if ((spec & ~4) != 0) {\n        console.error(\"EXRHeader:\", EXRHeader2);\n        throw \"THREE.EXRLoader: provided file is currently unsupported.\";\n      }\n      return EXRHeader2;\n    }\n    function setupDecoder(EXRHeader2, dataView, uInt8Array2, offset2, outputType) {\n      const EXRDecoder2 = {\n        size: 0,\n        viewer: dataView,\n        array: uInt8Array2,\n        offset: offset2,\n        width: EXRHeader2.dataWindow.xMax - EXRHeader2.dataWindow.xMin + 1,\n        height: EXRHeader2.dataWindow.yMax - EXRHeader2.dataWindow.yMin + 1,\n        channels: EXRHeader2.channels.length,\n        bytesPerLine: null,\n        lines: null,\n        inputSize: null,\n        type: EXRHeader2.channels[0].pixelType,\n        uncompress: null,\n        getter: null,\n        format: null,\n        [hasColorSpace ? \"colorSpace\" : \"encoding\"]: null\n      };\n      switch (EXRHeader2.compression) {\n        case \"NO_COMPRESSION\":\n          EXRDecoder2.lines = 1;\n          EXRDecoder2.uncompress = uncompressRAW;\n          break;\n        case \"RLE_COMPRESSION\":\n          EXRDecoder2.lines = 1;\n          EXRDecoder2.uncompress = uncompressRLE;\n          break;\n        case \"ZIPS_COMPRESSION\":\n          EXRDecoder2.lines = 1;\n          EXRDecoder2.uncompress = uncompressZIP;\n          break;\n        case \"ZIP_COMPRESSION\":\n          EXRDecoder2.lines = 16;\n          EXRDecoder2.uncompress = uncompressZIP;\n          break;\n        case \"PIZ_COMPRESSION\":\n          EXRDecoder2.lines = 32;\n          EXRDecoder2.uncompress = uncompressPIZ;\n          break;\n        case \"PXR24_COMPRESSION\":\n          EXRDecoder2.lines = 16;\n          EXRDecoder2.uncompress = uncompressPXR;\n          break;\n        case \"DWAA_COMPRESSION\":\n          EXRDecoder2.lines = 32;\n          EXRDecoder2.uncompress = uncompressDWA;\n          break;\n        case \"DWAB_COMPRESSION\":\n          EXRDecoder2.lines = 256;\n          EXRDecoder2.uncompress = uncompressDWA;\n          break;\n        default:\n          throw \"EXRLoader.parse: \" + EXRHeader2.compression + \" is unsupported\";\n      }\n      EXRDecoder2.scanlineBlockSize = EXRDecoder2.lines;\n      if (EXRDecoder2.type == 1) {\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder2.getter = parseFloat16;\n            EXRDecoder2.inputSize = INT16_SIZE;\n            break;\n          case HalfFloatType:\n            EXRDecoder2.getter = parseUint16;\n            EXRDecoder2.inputSize = INT16_SIZE;\n            break;\n        }\n      } else if (EXRDecoder2.type == 2) {\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder2.getter = parseFloat32;\n            EXRDecoder2.inputSize = FLOAT32_SIZE;\n            break;\n          case HalfFloatType:\n            EXRDecoder2.getter = decodeFloat32;\n            EXRDecoder2.inputSize = FLOAT32_SIZE;\n        }\n      } else {\n        throw \"EXRLoader.parse: unsupported pixelType \" + EXRDecoder2.type + \" for \" + EXRHeader2.compression + \".\";\n      }\n      EXRDecoder2.blockCount = (EXRHeader2.dataWindow.yMax + 1) / EXRDecoder2.scanlineBlockSize;\n      for (var i = 0; i < EXRDecoder2.blockCount; i++)\n        parseInt64(dataView, offset2);\n      EXRDecoder2.outputChannels = EXRDecoder2.channels == 3 ? 4 : EXRDecoder2.channels;\n      const size = EXRDecoder2.width * EXRDecoder2.height * EXRDecoder2.outputChannels;\n      switch (outputType) {\n        case FloatType:\n          EXRDecoder2.byteArray = new Float32Array(size);\n          if (EXRDecoder2.channels < EXRDecoder2.outputChannels)\n            EXRDecoder2.byteArray.fill(1, 0, size);\n          break;\n        case HalfFloatType:\n          EXRDecoder2.byteArray = new Uint16Array(size);\n          if (EXRDecoder2.channels < EXRDecoder2.outputChannels)\n            EXRDecoder2.byteArray.fill(15360, 0, size);\n          break;\n        default:\n          console.error(\"THREE.EXRLoader: unsupported type: \", outputType);\n          break;\n      }\n      EXRDecoder2.bytesPerLine = EXRDecoder2.width * EXRDecoder2.inputSize * EXRDecoder2.channels;\n      if (EXRDecoder2.outputChannels == 4)\n        EXRDecoder2.format = RGBAFormat;\n      else\n        EXRDecoder2.format = RedFormat;\n      if (hasColorSpace)\n        EXRDecoder2.colorSpace = \"srgb-linear\";\n      else\n        EXRDecoder2.encoding = 3e3;\n      return EXRDecoder2;\n    }\n    const bufferDataView = new DataView(buffer);\n    const uInt8Array = new Uint8Array(buffer);\n    const offset = { value: 0 };\n    const EXRHeader = parseHeader(bufferDataView, buffer, offset);\n    const EXRDecoder = setupDecoder(EXRHeader, bufferDataView, uInt8Array, offset, this.type);\n    const tmpOffset = { value: 0 };\n    const channelOffsets = { R: 0, G: 1, B: 2, A: 3, Y: 0 };\n    for (let scanlineBlockIdx = 0; scanlineBlockIdx < EXRDecoder.height / EXRDecoder.scanlineBlockSize; scanlineBlockIdx++) {\n      const line = parseUint32(bufferDataView, offset);\n      EXRDecoder.size = parseUint32(bufferDataView, offset);\n      EXRDecoder.lines = line + EXRDecoder.scanlineBlockSize > EXRDecoder.height ? EXRDecoder.height - line : EXRDecoder.scanlineBlockSize;\n      const isCompressed = EXRDecoder.size < EXRDecoder.lines * EXRDecoder.bytesPerLine;\n      const viewer = isCompressed ? EXRDecoder.uncompress(EXRDecoder) : uncompressRAW(EXRDecoder);\n      offset.value += EXRDecoder.size;\n      for (let line_y = 0; line_y < EXRDecoder.scanlineBlockSize; line_y++) {\n        const true_y = line_y + scanlineBlockIdx * EXRDecoder.scanlineBlockSize;\n        if (true_y >= EXRDecoder.height)\n          break;\n        for (let channelID = 0; channelID < EXRDecoder.channels; channelID++) {\n          const cOff = channelOffsets[EXRHeader.channels[channelID].name];\n          for (let x = 0; x < EXRDecoder.width; x++) {\n            tmpOffset.value = (line_y * (EXRDecoder.channels * EXRDecoder.width) + channelID * EXRDecoder.width + x) * EXRDecoder.inputSize;\n            const outIndex = (EXRDecoder.height - 1 - true_y) * (EXRDecoder.width * EXRDecoder.outputChannels) + x * EXRDecoder.outputChannels + cOff;\n            EXRDecoder.byteArray[outIndex] = EXRDecoder.getter(viewer, tmpOffset);\n          }\n        }\n      }\n    }\n    return {\n      header: EXRHeader,\n      width: EXRDecoder.width,\n      height: EXRDecoder.height,\n      data: EXRDecoder.byteArray,\n      format: EXRDecoder.format,\n      [hasColorSpace ? \"colorSpace\" : \"encoding\"]: EXRDecoder[hasColorSpace ? \"colorSpace\" : \"encoding\"],\n      type: this.type\n    };\n  }\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      if (hasColorSpace)\n        texture.colorSpace = texData.colorSpace;\n      else\n        texture.encoding = texData.encoding;\n      texture.minFilter = LinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.flipY = false;\n      if (onLoad)\n        onLoad(texture, texData);\n    }\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n}\nexport {\n  EXRLoader\n};\n//# sourceMappingURL=EXRLoader.js.map\n","/**\n * @monogrid/gainmap-js v3.1.0\n * With ❤️, by MONOGRID <rnd@monogrid.com>\n */\n\nimport { RGBAFormat, LinearFilter, ClampToEdgeWrapping, Scene, OrthographicCamera, HalfFloatType, FloatType, Mesh, PlaneGeometry, WebGLRenderTarget, UVMapping, WebGLRenderer, DataTexture, LinearSRGBColorSpace, ShaderMaterial, Texture, IntType, ShortType, ByteType, UnsignedIntType, UnsignedByteType, MeshBasicMaterial } from 'three';\n\nconst getBufferForType = (type, width, height) => {\n    let out;\n    switch (type) {\n        case UnsignedByteType:\n            out = new Uint8ClampedArray(width * height * 4);\n            break;\n        case HalfFloatType:\n            out = new Uint16Array(width * height * 4);\n            break;\n        case UnsignedIntType:\n            out = new Uint32Array(width * height * 4);\n            break;\n        case ByteType:\n            out = new Int8Array(width * height * 4);\n            break;\n        case ShortType:\n            out = new Int16Array(width * height * 4);\n            break;\n        case IntType:\n            out = new Int32Array(width * height * 4);\n            break;\n        case FloatType:\n            out = new Float32Array(width * height * 4);\n            break;\n        default:\n            throw new Error('Unsupported data type');\n    }\n    return out;\n};\nlet _canReadPixelsResult;\n/**\n * Test if this browser implementation can correctly read pixels from the specified\n * Render target type.\n *\n * Runs only once\n *\n * @param type\n * @param renderer\n * @param camera\n * @param renderTargetOptions\n * @returns\n */\nconst canReadPixels = (type, renderer, camera, renderTargetOptions) => {\n    if (_canReadPixelsResult !== undefined)\n        return _canReadPixelsResult;\n    const testRT = new WebGLRenderTarget(1, 1, renderTargetOptions);\n    renderer.setRenderTarget(testRT);\n    const mesh = new Mesh(new PlaneGeometry(), new MeshBasicMaterial({ color: 0xffffff }));\n    renderer.render(mesh, camera);\n    renderer.setRenderTarget(null);\n    const out = getBufferForType(type, testRT.width, testRT.height);\n    renderer.readRenderTargetPixels(testRT, 0, 0, testRT.width, testRT.height, out);\n    testRT.dispose();\n    mesh.geometry.dispose();\n    mesh.material.dispose();\n    _canReadPixelsResult = out[0] !== 0;\n    return _canReadPixelsResult;\n};\n/**\n * Utility class used for rendering a texture with a material\n *\n * @category Core\n * @group Core\n */\nclass QuadRenderer {\n    /**\n     * Constructs a new QuadRenderer\n     *\n     * @param options Parameters for this QuadRenderer\n     */\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n        this._rendererIsDisposable = false;\n        this._supportsReadPixels = true;\n        /**\n         * Renders the input texture using the specified material\n         */\n        this.render = () => {\n            this._renderer.setRenderTarget(this._renderTarget);\n            try {\n                this._renderer.render(this._scene, this._camera);\n            }\n            catch (e) {\n                this._renderer.setRenderTarget(null);\n                throw e;\n            }\n            this._renderer.setRenderTarget(null);\n        };\n        this._width = options.width;\n        this._height = options.height;\n        this._type = options.type;\n        this._colorSpace = options.colorSpace;\n        const rtOptions = {\n            // fixed options\n            format: RGBAFormat,\n            depthBuffer: false,\n            stencilBuffer: false,\n            // user options\n            type: this._type, // set in class property\n            colorSpace: this._colorSpace, // set in class property\n            anisotropy: ((_a = options.renderTargetOptions) === null || _a === void 0 ? void 0 : _a.anisotropy) !== undefined ? (_b = options.renderTargetOptions) === null || _b === void 0 ? void 0 : _b.anisotropy : 1,\n            generateMipmaps: ((_c = options.renderTargetOptions) === null || _c === void 0 ? void 0 : _c.generateMipmaps) !== undefined ? (_d = options.renderTargetOptions) === null || _d === void 0 ? void 0 : _d.generateMipmaps : false,\n            magFilter: ((_e = options.renderTargetOptions) === null || _e === void 0 ? void 0 : _e.magFilter) !== undefined ? (_f = options.renderTargetOptions) === null || _f === void 0 ? void 0 : _f.magFilter : LinearFilter,\n            minFilter: ((_g = options.renderTargetOptions) === null || _g === void 0 ? void 0 : _g.minFilter) !== undefined ? (_h = options.renderTargetOptions) === null || _h === void 0 ? void 0 : _h.minFilter : LinearFilter,\n            samples: ((_j = options.renderTargetOptions) === null || _j === void 0 ? void 0 : _j.samples) !== undefined ? (_k = options.renderTargetOptions) === null || _k === void 0 ? void 0 : _k.samples : undefined,\n            wrapS: ((_l = options.renderTargetOptions) === null || _l === void 0 ? void 0 : _l.wrapS) !== undefined ? (_m = options.renderTargetOptions) === null || _m === void 0 ? void 0 : _m.wrapS : ClampToEdgeWrapping,\n            wrapT: ((_o = options.renderTargetOptions) === null || _o === void 0 ? void 0 : _o.wrapT) !== undefined ? (_p = options.renderTargetOptions) === null || _p === void 0 ? void 0 : _p.wrapT : ClampToEdgeWrapping\n        };\n        this._material = options.material;\n        if (options.renderer) {\n            this._renderer = options.renderer;\n        }\n        else {\n            this._renderer = QuadRenderer.instantiateRenderer();\n            this._rendererIsDisposable = true;\n        }\n        this._scene = new Scene();\n        this._camera = new OrthographicCamera();\n        this._camera.position.set(0, 0, 10);\n        this._camera.left = -0.5;\n        this._camera.right = 0.5;\n        this._camera.top = 0.5;\n        this._camera.bottom = -0.5;\n        this._camera.updateProjectionMatrix();\n        if (!canReadPixels(this._type, this._renderer, this._camera, rtOptions)) {\n            let alternativeType;\n            switch (this._type) {\n                case HalfFloatType:\n                    alternativeType = this._renderer.extensions.has('EXT_color_buffer_float') ? FloatType : undefined;\n                    break;\n            }\n            if (alternativeType !== undefined) {\n                console.warn(`This browser does not support reading pixels from ${this._type} RenderTargets, switching to ${FloatType}`);\n                this._type = alternativeType;\n            }\n            else {\n                this._supportsReadPixels = false;\n                console.warn('This browser dos not support toArray or toDataTexture, calls to those methods will result in an error thrown');\n            }\n        }\n        this._quad = new Mesh(new PlaneGeometry(), this._material);\n        this._quad.geometry.computeBoundingBox();\n        this._scene.add(this._quad);\n        this._renderTarget = new WebGLRenderTarget(this.width, this.height, rtOptions);\n        this._renderTarget.texture.mapping = ((_q = options.renderTargetOptions) === null || _q === void 0 ? void 0 : _q.mapping) !== undefined ? (_r = options.renderTargetOptions) === null || _r === void 0 ? void 0 : _r.mapping : UVMapping;\n    }\n    /**\n     * Instantiates a temporary renderer\n     *\n     * @returns\n     */\n    static instantiateRenderer() {\n        const renderer = new WebGLRenderer();\n        renderer.setSize(128, 128);\n        // renderer.outputColorSpace = SRGBColorSpace\n        // renderer.toneMapping = LinearToneMapping\n        // renderer.debug.checkShaderErrors = false\n        // this._rendererIsDisposable = true\n        return renderer;\n    }\n    /**\n     * Obtains a Buffer containing the rendered texture.\n     *\n     * @throws Error if the browser cannot read pixels from this RenderTarget type.\n     * @returns a TypedArray containing RGBA values from this renderer\n     */\n    toArray() {\n        if (!this._supportsReadPixels)\n            throw new Error('Can\\'t read pixels in this browser');\n        const out = getBufferForType(this._type, this._width, this._height);\n        this._renderer.readRenderTargetPixels(this._renderTarget, 0, 0, this._width, this._height, out);\n        return out;\n    }\n    /**\n     * Performs a readPixel operation in the renderTarget\n     * and returns a DataTexture containing the read data\n     *\n     * @param options options\n     * @returns\n     */\n    toDataTexture(options) {\n        const returnValue = new DataTexture(\n        // fixed values\n        this.toArray(), this.width, this.height, RGBAFormat, this._type, \n        // user values\n        (options === null || options === void 0 ? void 0 : options.mapping) || UVMapping, (options === null || options === void 0 ? void 0 : options.wrapS) || ClampToEdgeWrapping, (options === null || options === void 0 ? void 0 : options.wrapT) || ClampToEdgeWrapping, (options === null || options === void 0 ? void 0 : options.magFilter) || LinearFilter, (options === null || options === void 0 ? void 0 : options.minFilter) || LinearFilter, (options === null || options === void 0 ? void 0 : options.anisotropy) || 1, \n        // fixed value\n        LinearSRGBColorSpace);\n        // set this afterwards, we can't set it in constructor\n        returnValue.generateMipmaps = (options === null || options === void 0 ? void 0 : options.generateMipmaps) !== undefined ? options === null || options === void 0 ? void 0 : options.generateMipmaps : false;\n        return returnValue;\n    }\n    /**\n     * If using a disposable renderer, it will dispose it.\n     */\n    disposeOnDemandRenderer() {\n        this._renderer.setRenderTarget(null);\n        if (this._rendererIsDisposable) {\n            this._renderer.dispose();\n            this._renderer.forceContextLoss();\n        }\n    }\n    /**\n     * Will dispose of **all** assets used by this renderer.\n     *\n     *\n     * @param disposeRenderTarget will dispose of the renderTarget which will not be usable later\n     * set this to true if you passed the `renderTarget.texture` to a `PMREMGenerator`\n     * or are otherwise done with it.\n     *\n     * @example\n     * ```js\n     * const loader = new HDRJPGLoader(renderer)\n     * const result = await loader.loadAsync('gainmap.jpeg')\n     * const mesh = new Mesh(geometry, new MeshBasicMaterial({ map: result.renderTarget.texture }) )\n     * // DO NOT dispose the renderTarget here,\n     * // it is used directly in the material\n     * result.dispose()\n     * ```\n     *\n     * @example\n     * ```js\n     * const loader = new HDRJPGLoader(renderer)\n     * const pmremGenerator = new PMREMGenerator( renderer );\n     * const result = await loader.loadAsync('gainmap.jpeg')\n     * const envMap = pmremGenerator.fromEquirectangular(result.renderTarget.texture)\n     * const mesh = new Mesh(geometry, new MeshStandardMaterial({ envMap }) )\n     * // renderTarget can be disposed here\n     * // because it was used to generate a PMREM texture\n     * result.dispose(true)\n     * ```\n     */\n    dispose(disposeRenderTarget) {\n        this.disposeOnDemandRenderer();\n        if (disposeRenderTarget) {\n            this.renderTarget.dispose();\n        }\n        // dispose shader material texture uniforms\n        if (this.material instanceof ShaderMaterial) {\n            Object.values(this.material.uniforms).forEach(v => {\n                if (v.value instanceof Texture)\n                    v.value.dispose();\n            });\n        }\n        // dispose other material properties\n        Object.values(this.material).forEach(value => {\n            if (value instanceof Texture)\n                value.dispose();\n        });\n        this.material.dispose();\n        this._quad.geometry.dispose();\n    }\n    /**\n     * Width of the texture\n     */\n    get width() { return this._width; }\n    set width(value) {\n        this._width = value;\n        this._renderTarget.setSize(this._width, this._height);\n    }\n    /**\n     * Height of the texture\n     */\n    get height() { return this._height; }\n    set height(value) {\n        this._height = value;\n        this._renderTarget.setSize(this._width, this._height);\n    }\n    /**\n     * The renderer used\n     */\n    get renderer() { return this._renderer; }\n    /**\n     * The `WebGLRenderTarget` used.\n     */\n    get renderTarget() { return this._renderTarget; }\n    set renderTarget(value) {\n        this._renderTarget = value;\n        this._width = value.width;\n        this._height = value.height;\n        // this._type = value.texture.type\n    }\n    /**\n     * The `Material` used.\n     */\n    get material() { return this._material; }\n    /**\n     *\n     */\n    get type() { return this._type; }\n    get colorSpace() { return this._colorSpace; }\n}\n\nexport { QuadRenderer as Q };\n","/**\n * @monogrid/gainmap-js v3.1.0\n * With ❤️, by MONOGRID <rnd@monogrid.com>\n */\n\nimport { Q as QuadRenderer } from './QuadRenderer-DuOPRGA4.js';\nimport { ShaderMaterial, Vector3, NoBlending, SRGBColorSpace, LinearSRGBColorSpace, HalfFloatType, Loader, LoadingManager, Texture, UVMapping, ClampToEdgeWrapping, LinearFilter, LinearMipMapLinearFilter, RGBAFormat, UnsignedByteType, FileLoader } from 'three';\n\nconst vertexShader = /* glsl */ `\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n`;\nconst fragmentShader = /* glsl */ `\n// min half float value\n#define HALF_FLOAT_MIN vec3( -65504, -65504, -65504 )\n// max half float value\n#define HALF_FLOAT_MAX vec3( 65504, 65504, 65504 )\n\nuniform sampler2D sdr;\nuniform sampler2D gainMap;\nuniform vec3 gamma;\nuniform vec3 offsetHdr;\nuniform vec3 offsetSdr;\nuniform vec3 gainMapMin;\nuniform vec3 gainMapMax;\nuniform float weightFactor;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec3 rgb = texture2D( sdr, vUv ).rgb;\n  vec3 recovery = texture2D( gainMap, vUv ).rgb;\n  vec3 logRecovery = pow( recovery, gamma );\n  vec3 logBoost = gainMapMin * ( 1.0 - logRecovery ) + gainMapMax * logRecovery;\n  vec3 hdrColor = (rgb + offsetSdr) * exp2( logBoost * weightFactor ) - offsetHdr;\n  vec3 clampedHdrColor = max( HALF_FLOAT_MIN, min( HALF_FLOAT_MAX, hdrColor ));\n  gl_FragColor = vec4( clampedHdrColor , 1.0 );\n}\n`;\n/**\n * A Material which is able to decode the Gainmap into a full HDR Representation\n *\n * @category Materials\n * @group Materials\n */\nclass GainMapDecoderMaterial extends ShaderMaterial {\n    /**\n     *\n     * @param params\n     */\n    constructor({ gamma, offsetHdr, offsetSdr, gainMapMin, gainMapMax, maxDisplayBoost, hdrCapacityMin, hdrCapacityMax, sdr, gainMap }) {\n        super({\n            name: 'GainMapDecoderMaterial',\n            vertexShader,\n            fragmentShader,\n            uniforms: {\n                sdr: { value: sdr },\n                gainMap: { value: gainMap },\n                gamma: { value: new Vector3(1.0 / gamma[0], 1.0 / gamma[1], 1.0 / gamma[2]) },\n                offsetHdr: { value: new Vector3().fromArray(offsetHdr) },\n                offsetSdr: { value: new Vector3().fromArray(offsetSdr) },\n                gainMapMin: { value: new Vector3().fromArray(gainMapMin) },\n                gainMapMax: { value: new Vector3().fromArray(gainMapMax) },\n                weightFactor: {\n                    value: (Math.log2(maxDisplayBoost) - hdrCapacityMin) / (hdrCapacityMax - hdrCapacityMin)\n                }\n            },\n            blending: NoBlending,\n            depthTest: false,\n            depthWrite: false\n        });\n        this._maxDisplayBoost = maxDisplayBoost;\n        this._hdrCapacityMin = hdrCapacityMin;\n        this._hdrCapacityMax = hdrCapacityMax;\n        this.needsUpdate = true;\n        this.uniformsNeedUpdate = true;\n    }\n    get sdr() { return this.uniforms.sdr.value; }\n    set sdr(value) { this.uniforms.sdr.value = value; }\n    get gainMap() { return this.uniforms.gainMap.value; }\n    set gainMap(value) { this.uniforms.gainMap.value = value; }\n    /**\n     * @see {@link GainMapMetadata.offsetHdr}\n     */\n    get offsetHdr() { return this.uniforms.offsetHdr.value.toArray(); }\n    set offsetHdr(value) { this.uniforms.offsetHdr.value.fromArray(value); }\n    /**\n     * @see {@link GainMapMetadata.offsetSdr}\n     */\n    get offsetSdr() { return this.uniforms.offsetSdr.value.toArray(); }\n    set offsetSdr(value) { this.uniforms.offsetSdr.value.fromArray(value); }\n    /**\n     * @see {@link GainMapMetadata.gainMapMin}\n     */\n    get gainMapMin() { return this.uniforms.gainMapMin.value.toArray(); }\n    set gainMapMin(value) { this.uniforms.gainMapMin.value.fromArray(value); }\n    /**\n     * @see {@link GainMapMetadata.gainMapMax}\n     */\n    get gainMapMax() { return this.uniforms.gainMapMax.value.toArray(); }\n    set gainMapMax(value) { this.uniforms.gainMapMax.value.fromArray(value); }\n    /**\n     * @see {@link GainMapMetadata.gamma}\n     */\n    get gamma() {\n        const g = this.uniforms.gamma.value;\n        return [1 / g.x, 1 / g.y, 1 / g.z];\n    }\n    set gamma(value) {\n        const g = this.uniforms.gamma.value;\n        g.x = 1.0 / value[0];\n        g.y = 1.0 / value[1];\n        g.z = 1.0 / value[2];\n    }\n    /**\n     * @see {@link GainMapMetadata.hdrCapacityMin}\n     * @remarks Logarithmic space\n     */\n    get hdrCapacityMin() { return this._hdrCapacityMin; }\n    set hdrCapacityMin(value) {\n        this._hdrCapacityMin = value;\n        this.calculateWeight();\n    }\n    /**\n     * @see {@link GainMapMetadata.hdrCapacityMin}\n     * @remarks Logarithmic space\n     */\n    get hdrCapacityMax() { return this._hdrCapacityMax; }\n    set hdrCapacityMax(value) {\n        this._hdrCapacityMax = value;\n        this.calculateWeight();\n    }\n    /**\n     * @see {@link GainmapDecodingParameters.maxDisplayBoost}\n     * @remarks Non Logarithmic space\n     */\n    get maxDisplayBoost() { return this._maxDisplayBoost; }\n    set maxDisplayBoost(value) {\n        this._maxDisplayBoost = Math.max(1, Math.min(65504, value));\n        this.calculateWeight();\n    }\n    calculateWeight() {\n        const val = (Math.log2(this._maxDisplayBoost) - this._hdrCapacityMin) / (this._hdrCapacityMax - this._hdrCapacityMin);\n        this.uniforms.weightFactor.value = Math.max(0, Math.min(1, val));\n    }\n}\n\n/**\n * Decodes a gain map using a WebGLRenderTarget\n *\n * @category Decoding Functions\n * @group Decoding Functions\n * @example\n * import { decode } from '@monogrid/gainmap-js'\n * import {\n *   Mesh,\n *   MeshBasicMaterial,\n *   PerspectiveCamera,\n *   PlaneGeometry,\n *   Scene,\n *   TextureLoader,\n *   WebGLRenderer\n * } from 'three'\n *\n * const renderer = new WebGLRenderer()\n *\n * const textureLoader = new TextureLoader()\n *\n * // load SDR Representation\n * const sdr = await textureLoader.loadAsync('sdr.jpg')\n * // load Gain map recovery image\n * const gainMap = await textureLoader.loadAsync('gainmap.jpg')\n * // load metadata\n * const metadata = await (await fetch('metadata.json')).json()\n *\n * const result = await decode({\n *   sdr,\n *   gainMap,\n *   // this allows to use `result.renderTarget.texture` directly\n *   renderer,\n *   // this will restore the full HDR range\n *   maxDisplayBoost: Math.pow(2, metadata.hdrCapacityMax),\n *   ...metadata\n * })\n *\n * const scene = new Scene()\n * // `result` can be used to populate a Texture\n * const mesh = new Mesh(\n *   new PlaneGeometry(),\n *   new MeshBasicMaterial({ map: result.renderTarget.texture })\n * )\n * scene.add(mesh)\n * renderer.render(scene, new PerspectiveCamera())\n *\n * // result must be manually disposed\n * // when you are done using it\n * result.dispose()\n *\n * @param params\n * @returns\n * @throws {Error} if the WebGLRenderer fails to render the gain map\n */\nconst decode = (params) => {\n    const { sdr, gainMap, renderer } = params;\n    if (sdr.colorSpace !== SRGBColorSpace) {\n        console.warn('SDR Colorspace needs to be *SRGBColorSpace*, setting it automatically');\n        sdr.colorSpace = SRGBColorSpace;\n    }\n    sdr.needsUpdate = true;\n    if (gainMap.colorSpace !== LinearSRGBColorSpace) {\n        console.warn('Gainmap Colorspace needs to be *LinearSRGBColorSpace*, setting it automatically');\n        gainMap.colorSpace = LinearSRGBColorSpace;\n    }\n    gainMap.needsUpdate = true;\n    const material = new GainMapDecoderMaterial({\n        ...params,\n        sdr,\n        gainMap\n    });\n    const quadRenderer = new QuadRenderer({\n        // TODO: three types are generic, eslint complains here, see how we can solve\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        width: sdr.image.width,\n        // TODO: three types are generic, eslint complains here, see how we can solve\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        height: sdr.image.height,\n        type: HalfFloatType,\n        colorSpace: LinearSRGBColorSpace,\n        material,\n        renderer,\n        renderTargetOptions: params.renderTargetOptions\n    });\n    try {\n        quadRenderer.render();\n    }\n    catch (e) {\n        quadRenderer.disposeOnDemandRenderer();\n        throw e;\n    }\n    return quadRenderer;\n};\n\nclass GainMapNotFoundError extends Error {\n}\n\nclass XMPMetadataNotFoundError extends Error {\n}\n\nconst getXMLValue = (xml, tag, defaultValue) => {\n    // Check for attribute format first: tag=\"value\"\n    const attributeMatch = new RegExp(`${tag}=\"([^\"]*)\"`, 'i').exec(xml);\n    if (attributeMatch)\n        return attributeMatch[1];\n    // Check for tag format: <tag>value</tag> or <tag><rdf:li>value</rdf:li>...</tag>\n    const tagMatch = new RegExp(`<${tag}[^>]*>([\\\\s\\\\S]*?)</${tag}>`, 'i').exec(xml);\n    if (tagMatch) {\n        // Check if it contains rdf:li elements\n        const liValues = tagMatch[1].match(/<rdf:li>([^<]*)<\\/rdf:li>/g);\n        if (liValues && liValues.length === 3) {\n            return liValues.map(v => v.replace(/<\\/?rdf:li>/g, ''));\n        }\n        return tagMatch[1].trim();\n    }\n    if (defaultValue !== undefined)\n        return defaultValue;\n    throw new Error(`Can't find ${tag} in gainmap metadata`);\n};\nconst extractXMP = (input) => {\n    let str;\n    // support node test environment\n    if (typeof TextDecoder !== 'undefined')\n        str = new TextDecoder().decode(input);\n    else\n        str = input.toString();\n    let start = str.indexOf('<x:xmpmeta');\n    while (start !== -1) {\n        const end = str.indexOf('x:xmpmeta>', start);\n        const xmpBlock = str.slice(start, end + 10);\n        try {\n            const gainMapMin = getXMLValue(xmpBlock, 'hdrgm:GainMapMin', '0');\n            const gainMapMax = getXMLValue(xmpBlock, 'hdrgm:GainMapMax');\n            const gamma = getXMLValue(xmpBlock, 'hdrgm:Gamma', '1');\n            const offsetSDR = getXMLValue(xmpBlock, 'hdrgm:OffsetSDR', '0.015625');\n            const offsetHDR = getXMLValue(xmpBlock, 'hdrgm:OffsetHDR', '0.015625');\n            // These are always attributes, so we can use a simpler regex\n            const hdrCapacityMinMatch = /hdrgm:HDRCapacityMin=\"([^\"]*)\"/.exec(xmpBlock);\n            const hdrCapacityMin = hdrCapacityMinMatch ? hdrCapacityMinMatch[1] : '0';\n            const hdrCapacityMaxMatch = /hdrgm:HDRCapacityMax=\"([^\"]*)\"/.exec(xmpBlock);\n            if (!hdrCapacityMaxMatch)\n                throw new Error('Incomplete gainmap metadata');\n            const hdrCapacityMax = hdrCapacityMaxMatch[1];\n            return {\n                gainMapMin: Array.isArray(gainMapMin) ? gainMapMin.map(v => parseFloat(v)) : [parseFloat(gainMapMin), parseFloat(gainMapMin), parseFloat(gainMapMin)],\n                gainMapMax: Array.isArray(gainMapMax) ? gainMapMax.map(v => parseFloat(v)) : [parseFloat(gainMapMax), parseFloat(gainMapMax), parseFloat(gainMapMax)],\n                gamma: Array.isArray(gamma) ? gamma.map(v => parseFloat(v)) : [parseFloat(gamma), parseFloat(gamma), parseFloat(gamma)],\n                offsetSdr: Array.isArray(offsetSDR) ? offsetSDR.map(v => parseFloat(v)) : [parseFloat(offsetSDR), parseFloat(offsetSDR), parseFloat(offsetSDR)],\n                offsetHdr: Array.isArray(offsetHDR) ? offsetHDR.map(v => parseFloat(v)) : [parseFloat(offsetHDR), parseFloat(offsetHDR), parseFloat(offsetHDR)],\n                hdrCapacityMin: parseFloat(hdrCapacityMin),\n                hdrCapacityMax: parseFloat(hdrCapacityMax)\n            };\n        }\n        catch (e) {\n            // Continue searching for another xmpmeta block if this one fails\n        }\n        start = str.indexOf('<x:xmpmeta', end);\n    }\n};\n\n/**\n * MPF Extractor (Multi Picture Format Extractor)\n * By Henrik S Nilsson 2019\n *\n * Extracts images stored in images based on the MPF format (found here: https://www.cipa.jp/e/std/std-sec.html\n * under \"CIPA DC-007-Translation-2021 Multi-Picture Format\"\n *\n * Overly commented, and without intention of being complete or production ready.\n * Created to extract depth maps from iPhone images, and to learn about image metadata.\n * Kudos to: Phil Harvey (exiftool), Jaume Sanchez (android-lens-blur-depth-extractor)\n */\nclass MPFExtractor {\n    constructor(options) {\n        this.options = {\n            debug: options && options.debug !== undefined ? options.debug : false,\n            extractFII: options && options.extractFII !== undefined ? options.extractFII : true,\n            extractNonFII: options && options.extractNonFII !== undefined ? options.extractNonFII : true\n        };\n    }\n    extract(imageArrayBuffer) {\n        return new Promise((resolve, reject) => {\n            const debug = this.options.debug;\n            const dataView = new DataView(imageArrayBuffer.buffer);\n            // If you're executing this line on a big endian machine, it'll be reversed.\n            // bigEnd further down though, refers to the endianness of the image itself.\n            if (dataView.getUint16(0) !== 0xffd8) {\n                reject(new Error('Not a valid jpeg'));\n                return;\n            }\n            const length = dataView.byteLength;\n            let offset = 2;\n            let loops = 0;\n            let marker; // APP# marker\n            while (offset < length) {\n                if (++loops > 250) {\n                    reject(new Error(`Found no marker after ${loops} loops 😵`));\n                    return;\n                }\n                if (dataView.getUint8(offset) !== 0xff) {\n                    reject(new Error(`Not a valid marker at offset 0x${offset.toString(16)}, found: 0x${dataView.getUint8(offset).toString(16)}`));\n                    return;\n                }\n                marker = dataView.getUint8(offset + 1);\n                if (debug)\n                    console.log(`Marker: ${marker.toString(16)}`);\n                if (marker === 0xe2) {\n                    if (debug)\n                        console.log('Found APP2 marker (0xffe2)');\n                    // Works for iPhone 8 Plus, X, and XSMax. Or any photos of MPF format.\n                    // Great way to visualize image information in html is using Exiftool. E.g.:\n                    // ./exiftool.exe -htmldump -wantTrailer photo.jpg > photo.html\n                    const formatPt = offset + 4;\n                    /*\n                     *  Structure of the MP Format Identifier\n                     *\n                     *  Offset Addr.  | Code (Hex)  | Description\n                     *  +00             ff            Marker Prefix      <-- offset\n                     *  +01             e2            APP2\n                     *  +02             #n            APP2 Field Length\n                     *  +03             #n            APP2 Field Length\n                     *  +04             4d            'M'                <-- formatPt\n                     *  +05             50            'P'\n                     *  +06             46            'F'\n                     *  +07             00            NULL\n                     *                                                   <-- tiffOffset\n                     */\n                    if (dataView.getUint32(formatPt) === 0x4d504600) {\n                        // Found MPF tag, so we start dig out sub images\n                        const tiffOffset = formatPt + 4;\n                        let bigEnd; // Endianness from TIFF header\n                        // Test for TIFF validity and endianness\n                        // 0x4949 and 0x4D4D ('II' and 'MM') marks Little Endian and Big Endian\n                        if (dataView.getUint16(tiffOffset) === 0x4949) {\n                            bigEnd = false;\n                        }\n                        else if (dataView.getUint16(tiffOffset) === 0x4d4d) {\n                            bigEnd = true;\n                        }\n                        else {\n                            reject(new Error('No valid endianness marker found in TIFF header'));\n                            return;\n                        }\n                        if (dataView.getUint16(tiffOffset + 2, !bigEnd) !== 0x002a) {\n                            reject(new Error('Not valid TIFF data! (no 0x002A marker)'));\n                            return;\n                        }\n                        // 32 bit number stating the offset from the start of the 8 Byte MP Header\n                        // to MP Index IFD Least possible value is thus 8 (means 0 offset)\n                        const firstIFDOffset = dataView.getUint32(tiffOffset + 4, !bigEnd);\n                        if (firstIFDOffset < 0x00000008) {\n                            reject(new Error('Not valid TIFF data! (First offset less than 8)'));\n                            return;\n                        }\n                        // Move ahead to MP Index IFD\n                        // Assume we're at the first IFD, so firstIFDOffset points to\n                        // MP Index IFD and not MP Attributes IFD. (If we try extract from a sub image,\n                        // we fail silently here due to this assumption)\n                        // Count (2 Byte) | MP Index Fields a.k.a. MP Entries (count * 12 Byte) | Offset of Next IFD (4 Byte)\n                        const dirStart = tiffOffset + firstIFDOffset; // Start of IFD (Image File Directory)\n                        const count = dataView.getUint16(dirStart, !bigEnd); // Count of MPEntries (2 Byte)\n                        // Extract info from MPEntries (starting after Count)\n                        const entriesStart = dirStart + 2;\n                        let numberOfImages = 0;\n                        for (let i = entriesStart; i < entriesStart + 12 * count; i += 12) {\n                            // Each entry is 12 Bytes long\n                            // Check MP Index IFD tags, here we only take tag 0xb001 = Number of images\n                            if (dataView.getUint16(i, !bigEnd) === 0xb001) {\n                                // stored in Last 4 bytes of its 12 Byte entry.\n                                numberOfImages = dataView.getUint32(i + 8, !bigEnd);\n                            }\n                        }\n                        const nextIFDOffsetLen = 4; // 4 Byte offset field that appears after MP Index IFD tags\n                        const MPImageListValPt = dirStart + 2 + count * 12 + nextIFDOffsetLen;\n                        const images = [];\n                        for (let i = MPImageListValPt; i < MPImageListValPt + numberOfImages * 16; i += 16) {\n                            const image = {\n                                MPType: dataView.getUint32(i, !bigEnd),\n                                size: dataView.getUint32(i + 4, !bigEnd),\n                                // This offset is specified relative to the address of the MP Endian\n                                // field in the MP Header, unless the image is a First Individual Image,\n                                // in which case the value of the offset shall be NULL (0x00000000).\n                                dataOffset: dataView.getUint32(i + 8, !bigEnd),\n                                dependantImages: dataView.getUint32(i + 12, !bigEnd),\n                                start: -1,\n                                end: -1,\n                                isFII: false\n                            };\n                            if (!image.dataOffset) {\n                                // dataOffset is 0x00000000 for First Individual Image\n                                image.start = 0;\n                                image.isFII = true;\n                            }\n                            else {\n                                image.start = tiffOffset + image.dataOffset;\n                                image.isFII = false;\n                            }\n                            image.end = image.start + image.size;\n                            images.push(image);\n                        }\n                        if (this.options.extractNonFII && images.length) {\n                            const bufferBlob = new Blob([dataView]);\n                            const imgs = [];\n                            for (const image of images) {\n                                if (image.isFII && !this.options.extractFII) {\n                                    continue; // Skip FII\n                                }\n                                const imageBlob = bufferBlob.slice(image.start, image.end + 1, 'image/jpeg');\n                                // we don't need this\n                                // const imageUrl = URL.createObjectURL(imageBlob)\n                                // image.img = document.createElement('img')\n                                // image.img.src = imageUrl\n                                imgs.push(imageBlob);\n                            }\n                            resolve(imgs);\n                        }\n                    }\n                }\n                offset += 2 + dataView.getUint16(offset + 2);\n            }\n        });\n    }\n}\n\n/**\n * Extracts XMP Metadata and the gain map recovery image\n * from a single JPEG file.\n *\n * @category Decoding Functions\n * @group Decoding Functions\n * @param jpegFile an `Uint8Array` containing and encoded JPEG file\n * @returns an sdr `Uint8Array` compressed in JPEG, a gainMap `Uint8Array` compressed in JPEG and the XMP parsed XMP metadata\n * @throws Error if XMP Metadata is not found\n * @throws Error if Gain map image is not found\n * @example\n * import { FileLoader } from 'three'\n * import { extractGainmapFromJPEG } from '@monogrid/gainmap-js'\n *\n * const jpegFile = await new FileLoader()\n *  .setResponseType('arraybuffer')\n *  .loadAsync('image.jpg')\n *\n * const { sdr, gainMap, metadata } = extractGainmapFromJPEG(jpegFile)\n */\nconst extractGainmapFromJPEG = async (jpegFile) => {\n    const metadata = extractXMP(jpegFile);\n    if (!metadata)\n        throw new XMPMetadataNotFoundError('Gain map XMP metadata not found');\n    const mpfExtractor = new MPFExtractor({ extractFII: true, extractNonFII: true });\n    const images = await mpfExtractor.extract(jpegFile);\n    if (images.length !== 2)\n        throw new GainMapNotFoundError('Gain map recovery image not found');\n    return {\n        sdr: new Uint8Array(await images[0].arrayBuffer()),\n        gainMap: new Uint8Array(await images[1].arrayBuffer()),\n        metadata\n    };\n};\n\n/**\n * private function, async get image from blob\n *\n * @param blob\n * @returns\n */\nconst getHTMLImageFromBlob = (blob) => {\n    return new Promise((resolve, reject) => {\n        const img = document.createElement('img');\n        img.onload = () => { resolve(img); };\n        img.onerror = (e) => { reject(e); };\n        img.src = URL.createObjectURL(blob);\n    });\n};\n\nclass LoaderBase extends Loader {\n    /**\n     *\n     * @param renderer\n     * @param manager\n     */\n    constructor(renderer, manager) {\n        super(manager);\n        if (renderer)\n            this._renderer = renderer;\n        this._internalLoadingManager = new LoadingManager();\n    }\n    /**\n     * Specify the renderer to use when rendering the gain map\n     *\n     * @param renderer\n     * @returns\n     */\n    setRenderer(renderer) {\n        this._renderer = renderer;\n        return this;\n    }\n    /**\n     * Specify the renderTarget options to use when rendering the gain map\n     *\n     * @param options\n     * @returns\n     */\n    setRenderTargetOptions(options) {\n        this._renderTargetOptions = options;\n        return this;\n    }\n    /**\n     * @private\n     * @returns\n     */\n    prepareQuadRenderer() {\n        if (!this._renderer)\n            console.warn('WARNING: An existing WebGL Renderer was not passed to this Loader constructor or in setRenderer, the result of this Loader will need to be converted to a Data Texture with toDataTexture() before you can use it in your renderer.');\n        // temporary values\n        const material = new GainMapDecoderMaterial({\n            gainMapMax: [1, 1, 1],\n            gainMapMin: [0, 0, 0],\n            gamma: [1, 1, 1],\n            offsetHdr: [1, 1, 1],\n            offsetSdr: [1, 1, 1],\n            hdrCapacityMax: 1,\n            hdrCapacityMin: 0,\n            maxDisplayBoost: 1,\n            gainMap: new Texture(),\n            sdr: new Texture()\n        });\n        return new QuadRenderer({\n            width: 16,\n            height: 16,\n            type: HalfFloatType,\n            colorSpace: LinearSRGBColorSpace,\n            material,\n            renderer: this._renderer,\n            renderTargetOptions: this._renderTargetOptions\n        });\n    }\n    /**\n   * @private\n   * @param quadRenderer\n   * @param metadata\n   * @param sdrBuffer\n   * @param gainMapBuffer\n   */\n    async render(quadRenderer, metadata, sdrBuffer, gainMapBuffer) {\n        // this is optional, will render a black gain-map if not present\n        const gainMapBlob = gainMapBuffer ? new Blob([gainMapBuffer], { type: 'image/jpeg' }) : undefined;\n        const sdrBlob = new Blob([sdrBuffer], { type: 'image/jpeg' });\n        let sdrImage;\n        let gainMapImage;\n        let needsFlip = false;\n        if (typeof createImageBitmap === 'undefined') {\n            const res = await Promise.all([\n                gainMapBlob ? getHTMLImageFromBlob(gainMapBlob) : Promise.resolve(undefined),\n                getHTMLImageFromBlob(sdrBlob)\n            ]);\n            gainMapImage = res[0];\n            sdrImage = res[1];\n            needsFlip = true;\n        }\n        else {\n            const res = await Promise.all([\n                gainMapBlob ? createImageBitmap(gainMapBlob, { imageOrientation: 'flipY' }) : Promise.resolve(undefined),\n                createImageBitmap(sdrBlob, { imageOrientation: 'flipY' })\n            ]);\n            gainMapImage = res[0];\n            sdrImage = res[1];\n        }\n        const gainMap = new Texture(gainMapImage || new ImageData(2, 2), UVMapping, ClampToEdgeWrapping, ClampToEdgeWrapping, LinearFilter, LinearMipMapLinearFilter, RGBAFormat, UnsignedByteType, 1, LinearSRGBColorSpace);\n        gainMap.flipY = needsFlip;\n        gainMap.needsUpdate = true;\n        const sdr = new Texture(sdrImage, UVMapping, ClampToEdgeWrapping, ClampToEdgeWrapping, LinearFilter, LinearMipMapLinearFilter, RGBAFormat, UnsignedByteType, 1, SRGBColorSpace);\n        sdr.flipY = needsFlip;\n        sdr.needsUpdate = true;\n        quadRenderer.width = sdrImage.width;\n        quadRenderer.height = sdrImage.height;\n        quadRenderer.material.gainMap = gainMap;\n        quadRenderer.material.sdr = sdr;\n        quadRenderer.material.gainMapMin = metadata.gainMapMin;\n        quadRenderer.material.gainMapMax = metadata.gainMapMax;\n        quadRenderer.material.offsetHdr = metadata.offsetHdr;\n        quadRenderer.material.offsetSdr = metadata.offsetSdr;\n        quadRenderer.material.gamma = metadata.gamma;\n        quadRenderer.material.hdrCapacityMin = metadata.hdrCapacityMin;\n        quadRenderer.material.hdrCapacityMax = metadata.hdrCapacityMax;\n        quadRenderer.material.maxDisplayBoost = Math.pow(2, metadata.hdrCapacityMax);\n        quadRenderer.material.needsUpdate = true;\n        quadRenderer.render();\n    }\n}\n\n/**\n * A Three.js Loader for the gain map format.\n *\n * @category Loaders\n * @group Loaders\n *\n * @example\n * import { GainMapLoader } from '@monogrid/gainmap-js'\n * import {\n *   EquirectangularReflectionMapping,\n *   LinearFilter,\n *   Mesh,\n *   MeshBasicMaterial,\n *   PerspectiveCamera,\n *   PlaneGeometry,\n *   Scene,\n *   WebGLRenderer\n * } from 'three'\n *\n * const renderer = new WebGLRenderer()\n *\n * const loader = new GainMapLoader(renderer)\n *\n * const result = await loader.loadAsync(['sdr.jpeg', 'gainmap.jpeg', 'metadata.json'])\n * // `result` can be used to populate a Texture\n *\n * const scene = new Scene()\n * const mesh = new Mesh(\n *   new PlaneGeometry(),\n *   new MeshBasicMaterial({ map: result.renderTarget.texture })\n * )\n * scene.add(mesh)\n * renderer.render(scene, new PerspectiveCamera())\n *\n * // Starting from three.js r159\n * // `result.renderTarget.texture` can\n * // also be used as Equirectangular scene background\n * //\n * // it was previously needed to convert it\n * // to a DataTexture with `result.toDataTexture()`\n * scene.background = result.renderTarget.texture\n * scene.background.mapping = EquirectangularReflectionMapping\n *\n * // result must be manually disposed\n * // when you are done using it\n * result.dispose()\n *\n */\nclass GainMapLoader extends LoaderBase {\n    /**\n     * Loads a gainmap using separate data\n     * * sdr image\n     * * gain map image\n     * * metadata json\n     *\n     * useful for webp gain maps\n     *\n     * @param urls An array in the form of [sdr.jpg, gainmap.jpg, metadata.json]\n     * @param onLoad Load complete callback, will receive the result\n     * @param onProgress Progress callback, will receive a {@link ProgressEvent}\n     * @param onError Error callback\n     * @returns\n     */\n    load([sdrUrl, gainMapUrl, metadataUrl], onLoad, onProgress, onError) {\n        const quadRenderer = this.prepareQuadRenderer();\n        let sdr;\n        let gainMap;\n        let metadata;\n        const loadCheck = async () => {\n            if (sdr && gainMap && metadata) {\n                // solves #16\n                try {\n                    await this.render(quadRenderer, metadata, sdr, gainMap);\n                }\n                catch (error) {\n                    this.manager.itemError(sdrUrl);\n                    this.manager.itemError(gainMapUrl);\n                    this.manager.itemError(metadataUrl);\n                    if (typeof onError === 'function')\n                        onError(error);\n                    quadRenderer.disposeOnDemandRenderer();\n                    return;\n                }\n                if (typeof onLoad === 'function')\n                    onLoad(quadRenderer);\n                this.manager.itemEnd(sdrUrl);\n                this.manager.itemEnd(gainMapUrl);\n                this.manager.itemEnd(metadataUrl);\n                quadRenderer.disposeOnDemandRenderer();\n            }\n        };\n        let sdrLengthComputable = true;\n        let sdrTotal = 0;\n        let sdrLoaded = 0;\n        let gainMapLengthComputable = true;\n        let gainMapTotal = 0;\n        let gainMapLoaded = 0;\n        let metadataLengthComputable = true;\n        let metadataTotal = 0;\n        let metadataLoaded = 0;\n        const progressHandler = () => {\n            if (typeof onProgress === 'function') {\n                const total = sdrTotal + gainMapTotal + metadataTotal;\n                const loaded = sdrLoaded + gainMapLoaded + metadataLoaded;\n                const lengthComputable = sdrLengthComputable && gainMapLengthComputable && metadataLengthComputable;\n                onProgress(new ProgressEvent('progress', { lengthComputable, loaded, total }));\n            }\n        };\n        this.manager.itemStart(sdrUrl);\n        this.manager.itemStart(gainMapUrl);\n        this.manager.itemStart(metadataUrl);\n        const sdrLoader = new FileLoader(this._internalLoadingManager);\n        sdrLoader.setResponseType('arraybuffer');\n        sdrLoader.setRequestHeader(this.requestHeader);\n        sdrLoader.setPath(this.path);\n        sdrLoader.setWithCredentials(this.withCredentials);\n        sdrLoader.load(sdrUrl, async (buffer) => {\n            /* istanbul ignore if\n             this condition exists only because of three.js types + strict mode\n            */\n            if (typeof buffer === 'string')\n                throw new Error('Invalid sdr buffer');\n            sdr = buffer;\n            await loadCheck();\n        }, (e) => {\n            sdrLengthComputable = e.lengthComputable;\n            sdrLoaded = e.loaded;\n            sdrTotal = e.total;\n            progressHandler();\n        }, (error) => {\n            this.manager.itemError(sdrUrl);\n            if (typeof onError === 'function')\n                onError(error);\n        });\n        const gainMapLoader = new FileLoader(this._internalLoadingManager);\n        gainMapLoader.setResponseType('arraybuffer');\n        gainMapLoader.setRequestHeader(this.requestHeader);\n        gainMapLoader.setPath(this.path);\n        gainMapLoader.setWithCredentials(this.withCredentials);\n        gainMapLoader.load(gainMapUrl, async (buffer) => {\n            /* istanbul ignore if\n             this condition exists only because of three.js types + strict mode\n            */\n            if (typeof buffer === 'string')\n                throw new Error('Invalid gainmap buffer');\n            gainMap = buffer;\n            await loadCheck();\n        }, (e) => {\n            gainMapLengthComputable = e.lengthComputable;\n            gainMapLoaded = e.loaded;\n            gainMapTotal = e.total;\n            progressHandler();\n        }, (error) => {\n            this.manager.itemError(gainMapUrl);\n            if (typeof onError === 'function')\n                onError(error);\n        });\n        const metadataLoader = new FileLoader(this._internalLoadingManager);\n        // metadataLoader.setResponseType('json')\n        metadataLoader.setRequestHeader(this.requestHeader);\n        metadataLoader.setPath(this.path);\n        metadataLoader.setWithCredentials(this.withCredentials);\n        metadataLoader.load(metadataUrl, async (json) => {\n            /* istanbul ignore if\n             this condition exists only because of three.js types + strict mode\n            */\n            if (typeof json !== 'string')\n                throw new Error('Invalid metadata string');\n            // TODO: implement check on JSON file and remove this eslint disable\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            metadata = JSON.parse(json);\n            await loadCheck();\n        }, (e) => {\n            metadataLengthComputable = e.lengthComputable;\n            metadataLoaded = e.loaded;\n            metadataTotal = e.total;\n            progressHandler();\n        }, (error) => {\n            this.manager.itemError(metadataUrl);\n            if (typeof onError === 'function')\n                onError(error);\n        });\n        return quadRenderer;\n    }\n}\n\n/**\n * A Three.js Loader for a JPEG with embedded gainmap metadata.\n *\n * @category Loaders\n * @group Loaders\n *\n * @example\n * import { HDRJPGLoader } from '@monogrid/gainmap-js'\n * import {\n *   EquirectangularReflectionMapping,\n *   LinearFilter,\n *   Mesh,\n *   MeshBasicMaterial,\n *   PerspectiveCamera,\n *   PlaneGeometry,\n *   Scene,\n *   WebGLRenderer\n * } from 'three'\n *\n * const renderer = new WebGLRenderer()\n *\n * const loader = new HDRJPGLoader(renderer)\n *\n * const result = await loader.loadAsync('gainmap.jpeg')\n * // `result` can be used to populate a Texture\n *\n * const scene = new Scene()\n * const mesh = new Mesh(\n *   new PlaneGeometry(),\n *   new MeshBasicMaterial({ map: result.renderTarget.texture })\n * )\n * scene.add(mesh)\n * renderer.render(scene, new PerspectiveCamera())\n *\n * // Starting from three.js r159\n * // `result.renderTarget.texture` can\n * // also be used as Equirectangular scene background\n * //\n * // it was previously needed to convert it\n * // to a DataTexture with `result.toDataTexture()`\n * scene.background = result.renderTarget.texture\n * scene.background.mapping = EquirectangularReflectionMapping\n *\n * // result must be manually disposed\n * // when you are done using it\n * result.dispose()\n *\n */\nclass HDRJPGLoader extends LoaderBase {\n    /**\n     * Loads a JPEG containing gain map metadata\n     * Renders a normal SDR image if gainmap data is not found\n     *\n     * @param url An array in the form of [sdr.jpg, gainmap.jpg, metadata.json]\n     * @param onLoad Load complete callback, will receive the result\n     * @param onProgress Progress callback, will receive a {@link ProgressEvent}\n     * @param onError Error callback\n     * @returns\n     */\n    load(url, onLoad, onProgress, onError) {\n        const quadRenderer = this.prepareQuadRenderer();\n        const loader = new FileLoader(this._internalLoadingManager);\n        loader.setResponseType('arraybuffer');\n        loader.setRequestHeader(this.requestHeader);\n        loader.setPath(this.path);\n        loader.setWithCredentials(this.withCredentials);\n        this.manager.itemStart(url);\n        loader.load(url, async (jpeg) => {\n            /* istanbul ignore if\n             this condition exists only because of three.js types + strict mode\n            */\n            if (typeof jpeg === 'string')\n                throw new Error('Invalid buffer, received [string], was expecting [ArrayBuffer]');\n            const jpegBuffer = new Uint8Array(jpeg);\n            let sdrJPEG;\n            let gainMapJPEG;\n            let metadata;\n            try {\n                const extractionResult = await extractGainmapFromJPEG(jpegBuffer);\n                // gain map is successfully reconstructed\n                sdrJPEG = extractionResult.sdr;\n                gainMapJPEG = extractionResult.gainMap;\n                metadata = extractionResult.metadata;\n            }\n            catch (e) {\n                // render the SDR version if this is not a gainmap\n                if (e instanceof XMPMetadataNotFoundError || e instanceof GainMapNotFoundError) {\n                    console.warn(`Failure to reconstruct an HDR image from ${url}: Gain map metadata not found in the file, HDRJPGLoader will render the SDR jpeg`);\n                    metadata = {\n                        gainMapMin: [0, 0, 0],\n                        gainMapMax: [1, 1, 1],\n                        gamma: [1, 1, 1],\n                        hdrCapacityMin: 0,\n                        hdrCapacityMax: 1,\n                        offsetHdr: [0, 0, 0],\n                        offsetSdr: [0, 0, 0]\n                    };\n                    sdrJPEG = jpegBuffer;\n                }\n                else {\n                    throw e;\n                }\n            }\n            // solves #16\n            try {\n                await this.render(quadRenderer, metadata, sdrJPEG, gainMapJPEG);\n            }\n            catch (error) {\n                this.manager.itemError(url);\n                if (typeof onError === 'function')\n                    onError(error);\n                quadRenderer.disposeOnDemandRenderer();\n                return;\n            }\n            if (typeof onLoad === 'function')\n                onLoad(quadRenderer);\n            this.manager.itemEnd(url);\n            quadRenderer.disposeOnDemandRenderer();\n        }, onProgress, (error) => {\n            this.manager.itemError(url);\n            if (typeof onError === 'function')\n                onError(error);\n        });\n        return quadRenderer;\n    }\n}\n\nexport { GainMapDecoderMaterial, GainMapLoader, HDRJPGLoader, HDRJPGLoader as JPEGRLoader, MPFExtractor, QuadRenderer, decode, extractGainmapFromJPEG, extractXMP };\n","const presetsObj = {\n  apartment: 'lebombo_1k.hdr',\n  city: 'potsdamer_platz_1k.hdr',\n  dawn: 'kiara_1_dawn_1k.hdr',\n  forest: 'forest_slope_1k.hdr',\n  lobby: 'st_fagans_interior_1k.hdr',\n  night: 'dikhololo_night_1k.hdr',\n  park: 'rooitou_park_1k.hdr',\n  studio: 'studio_small_03_1k.hdr',\n  sunset: 'venice_sunset_1k.hdr',\n  warehouse: 'empty_warehouse_01_1k.hdr'\n};\n\nexport { presetsObj };\n","import { useThree, useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { RGBELoader, EXRLoader } from 'three-stdlib';\nimport { HDRJPGLoader, GainMapLoader } from '@monogrid/gainmap-js';\nimport { presetsObj } from '../helpers/environment-assets.js';\nimport { useLayoutEffect } from 'react';\n\nconst CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\nconst isArray = arr => Array.isArray(arr);\nconst defaultFiles = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'];\nfunction useEnvironment({\n  files = defaultFiles,\n  path = '',\n  preset = undefined,\n  colorSpace = undefined,\n  extensions\n} = {}) {\n  if (preset) {\n    validatePreset(preset);\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n\n  // Everything else\n  const multiFile = isArray(files);\n  const {\n    extension,\n    isCubemap\n  } = getExtension(files);\n  const loader = getLoader(extension);\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  const gl = useThree(state => state.gl);\n  useLayoutEffect(() => {\n    // Only required for gainmap\n    if (extension !== 'webp' && extension !== 'jpg' && extension !== 'jpeg') return;\n    function clearGainmapTexture() {\n      useLoader.clear(loader, multiFile ? [files] : files);\n    }\n    gl.domElement.addEventListener('webglcontextlost', clearGainmapTexture, {\n      once: true\n    });\n  }, [files, gl.domElement]);\n  const loaderResult = useLoader(loader, multiFile ? [files] : files, loader => {\n    // Gainmap requires a renderer\n    if (extension === 'webp' || extension === 'jpg' || extension === 'jpeg') {\n      // @ts-expect-error\n      loader.setRenderer(gl);\n    }\n    loader.setPath == null || loader.setPath(path);\n    // @ts-expect-error\n    if (extensions) extensions(loader);\n  });\n  let texture = multiFile ?\n  // @ts-ignore\n  loaderResult[0] : loaderResult;\n  if (extension === 'jpg' || extension === 'jpeg' || extension === 'webp') {\n    var _renderTarget;\n    texture = (_renderTarget = texture.renderTarget) == null ? void 0 : _renderTarget.texture;\n  }\n  texture.mapping = isCubemap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  texture.colorSpace = colorSpace !== null && colorSpace !== void 0 ? colorSpace : isCubemap ? 'srgb' : 'srgb-linear';\n  return texture;\n}\nconst preloadDefaultOptions = {\n  files: defaultFiles,\n  path: '',\n  preset: undefined,\n  extensions: undefined\n};\nuseEnvironment.preload = preloadOptions => {\n  const options = {\n    ...preloadDefaultOptions,\n    ...preloadOptions\n  };\n  let {\n    files,\n    path = ''\n  } = options;\n  const {\n    preset,\n    extensions\n  } = options;\n  if (preset) {\n    validatePreset(preset);\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n  const {\n    extension\n  } = getExtension(files);\n  if (extension === 'webp' || extension === 'jpg' || extension === 'jpeg') {\n    throw new Error('useEnvironment: Preloading gainmaps is not supported');\n  }\n  const loader = getLoader(extension);\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  useLoader.preload(loader, isArray(files) ? [files] : files, loader => {\n    loader.setPath == null || loader.setPath(path);\n    // @ts-expect-error\n    if (extensions) extensions(loader);\n  });\n};\nconst clearDefaultOptins = {\n  files: defaultFiles,\n  preset: undefined\n};\nuseEnvironment.clear = clearOptions => {\n  const options = {\n    ...clearDefaultOptins,\n    ...clearOptions\n  };\n  let {\n    files\n  } = options;\n  const {\n    preset\n  } = options;\n  if (preset) {\n    validatePreset(preset);\n    files = presetsObj[preset];\n  }\n  const {\n    extension\n  } = getExtension(files);\n  const loader = getLoader(extension);\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  useLoader.clear(loader, isArray(files) ? [files] : files);\n};\nfunction validatePreset(preset) {\n  if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n}\nfunction getExtension(files) {\n  var _firstEntry$split$pop;\n  const isCubemap = isArray(files) && files.length === 6;\n  const isGainmap = isArray(files) && files.length === 3 && files.some(file => file.endsWith('json'));\n  const firstEntry = isArray(files) ? files[0] : files;\n\n  // Everything else\n  const extension = isCubemap ? 'cube' : isGainmap ? 'webp' : firstEntry.startsWith('data:application/exr') ? 'exr' : firstEntry.startsWith('data:application/hdr') ? 'hdr' : firstEntry.startsWith('data:image/jpeg') ? 'jpg' : (_firstEntry$split$pop = firstEntry.split('.').pop()) == null || (_firstEntry$split$pop = _firstEntry$split$pop.split('?')) == null || (_firstEntry$split$pop = _firstEntry$split$pop.shift()) == null ? void 0 : _firstEntry$split$pop.toLowerCase();\n  return {\n    extension,\n    isCubemap,\n    isGainmap\n  };\n}\nfunction getLoader(extension) {\n  const loader = extension === 'cube' ? CubeTextureLoader : extension === 'hdr' ? RGBELoader : extension === 'exr' ? EXRLoader : extension === 'jpg' || extension === 'jpeg' ? HDRJPGLoader : extension === 'webp' ? GainMapLoader : null;\n  return loader;\n}\n\nexport { useEnvironment };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useThree, useFrame, createPortal, applyProps, extend } from '@react-three/fiber';\nimport { Scene, WebGLCubeRenderTarget, HalfFloatType } from 'three';\nimport { GroundProjectedEnv } from 'three-stdlib';\nimport { useEnvironment } from './useEnvironment.js';\n\nconst isRef = obj => obj.current && obj.current.isScene;\nconst resolveScene = scene => isRef(scene) ? scene.current : scene;\nfunction setEnvProps(background, scene, defaultScene, texture, sceneProps = {}) {\n  var _target$backgroundRot, _target$backgroundRot2, _target$environmentRo, _target$environmentRo2;\n  // defaults\n  sceneProps = {\n    backgroundBlurriness: 0,\n    backgroundIntensity: 1,\n    backgroundRotation: [0, 0, 0],\n    environmentIntensity: 1,\n    environmentRotation: [0, 0, 0],\n    ...sceneProps\n  };\n  const target = resolveScene(scene || defaultScene);\n  const oldbg = target.background;\n  const oldenv = target.environment;\n  const oldSceneProps = {\n    // @ts-ignore\n    backgroundBlurriness: target.backgroundBlurriness,\n    // @ts-ignore\n    backgroundIntensity: target.backgroundIntensity,\n    // @ts-ignore\n    backgroundRotation: (_target$backgroundRot = (_target$backgroundRot2 = target.backgroundRotation) == null || _target$backgroundRot2.clone == null ? void 0 : _target$backgroundRot2.clone()) !== null && _target$backgroundRot !== void 0 ? _target$backgroundRot : [0, 0, 0],\n    // @ts-ignore\n    environmentIntensity: target.environmentIntensity,\n    // @ts-ignore\n    environmentRotation: (_target$environmentRo = (_target$environmentRo2 = target.environmentRotation) == null || _target$environmentRo2.clone == null ? void 0 : _target$environmentRo2.clone()) !== null && _target$environmentRo !== void 0 ? _target$environmentRo : [0, 0, 0]\n  };\n  if (background !== 'only') target.environment = texture;\n  if (background) target.background = texture;\n  applyProps(target, sceneProps);\n  return () => {\n    if (background !== 'only') target.environment = oldenv;\n    if (background) target.background = oldbg;\n    applyProps(target, oldSceneProps);\n  };\n}\nfunction EnvironmentMap({\n  scene,\n  background = false,\n  map,\n  ...config\n}) {\n  const defaultScene = useThree(state => state.scene);\n  React.useLayoutEffect(() => {\n    if (map) return setEnvProps(background, scene, defaultScene, map, config);\n  });\n  return null;\n}\nfunction EnvironmentCube({\n  background = false,\n  scene,\n  blur,\n  backgroundBlurriness,\n  backgroundIntensity,\n  backgroundRotation,\n  environmentIntensity,\n  environmentRotation,\n  ...rest\n}) {\n  const texture = useEnvironment(rest);\n  const defaultScene = useThree(state => state.scene);\n  React.useLayoutEffect(() => {\n    return setEnvProps(background, scene, defaultScene, texture, {\n      backgroundBlurriness: blur !== null && blur !== void 0 ? blur : backgroundBlurriness,\n      backgroundIntensity,\n      backgroundRotation,\n      environmentIntensity,\n      environmentRotation\n    });\n  });\n  React.useEffect(() => {\n    return () => {\n      texture.dispose();\n    };\n  }, [texture]);\n  return null;\n}\nfunction EnvironmentPortal({\n  children,\n  near = 0.1,\n  far = 1000,\n  resolution = 256,\n  frames = 1,\n  map,\n  background = false,\n  blur,\n  backgroundBlurriness,\n  backgroundIntensity,\n  backgroundRotation,\n  environmentIntensity,\n  environmentRotation,\n  scene,\n  files,\n  path,\n  preset = undefined,\n  extensions\n}) {\n  const gl = useThree(state => state.gl);\n  const defaultScene = useThree(state => state.scene);\n  const camera = React.useRef(null);\n  const [virtualScene] = React.useState(() => new Scene());\n  const fbo = React.useMemo(() => {\n    const fbo = new WebGLCubeRenderTarget(resolution);\n    fbo.texture.type = HalfFloatType;\n    return fbo;\n  }, [resolution]);\n  React.useEffect(() => {\n    return () => {\n      fbo.dispose();\n    };\n  }, [fbo]);\n  React.useLayoutEffect(() => {\n    if (frames === 1) {\n      const autoClear = gl.autoClear;\n      gl.autoClear = true;\n      camera.current.update(gl, virtualScene);\n      gl.autoClear = autoClear;\n    }\n    return setEnvProps(background, scene, defaultScene, fbo.texture, {\n      backgroundBlurriness: blur !== null && blur !== void 0 ? blur : backgroundBlurriness,\n      backgroundIntensity,\n      backgroundRotation,\n      environmentIntensity,\n      environmentRotation\n    });\n  }, [children, virtualScene, fbo.texture, scene, defaultScene, background, frames, gl]);\n  let count = 1;\n  useFrame(() => {\n    if (frames === Infinity || count < frames) {\n      const autoClear = gl.autoClear;\n      gl.autoClear = true;\n      camera.current.update(gl, virtualScene);\n      gl.autoClear = autoClear;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, createPortal(/*#__PURE__*/React.createElement(React.Fragment, null, children, /*#__PURE__*/React.createElement(\"cubeCamera\", {\n    ref: camera,\n    args: [near, far, fbo]\n  }), files || preset ? /*#__PURE__*/React.createElement(EnvironmentCube, {\n    background: true,\n    files: files,\n    preset: preset,\n    path: path,\n    extensions: extensions\n  }) : map ? /*#__PURE__*/React.createElement(EnvironmentMap, {\n    background: true,\n    map: map,\n    extensions: extensions\n  }) : null), virtualScene));\n}\nfunction EnvironmentGround(props) {\n  var _props$ground, _props$ground2, _scale, _props$ground3;\n  const textureDefault = useEnvironment(props);\n  const texture = props.map || textureDefault;\n  React.useMemo(() => extend({\n    GroundProjectedEnvImpl: GroundProjectedEnv\n  }), []);\n  React.useEffect(() => {\n    return () => {\n      textureDefault.dispose();\n    };\n  }, [textureDefault]);\n  const args = React.useMemo(() => [texture], [texture]);\n  const height = (_props$ground = props.ground) == null ? void 0 : _props$ground.height;\n  const radius = (_props$ground2 = props.ground) == null ? void 0 : _props$ground2.radius;\n  const scale = (_scale = (_props$ground3 = props.ground) == null ? void 0 : _props$ground3.scale) !== null && _scale !== void 0 ? _scale : 1000;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EnvironmentMap, _extends({}, props, {\n    map: texture\n  })), /*#__PURE__*/React.createElement(\"groundProjectedEnvImpl\", {\n    args: args,\n    scale: scale,\n    height: height,\n    radius: radius\n  }));\n}\nfunction Environment(props) {\n  return props.ground ? /*#__PURE__*/React.createElement(EnvironmentGround, props) : props.map ? /*#__PURE__*/React.createElement(EnvironmentMap, props) : props.children ? /*#__PURE__*/React.createElement(EnvironmentPortal, props) : /*#__PURE__*/React.createElement(EnvironmentCube, props);\n}\n\nexport { Environment, EnvironmentCube, EnvironmentMap, EnvironmentPortal };\n"],"names":["u8","u16","u32","fleb","fdeb","clim","freb","eb","start","b","i","r","j","_a","fl","revfl","_b","fd","rev","x","hMap","cd","mb","s","l","le","co","rvb","sv","r_1","v","m","flt","fdt","flrm","fdrm","max","a","bits","d","p","o","bits16","shft","slc","e","n","inflt","dat","buf","st","sl","noBuf","noSt","cbuf","bl","nbuf","final","pos","bt","lm","dm","lbt","dbt","tbts","type","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","c","lt","dt","t","lms","dms","lpos","sym","add","dsym","end","et","zlv","unzlibSync","data","out","td","tds","isCubeTexture","def","GroundProjectedEnv","Mesh","texture","options","isCubeMap","cubeSize","_lodMax","_cubeSize","width","height","defines","vertexShader","fragmentShader","version","uniforms","geometry","IcosahedronGeometry","material","ShaderMaterial","DoubleSide","radius","RGBELoader","DataTextureLoader","manager","HalfFloatType","buffer","rgbe_error","rgbe_error_code","msg","fgets","buffer2","lineLimit","consume","len","chunk","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","line","match","RGBE_ReadPixels_RLE","w2","h2","scanline_width","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","scale","RGBEByteToRGBHalf","DataUtils","byteArray","rgbe_header_info","w","h","image_rgba_data","numElements","FloatType","floatArray","halfArray","value","url","onLoad","onProgress","onError","onLoadCallback","texData","LinearFilter","hasColorSpace","EXRLoader","logBase","reverseLutFromBitmap","bitmap","lut","k","hufClearDecTable","hdec","getBitsReturn","getBits","nBits","lc","uInt8Array2","inOffset","parseUint8Array","hufTableBuffer","hufCanonicalCodeTable","hcode","nc","hufUnpackEncTable","inDataView","ni","im","iM","zerun","hufLength","code","hufCode","hufBuildDecTable","hdecod","pl","plOffset","getCharReturn","getChar","getCodeReturn","getCode","po","rlc","outBuffer","outBufferOffset","outBufferEndOffset","cs","UInt16","Int16","ref","wdec14Return","wdec14","ls","hs","hi","ai","as","bs","wdec16","bb","aa","wav2Decode","nx","ox","ny","oy","mx","w14","p2","py","ey","oy1","oy2","ox1","ox2","i00","i01","i10","i11","px","ex","p01","p10","p11","hufDecode","encodingTable","decodingTable","no","outOffset","inOffsetEnd","index","hufUncompress","nCompressed","nRaw","initialInOffset","parseUint32","freq","applyLut","nData","predictor","source","interleaveScalar","t1","t2","stop","decodeRunLength","size","reader","lossyDctDecode","cscSet","rowPtrs","channelData","acBuffer","dcBuffer","dataView","numComp","numFullBlocksX","numBlocksX","numBlocksY","leftoverX","leftoverY","currAcComp","currDcComp","dctData","halfZigBlock","rowBlock","rowOffsets","comp2","blocky","maxY","maxX","blockx","unRleAC","unZigZag","dctInverse","csc709Inverse","convertToHalf","offset2","type2","y2","src","offset3","x2","halfRow","comp","y","decodeFloat16","acValue","dctComp","dst","f","g","alpha","beta","theta","gamma","row","rowPtr","column","cb","cr","idx","toLinear","float","uncompressRAW","info","uncompressRLE","compressed","rawBuffer","tmpBuffer","uncompressZIP","uncompressPIZ","outBufferEnd","pizChannelData","minNonZero","parseUint16","maxNonZero","parseUint8","maxValue","length","tmpOffset2","cp","uncompressPXR","sz","tmpBufferEnd","writePtr","pixel","diff","uncompressDWA","dwaHeader","parseInt64","EXRHeader","channelRules","ruleSize","name","parseNullTerminatedString","compression","csc","channels","channel","rule","zlibInfo","rleBuffer","chan","rleOffset","rowOffsetBytes","byte","uintBuffer","endOffset","stringValue","parseFixedLengthString","parseRational","parseInt32","parseTimecode","Int32","Uint32","Uint8","int","parseFloat32","decodeFloat32","binary","exponent","fraction","Uint16","parseFloat16","parseChlist","startOffset","pixelType","pLinear","xSampling","ySampling","parseChromaticities","redX","redY","greenX","greenY","blueX","blueY","whiteX","whiteY","parseCompression","compressionCodes","parseBox2i","xMin","yMin","xMax","yMax","parseLineOrder","lineOrders","lineOrder","parseV2f","parseV3f","z","parseValue","parseHeader","EXRHeader2","spec","keepReading","attributeName","attributeType","attributeSize","attributeValue","setupDecoder","outputType","EXRDecoder2","RGBAFormat","RedFormat","bufferDataView","uInt8Array","EXRDecoder","tmpOffset","channelOffsets","scanlineBlockIdx","viewer","line_y","true_y","channelID","cOff","outIndex","getBufferForType","UnsignedByteType","UnsignedIntType","ByteType","ShortType","IntType","_canReadPixelsResult","canReadPixels","renderer","camera","renderTargetOptions","testRT","WebGLRenderTarget","mesh","PlaneGeometry","MeshBasicMaterial","QuadRenderer","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","rtOptions","ClampToEdgeWrapping","Scene","OrthographicCamera","alternativeType","UVMapping","WebGLRenderer","returnValue","DataTexture","LinearSRGBColorSpace","disposeRenderTarget","Texture","GainMapDecoderMaterial","offsetHdr","offsetSdr","gainMapMin","gainMapMax","maxDisplayBoost","hdrCapacityMin","hdrCapacityMax","sdr","gainMap","Vector3","NoBlending","val","GainMapNotFoundError","XMPMetadataNotFoundError","getXMLValue","xml","tag","defaultValue","attributeMatch","tagMatch","liValues","extractXMP","input","str","xmpBlock","offsetSDR","offsetHDR","hdrCapacityMinMatch","hdrCapacityMaxMatch","MPFExtractor","imageArrayBuffer","resolve","reject","debug","loops","marker","formatPt","tiffOffset","bigEnd","firstIFDOffset","dirStart","entriesStart","numberOfImages","MPImageListValPt","images","image","bufferBlob","imgs","imageBlob","extractGainmapFromJPEG","jpegFile","metadata","getHTMLImageFromBlob","blob","img","LoaderBase","Loader","LoadingManager","quadRenderer","sdrBuffer","gainMapBuffer","gainMapBlob","sdrBlob","sdrImage","gainMapImage","needsFlip","res","LinearMipMapLinearFilter","SRGBColorSpace","GainMapLoader","sdrUrl","gainMapUrl","metadataUrl","loadCheck","error","sdrLengthComputable","sdrTotal","sdrLoaded","gainMapLengthComputable","gainMapTotal","gainMapLoaded","metadataLengthComputable","metadataTotal","metadataLoaded","progressHandler","total","loaded","lengthComputable","sdrLoader","FileLoader","gainMapLoader","metadataLoader","json","HDRJPGLoader","loader","jpeg","jpegBuffer","sdrJPEG","gainMapJPEG","extractionResult","presetsObj","CUBEMAP_ROOT","isArray","arr","defaultFiles","useEnvironment","files","path","preset","colorSpace","extensions","validatePreset","multiFile","extension","isCubemap","getExtension","getLoader","gl","useThree","state","useLayoutEffect","clearGainmapTexture","useLoader","loaderResult","_renderTarget","CubeReflectionMapping","EquirectangularReflectionMapping","preloadDefaultOptions","preloadOptions","clearDefaultOptins","clearOptions","_firstEntry$split$pop","isGainmap","file","firstEntry","CubeTextureLoader","isRef","obj","resolveScene","scene","setEnvProps","background","defaultScene","sceneProps","_target$backgroundRot","_target$backgroundRot2","_target$environmentRo","_target$environmentRo2","target","oldbg","oldenv","oldSceneProps","applyProps","EnvironmentMap","map","config","React.useLayoutEffect","EnvironmentCube","blur","backgroundBlurriness","backgroundIntensity","backgroundRotation","environmentIntensity","environmentRotation","rest","React.useEffect","EnvironmentPortal","children","near","far","resolution","frames","React.useRef","virtualScene","React.useState","fbo","React.useMemo","WebGLCubeRenderTarget","autoClear","useFrame","React.createElement","React.Fragment","createPortal","EnvironmentGround","props","_props$ground","_props$ground2","_scale","_props$ground3","textureDefault","extend","args","_extends","Environment"],"mappings":"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,CAAC,EAC9BS,EAAI,CAAC,EAAIH,EAAcN,EAAI,CAAC,CAAC,EAC7BS,EAAI,CAAC,EAAIH,EAAcN,EAAI,CAAC,CAAC,EAC7BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,CAAC,CAAC,EAC9BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,CAAC,CAAC,EAC9BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,CAAC,CAAC,EAC9BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,CAAC,CAAC,EAC9BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,EAAIH,EAAcN,EAAI,EAAE,CAAC,EAC/BS,EAAI,EAAE,E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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}