{"version":3,"file":"Ellipsoid-CLPX16sm.js","sources":["../../../src/three/renderer/math/GeoUtils.js","../../../src/three/renderer/math/Ellipsoid.js"],"sourcesContent":["import { Spherical, Vector3, MathUtils } from 'three';\n\nconst _spherical = new Spherical();\nconst _vec = new Vector3();\nconst _geoResults = {};\n\n// Cesium / 3D tiles Spheroid:\n// - Up is Z at 90 degrees latitude\n// - 0, 0 latitude, longitude is X axis\n//      Z\n//      |\n//      |\n//      .----- Y\n//     /\n//   X\n\n\n// Three.js Spherical Coordinates\n// - Up is Y at 90 degrees latitude\n// - 0, 0 latitude, longitude is Z\n//       Y\n//      |\n//      |\n//      .----- X\n//     /\n//   Z\n\nexport function swapToGeoFrame( target ) {\n\n\tconst { x, y, z } = target;\n\ttarget.x = z;\n\ttarget.y = x;\n\ttarget.z = y;\n\n}\n\nexport function swapToThreeFrame( target ) {\n\n\tconst { x, y, z } = target;\n\ttarget.z = x;\n\ttarget.x = y;\n\ttarget.y = z;\n\n}\n\nexport function sphericalPhiToLatitude( phi ) {\n\n\treturn - ( phi - Math.PI / 2 );\n\n}\n\nexport function latitudeToSphericalPhi( latitude ) {\n\n\treturn - latitude + Math.PI / 2;\n\n}\n\nfunction correctGeoCoordWrap( lat, lon, target = {} ) {\n\n\t_spherical.theta = lon;\n\t_spherical.phi = latitudeToSphericalPhi( lat );\n\t_vec.setFromSpherical( _spherical );\n\n\t_spherical.setFromVector3( _vec );\n\ttarget.lat = sphericalPhiToLatitude( _spherical.phi );\n\ttarget.lon = _spherical.theta;\n\treturn target;\n\n}\n\nfunction toHoursMinutesSecondsString( value, pos = 'E', neg = 'W' ) {\n\n\tconst direction = value < 0 ? neg : pos;\n\tvalue = Math.abs( value );\n\n\tconst hours = ~ ~ value;\n\n\tconst minDec = ( value - hours ) * 60;\n\tconst minutes = ~ ~ minDec;\n\n\tconst secDec = ( minDec - minutes ) * 60;\n\tconst seconds = ~ ~ secDec;\n\n\treturn `${ hours }° ${ minutes }' ${ seconds }\" ${ direction }`;\n\n}\n\nexport function toLatLonString( lat, lon, decimalFormat = false ) {\n\n\tconst result = correctGeoCoordWrap( lat, lon, _geoResults );\n\tlet latString, lonString;\n\tif ( decimalFormat ) {\n\n\t\tlatString = `${ ( MathUtils.RAD2DEG * result.lat ).toFixed( 4 ) }°`;\n\t\tlonString = `${ ( MathUtils.RAD2DEG * result.lon ).toFixed( 4 ) }°`;\n\n\t} else {\n\n\t\tlatString = toHoursMinutesSecondsString( MathUtils.RAD2DEG * result.lat, 'N', 'S' );\n\t\tlonString = toHoursMinutesSecondsString( MathUtils.RAD2DEG * result.lon, 'E', 'W' );\n\n\t}\n\n\treturn `${ latString } ${ lonString }`;\n\n}\n","import { Vector3, Spherical, MathUtils, Ray, Matrix4, Sphere, Euler } from 'three';\nimport { swapToGeoFrame, latitudeToSphericalPhi } from './GeoUtils.js';\n\nconst _spherical = new Spherical();\nconst _norm = new Vector3();\nconst _vec = new Vector3();\nconst _vec2 = new Vector3();\nconst _matrix = new Matrix4();\nconst _matrix2 = new Matrix4();\nconst _matrix3 = new Matrix4();\nconst _sphere = new Sphere();\nconst _euler = new Euler();\n\nconst _vecX = new Vector3();\nconst _vecY = new Vector3();\nconst _vecZ = new Vector3();\nconst _pos = new Vector3();\n\nconst _ray = new Ray();\n\nconst EPSILON12 = 1e-12;\nconst CENTER_EPS = 0.1;\n\nexport const ENU_FRAME = 0;\nexport const CAMERA_FRAME = 1;\nexport const OBJECT_FRAME = 2;\n\nexport class Ellipsoid {\n\n\tconstructor( x = 1, y = 1, z = 1 ) {\n\n\t\tthis.name = '';\n\t\tthis.radius = new Vector3( x, y, z );\n\n\t}\n\n\tintersectRay( ray, target ) {\n\n\t\t_matrix.makeScale( ...this.radius ).invert();\n\t\t_sphere.center.set( 0, 0, 0 );\n\t\t_sphere.radius = 1;\n\n\t\t_ray.copy( ray ).applyMatrix4( _matrix );\n\t\tif ( _ray.intersectSphere( _sphere, target ) ) {\n\n\t\t\t_matrix.makeScale( ...this.radius );\n\t\t\ttarget.applyMatrix4( _matrix );\n\t\t\treturn target;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t}\n\n\t// returns a frame with Z indicating altitude, Y pointing north, X pointing east\n\tgetEastNorthUpFrame( lat, lon, height, target ) {\n\n\t\tif ( height.isMatrix4 ) {\n\n\t\t\ttarget = height;\n\t\t\theight = 0;\n\n\t\t\tconsole.warn( 'Ellipsoid: The signature for \"getEastNorthUpFrame\" has changed.' );\n\n\t\t}\n\n\t\tthis.getEastNorthUpAxes( lat, lon, _vecX, _vecY, _vecZ );\n\t\tthis.getCartographicToPosition( lat, lon, height, _pos );\n\t\treturn target.makeBasis( _vecX, _vecY, _vecZ ).setPosition( _pos );\n\n\t}\n\n\t// returns a frame with z indicating altitude and az, el, roll rotation within that frame\n\t// - azimuth: measured off of true north, increasing towards \"east\" (z-axis)\n\t// - elevation: measured off of the horizon, increasing towards sky (x-axis)\n\t// - roll: rotation around northern axis (y-axis)\n\tgetOrientedEastNorthUpFrame( lat, lon, height, az, el, roll, target ) {\n\n\t\treturn this.getObjectFrame( lat, lon, height, az, el, roll, target, ENU_FRAME );\n\n\t}\n\n\t// returns a frame similar to the ENU frame but rotated to match three.js object and camera conventions\n\t// OBJECT_FRAME: oriented such that \"+Y\" is up and \"+Z\" is forward.\n\t// CAMERA_FRAME: oriented such that \"+Y\" is up and \"-Z\" is forward.\n\tgetObjectFrame( lat, lon, height, az, el, roll, target, frame = OBJECT_FRAME ) {\n\n\t\tthis.getEastNorthUpFrame( lat, lon, height, _matrix );\n\t\t_euler.set( el, roll, - az, 'ZXY' );\n\n\t\ttarget\n\t\t\t.makeRotationFromEuler( _euler )\n\t\t\t.premultiply( _matrix );\n\n\t\t// Add in the orientation adjustment for objects and cameras so \"forward\" and \"up\" are oriented\n\t\t// correctly\n\t\tif ( frame === CAMERA_FRAME ) {\n\n\t\t\t_euler.set( Math.PI / 2, 0, 0, 'XYZ' );\n\t\t\t_matrix2.makeRotationFromEuler( _euler );\n\t\t\ttarget.multiply( _matrix2 );\n\n\t\t} else if ( frame === OBJECT_FRAME ) {\n\n\t\t\t_euler.set( - Math.PI / 2, 0, Math.PI, 'XYZ' );\n\t\t\t_matrix2.makeRotationFromEuler( _euler );\n\t\t\ttarget.multiply( _matrix2 );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetCartographicFromObjectFrame( matrix, target, frame = OBJECT_FRAME ) {\n\n\t\t// if working with a frame that is not the ENU_FRAME then multiply in the\n\t\t// offset for a camera or object so \"forward\" and \"up\" are oriented correct\n\t\tif ( frame === CAMERA_FRAME ) {\n\n\t\t\t_euler.set( - Math.PI / 2, 0, 0, 'XYZ' );\n\t\t\t_matrix2.makeRotationFromEuler( _euler ).premultiply( matrix );\n\n\t\t} else if ( frame === OBJECT_FRAME ) {\n\n\t\t\t_euler.set( - Math.PI / 2, 0, Math.PI, 'XYZ' );\n\t\t\t_matrix2.makeRotationFromEuler( _euler ).premultiply( matrix );\n\n\t\t} else {\n\n\t\t\t_matrix2.copy( matrix );\n\n\t\t}\n\n\t\t// get the cartographic position of the frame\n\t\t_pos.setFromMatrixPosition( _matrix2 );\n\t\tthis.getPositionToCartographic( _pos, target );\n\n\t\t// get the relative rotation\n\t\tthis.getEastNorthUpFrame( target.lat, target.lon, 0, _matrix ).invert();\n\t\t_matrix2.premultiply( _matrix );\n\t\t_euler.setFromRotationMatrix( _matrix2, 'ZXY' );\n\n\t\ttarget.azimuth = - _euler.z;\n\t\ttarget.elevation = _euler.x;\n\t\ttarget.roll = _euler.y;\n\t\treturn target;\n\n\t}\n\n\tgetEastNorthUpAxes( lat, lon, vecEast, vecNorth, vecUp, point = _pos ) {\n\n\t\tthis.getCartographicToPosition( lat, lon, 0, point );\n\t\tthis.getCartographicToNormal( lat, lon, vecUp );\t\t// up\n\t\tvecEast.set( - point.y, point.x, 0 ).normalize();\t\t// east\n\t\tvecNorth.crossVectors( vecUp, vecEast ).normalize();\t// north\n\n\t}\n\n\t// azimuth: measured off of true north, increasing towards \"east\"\n\t// elevation: measured off of the horizon, increasing towards sky\n\t// roll: rotation around northern axis\n\tgetAzElRollFromRotationMatrix( lat, lon, rotationMatrix, target, frame = ENU_FRAME ) {\n\n\t\tconsole.warn( 'Ellipsoid: \"getAzElRollFromRotationMatrix\" is deprecated. Use \"getCartographicFromObjectFrame\", instead.' );\n\t\tthis.getCartographicToPosition( lat, lon, 0, _pos );\n\t\t_matrix3.copy( rotationMatrix ).setPosition( _pos );\n\n\t\tthis.getCartographicFromObjectFrame( _matrix3, target, frame );\n\t\tdelete target.height;\n\t\tdelete target.lat;\n\t\tdelete target.lon;\n\n\t\treturn target;\n\n\n\t}\n\n\tgetRotationMatrixFromAzElRoll( lat, lon, az, el, roll, target, frame = ENU_FRAME ) {\n\n\t\tconsole.warn( 'Ellipsoid: \"getRotationMatrixFromAzElRoll\" function has been deprecated. Use \"getObjectFrame\", instead.' );\n\n\t\tthis.getObjectFrame( lat, lon, 0, az, el, roll, target, frame );\n\t\ttarget.setPosition( 0, 0, 0 );\n\t\treturn target;\n\n\t}\n\n\tgetFrame( lat, lon, az, el, roll, height, target, frame = ENU_FRAME ) {\n\n\t\tconsole.warn( 'Ellipsoid: \"getFrame\" function has been deprecated. Use \"getObjectFrame\", instead.' );\n\t\treturn this.getObjectFrame( lat, lon, height, az, el, roll, target, frame );\n\n\t}\n\n\tgetCartographicToPosition( lat, lon, height, target ) {\n\n\t\t// From Cesium function Ellipsoid.cartographicToCartesian\n\t\t// https://github.com/CesiumGS/cesium/blob/665ec32e813d5d6fe906ec3e87187f6c38ed5e49/packages/engine/Source/core/renderer/Ellipsoid.js#L396\n\t\tthis.getCartographicToNormal( lat, lon, _norm );\n\n\t\tconst radius = this.radius;\n\t\t_vec.copy( _norm );\n\t\t_vec.x *= radius.x ** 2;\n\t\t_vec.y *= radius.y ** 2;\n\t\t_vec.z *= radius.z ** 2;\n\n\t\tconst gamma = Math.sqrt( _norm.dot( _vec ) );\n\t\t_vec.divideScalar( gamma );\n\n\t\treturn target.copy( _vec ).addScaledVector( _norm, height );\n\n\t}\n\n\tgetPositionToCartographic( pos, target ) {\n\n\t\t// From Cesium function Ellipsoid.cartesianToCartographic\n\t\t// https://github.com/CesiumGS/cesium/blob/665ec32e813d5d6fe906ec3e87187f6c38ed5e49/packages/engine/Source/core/renderer/Ellipsoid.js#L463\n\t\tthis.getPositionToSurfacePoint( pos, _vec );\n\t\tthis.getPositionToNormal( pos, _norm );\n\n\t\tconst heightDelta = _vec2.subVectors( pos, _vec );\n\n\t\ttarget.lon = Math.atan2( _norm.y, _norm.x );\n\t\ttarget.lat = Math.asin( _norm.z );\n\t\ttarget.height = Math.sign( heightDelta.dot( pos ) ) * heightDelta.length();\n\t\treturn target;\n\n\t}\n\n\tgetCartographicToNormal( lat, lon, target ) {\n\n\t\t_spherical.set( 1, latitudeToSphericalPhi( lat ), lon );\n\t\ttarget.setFromSpherical( _spherical ).normalize();\n\n\t\t// swap frame from the three.js frame to the geo coord frame\n\t\tswapToGeoFrame( target );\n\t\treturn target;\n\n\t}\n\n\tgetPositionToNormal( pos, target ) {\n\n\t\tconst radius = this.radius;\n\t\ttarget.copy( pos );\n\t\ttarget.x /= radius.x ** 2;\n\t\ttarget.y /= radius.y ** 2;\n\t\ttarget.z /= radius.z ** 2;\n\t\ttarget.normalize();\n\n\t\treturn target;\n\n\t}\n\n\tgetPositionToSurfacePoint( pos, target ) {\n\n\t\t// From Cesium function Ellipsoid.scaleToGeodeticSurface\n\t\t// https://github.com/CesiumGS/cesium/blob/d11b746e5809ac115fcff65b7b0c6bdfe81dcf1c/packages/engine/Source/core/renderer/scaleToGeodeticSurface.js#L25\n\t\tconst radius = this.radius;\n\t\tconst invRadiusSqX = 1 / ( radius.x ** 2 );\n\t\tconst invRadiusSqY = 1 / ( radius.y ** 2 );\n\t\tconst invRadiusSqZ = 1 / ( radius.z ** 2 );\n\n\t\tconst x2 = pos.x * pos.x * invRadiusSqX;\n\t\tconst y2 = pos.y * pos.y * invRadiusSqY;\n\t\tconst z2 = pos.z * pos.z * invRadiusSqZ;\n\n\t\t// Compute the squared ellipsoid norm.\n\t\tconst squaredNorm = x2 + y2 + z2;\n\t\tconst ratio = Math.sqrt( 1.0 / squaredNorm );\n\n\t\t// As an initial approximation, assume that the radial intersection is the projection point.\n\t\tconst intersection = _vec.copy( pos ).multiplyScalar( ratio );\n\t\tif ( squaredNorm < CENTER_EPS ) {\n\n\t\t\treturn ! isFinite( ratio ) ? null : target.copy( intersection );\n\n\t\t}\n\n\t\t// Use the gradient at the intersection point in place of the true unit normal.\n\t\t// The difference in magnitude will be absorbed in the multiplier.\n\t\tconst gradient = _vec2.set(\n\t\t\tintersection.x * invRadiusSqX * 2.0,\n\t\t\tintersection.y * invRadiusSqY * 2.0,\n\t\t\tintersection.z * invRadiusSqZ * 2.0\n\t\t);\n\n\t\t// Compute the initial guess at the normal vector multiplier, lambda.\n\t\tlet lambda = ( 1.0 - ratio ) * pos.length() / ( 0.5 * gradient.length() );\n\t\tlet correction = 0.0;\n\n\t\tlet func, denominator;\n\t\tlet xMultiplier, yMultiplier, zMultiplier;\n\t\tlet xMultiplier2, yMultiplier2, zMultiplier2;\n\t\tlet xMultiplier3, yMultiplier3, zMultiplier3;\n\n\t\tdo {\n\n\t\t\tlambda -= correction;\n\n\t\t\txMultiplier = 1.0 / ( 1.0 + lambda * invRadiusSqX );\n\t\t\tyMultiplier = 1.0 / ( 1.0 + lambda * invRadiusSqY );\n\t\t\tzMultiplier = 1.0 / ( 1.0 + lambda * invRadiusSqZ );\n\n\t\t\txMultiplier2 = xMultiplier * xMultiplier;\n\t\t\tyMultiplier2 = yMultiplier * yMultiplier;\n\t\t\tzMultiplier2 = zMultiplier * zMultiplier;\n\n\t\t\txMultiplier3 = xMultiplier2 * xMultiplier;\n\t\t\tyMultiplier3 = yMultiplier2 * yMultiplier;\n\t\t\tzMultiplier3 = zMultiplier2 * zMultiplier;\n\n\t\t\tfunc = x2 * xMultiplier2 + y2 * yMultiplier2 + z2 * zMultiplier2 - 1.0;\n\n\t\t\t// \"denominator\" here refers to the use of this expression in the velocity and acceleration\n\t\t\t// computations in the sections to follow.\n\t\t\tdenominator =\n\t\t\t\tx2 * xMultiplier3 * invRadiusSqX +\n\t\t\t\ty2 * yMultiplier3 * invRadiusSqY +\n\t\t\t\tz2 * zMultiplier3 * invRadiusSqZ;\n\n\t\t\tconst derivative = - 2.0 * denominator;\n\t\t\tcorrection = func / derivative;\n\n\t\t} while ( Math.abs( func ) > EPSILON12 );\n\n\t\treturn target.set(\n\t\t\tpos.x * xMultiplier,\n\t\t\tpos.y * yMultiplier,\n\t\t\tpos.z * zMultiplier\n\t\t);\n\n\t}\n\n\tcalculateHorizonDistance( latitude, elevation ) {\n\n\t\t// from https://aty.sdsu.edu/explain/atmos_refr/horizon.html\n\t\t// OG = sqrt ( 2 R h + h2 ) .\n\t\tconst effectiveRadius = this.calculateEffectiveRadius( latitude );\n\t\treturn Math.sqrt( 2 * effectiveRadius * elevation + elevation ** 2 );\n\n\t}\n\n\tcalculateEffectiveRadius( latitude ) {\n\n\t\t// This radius represents the distance from the center of the ellipsoid to the surface along the normal at the given latitude.\n\t\t// from https://en.wikipedia.org/wiki/Earth_radius#Prime_vertical\n\t\t// N = a / sqrt(1 - e^2 * sin^2(phi))\n\t\tconst semiMajorAxis = this.radius.x;\n\t\tconst semiMinorAxis = this.radius.z;\n\t\tconst eSquared = 1 - ( semiMinorAxis ** 2 / semiMajorAxis ** 2 );\n\t\tconst phi = latitude * MathUtils.DEG2RAD;\n\n\t\tconst sinPhiSquared = Math.sin( phi ) ** 2;\n\t\tconst N = semiMajorAxis / Math.sqrt( 1 - eSquared * sinPhiSquared );\n\t\treturn N;\n\n\t}\n\n\tgetPositionElevation( pos ) {\n\n\t\t// logic from \"getPositionToCartographic\"\n\t\tthis.getPositionToSurfacePoint( pos, _vec );\n\n\t\tconst heightDelta = _vec2.subVectors( pos, _vec );\n\t\treturn Math.sign( heightDelta.dot( pos ) ) * heightDelta.length();\n\n\t}\n\n\t// Returns an estimate of the closest point on the ellipsoid to the ray. Returns\n\t// the surface intersection if they collide.\n\tclosestPointToRayEstimate( ray, target ) {\n\n\t\tif ( this.intersectRay( ray, target ) ) {\n\n\t\t\treturn target;\n\n\t\t} else {\n\n\t\t\t_matrix.makeScale( ...this.radius ).invert();\n\t\t\t_ray.copy( ray ).applyMatrix4( _matrix );\n\n\t\t\t_vec.set( 0, 0, 0 );\n\t\t\t_ray.closestPointToPoint( _vec, target ).normalize();\n\n\t\t\t_matrix.makeScale( ...this.radius );\n\t\t\treturn target.applyMatrix4( _matrix );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.radius.copy( source.radius );\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n"],"names":["_spherical","Spherical","_vec","Vector3","_geoResults","swapToGeoFrame","target","x","y","z","sphericalPhiToLatitude","phi","latitudeToSphericalPhi","latitude","correctGeoCoordWrap","lat","lon","toHoursMinutesSecondsString","value","pos","neg","direction","hours","minDec","minutes","seconds","toLatLonString","decimalFormat","result","latString","lonString","MathUtils","_norm","_vec2","_matrix","Matrix4","_matrix2","_matrix3","_sphere","Sphere","_euler","Euler","_vecX","_vecY","_vecZ","_pos","_ray","Ray","EPSILON12","CENTER_EPS","ENU_FRAME","CAMERA_FRAME","OBJECT_FRAME","Ellipsoid","ray","height","az","el","roll","frame","matrix","vecEast","vecNorth","vecUp","point","rotationMatrix","radius","gamma","heightDelta","invRadiusSqX","invRadiusSqY","invRadiusSqZ","x2","y2","z2","squaredNorm","ratio","intersection","gradient","lambda","correction","func","denominator","xMultiplier","yMultiplier","zMultiplier","xMultiplier2","yMultiplier2","zMultiplier2","xMultiplier3","yMultiplier3","zMultiplier3","derivative","elevation","effectiveRadius","semiMajorAxis","eSquared","sinPhiSquared","source"],"mappings":"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"}