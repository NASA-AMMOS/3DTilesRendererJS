import{i as ut,aP as mt,b as ft,V as M,ae as lt,l as J,m as g,aQ as Pt,at as ht,R as gt,s as yt,Q as dt,M as B}from"./three.module-DBfedTbk.js";class vt extends ut{constructor(){super(new mt(0,0),new xt),this.renderOrder=1/0}onBeforeRender(t){const e=this.material.uniforms;t.getSize(e.resolution.value)}updateMatrixWorld(){this.matrixWorld.makeTranslation(this.position)}dispose(){this.geometry.dispose(),this.material.dispose()}}class xt extends ft{constructor(){super({depthWrite:!1,depthTest:!1,transparent:!0,uniforms:{resolution:{value:new M},size:{value:15},thickness:{value:2},opacity:{value:1}},vertexShader:`

				uniform float pixelRatio;
				uniform float size;
				uniform float thickness;
				uniform vec2 resolution;
				varying vec2 vUv;

				void main() {

					vUv = uv;

					float aspect = resolution.x / resolution.y;
					vec2 offset = uv * 2.0 - vec2( 1.0 );
					offset.y *= aspect;

					vec4 screenPoint = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
					screenPoint.xy += offset * ( size + thickness ) * screenPoint.w / resolution.x;

					gl_Position = screenPoint;

				}
			`,fragmentShader:`

				uniform float size;
				uniform float thickness;
				uniform float opacity;

				varying vec2 vUv;
				void main() {

					float ht = 0.5 * thickness;
					float planeDim = size + thickness;
					float offset = ( planeDim - ht - 2.0 ) / planeDim;
					float texelThickness = ht / planeDim;

					vec2 vec = vUv * 2.0 - vec2( 1.0 );
					float dist = abs( length( vec ) - offset );
					float fw = fwidth( dist ) * 0.5;
					float a = smoothstep( texelThickness - fw, texelThickness + fw, dist );

					gl_FragColor = vec4( 1, 1, 1, opacity * ( 1.0 - a ) );

				}
			`})}}const et=new M,it=new M;class St{constructor(){this.domElement=null,this.buttons=0,this.pointerType=null,this.pointerOrder=[],this.previousPositions={},this.pointerPositions={},this.startPositions={},this.pointerSetThisFrame={},this.hoverPosition=new M,this.hoverSet=!1}reset(){this.buttons=0,this.pointerType=null,this.pointerOrder=[],this.previousPositions={},this.pointerPositions={},this.startPositions={},this.pointerSetThisFrame={},this.hoverPosition=new M,this.hoverSet=!1}updateFrame(){const{previousPositions:t,pointerPositions:e}=this;for(const i in e)t[i].copy(e[i])}setHoverEvent(t){(t.pointerType==="mouse"||t.type==="wheel")&&(this.getAdjustedPointer(t,this.hoverPosition),this.hoverSet=!0)}getLatestPoint(t){return this.pointerType!==null?(this.getCenterPoint(t),t):this.hoverSet?(t.copy(this.hoverPosition),t):null}getAdjustedPointer(t,e){const o=(this.domElement?this.domElement:t.target).getBoundingClientRect(),s=t.clientX-o.left,d=t.clientY-o.top;e.set(s,d)}addPointer(t){const e=t.pointerId,i=new M;this.getAdjustedPointer(t,i),this.pointerOrder.push(e),this.pointerPositions[e]=i,this.previousPositions[e]=i.clone(),this.startPositions[e]=i.clone(),this.getPointerCount()===1&&(this.pointerType=t.pointerType,this.buttons=t.buttons)}updatePointer(t){const e=t.pointerId;return e in this.pointerPositions?(this.getAdjustedPointer(t,this.pointerPositions[e]),!0):!1}deletePointer(t){const e=t.pointerId,i=this.pointerOrder;i.splice(i.indexOf(e),1),delete this.pointerPositions[e],delete this.previousPositions[e],delete this.startPositions[e],this.getPointerCount.length===0&&(this.buttons=0,this.pointerType=null)}getPointerCount(){return this.pointerOrder.length}getCenterPoint(t,e=this.pointerPositions){const i=this.pointerOrder;if(this.getPointerCount()===1||this.getPointerType()==="mouse"){const o=i[0];return t.copy(e[o]),t}else if(this.getPointerCount()===2){const o=this.pointerOrder[0],s=this.pointerOrder[1],d=e[o],a=e[s];return t.addVectors(d,a).multiplyScalar(.5),t}return null}getPreviousCenterPoint(t){return this.getCenterPoint(t,this.previousPositions)}getStartCenterPoint(t){return this.getCenterPoint(t,this.startPositions)}getMoveDistance(){return this.getCenterPoint(et),this.getPreviousCenterPoint(it),et.sub(it).length()}getTouchPointerDistance(t=this.pointerPositions){if(this.getPointerCount()<=1||this.getPointerType()==="mouse")return 0;const{pointerOrder:e}=this,i=e[0],o=e[1],s=t[i],d=t[o];return s.distanceTo(d)}getPreviousTouchPointerDistance(){return this.getTouchPointerDistance(this.previousPositions)}getStartTouchPointerDistance(){return this.getTouchPointerDistance(this.startPositions)}getPointerType(){return this.pointerType}isPointerTouch(){return this.getPointerType()==="touch"}getPointerButtons(){return this.buttons}isLeftClicked(){return!!(this.buttons&1)}isRightClicked(){return!!(this.buttons&2)}}const V=new J;new g;function N(f,t,e){return e.makeTranslation(-f.x,-f.y,-f.z),V.makeRotationFromQuaternion(t),e.premultiply(V),V.makeTranslation(f.x,f.y,f.z),e.premultiply(V),e}function U(f,t,e,i){i.x=(f-e.offsetLeft)/e.clientWidth*2-1,i.y=-((t-e.offsetTop)/e.clientHeight)*2+1,i.isVector3&&(i.z=0)}function w(f,t,e){const i=f instanceof lt?f:f.ray,{origin:o,direction:s}=i;o.set(t.x,t.y,-1).unproject(e),s.set(t.x,t.y,1).unproject(e).sub(o),f.isRay||(f.near=0,f.far=s.length(),f.camera=e),s.normalize()}const C=0,R=1,T=2,A=3,Q=4,G=.05,Y=.025,k=new J,L=new J,D=new g,h=new g,H=new g,j=new g,S=new g,b=new g,K=new g,Z=new g,z=new dt,ot=new ht,P=new g,q=new g,X=new g,_t=new dt,m=new lt,O=new M,v=new M,st=new M,F=new M,$=new M,nt=new M,rt={type:"change"},at={type:"start"},ct={type:"end"};class Mt extends Pt{get enabled(){return this._enabled}set enabled(t){t!==this.enabled&&(this._enabled=t,this.resetState(),this.pointerTracker.reset(),this.enabled||(this.dragInertia.set(0,0,0),this.rotationInertia.set(0,0)))}constructor(t=null,e=null,i=null,o=null){super(),this.isEnvironmentControls=!0,this.domElement=null,this.camera=null,this.scene=null,this.tilesRenderer=null,this._enabled=!0,this.cameraRadius=5,this.rotationSpeed=1,this.minAltitude=0,this.maxAltitude=.45*Math.PI,this.minDistance=10,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.zoomSpeed=1,this.adjustHeight=!0,this.enableDamping=!1,this.dampingFactor=.15,this.fallbackPlane=new ht(new g(0,1,0),0),this.useFallbackPlane=!0,this.scaleZoomOrientationAtEdges=!1,this.autoAdjustCameraRotation=!0,this.state=C,this.pointerTracker=new St,this.needsUpdate=!1,this.actionHeightOffset=0,this.pivotPoint=new g,this.zoomDirectionSet=!1,this.zoomPointSet=!1,this.zoomDirection=new g,this.zoomPoint=new g,this.zoomDelta=0,this.rotationInertiaPivot=new g,this.rotationInertia=new M,this.dragInertia=new g,this.inertiaTargetDistance=1/0,this.inertiaStableFrames=0,this.pivotMesh=new vt,this.pivotMesh.raycast=()=>{},this.pivotMesh.scale.setScalar(.25),this.raycaster=new gt,this.raycaster.firstHitOnly=!0,this.up=new g(0,1,0),this.clock=new yt,this._detachCallback=null,this._upInitialized=!1,this._lastUsedState=C,this._zoomPointWasSet=!1,this._tilesOnChangeCallback=()=>this.zoomPointSet=!1,i&&this.attach(i),e&&this.setCamera(e),t&&this.setScene(t),o&&this.setTilesRenderer(o)}setScene(t){this.scene=t}setCamera(t){this.camera=t,this._upInitialized=!1,this.zoomDirectionSet=!1,this.zoomPointSet=!1,this.needsUpdate=!0,this.raycaster.camera=t,this.resetState()}setTilesRenderer(t){console.warn('EnvironmentControls: "setTilesRenderer" has been deprecated. Use "setScene" and "setEllipsoid", instead.'),this.tilesRenderer=t,this.tilesRenderer!==null&&this.setScene(this.tilesRenderer.group)}attach(t){if(this.domElement)throw new Error("EnvironmentControls: Controls already attached to element");this.domElement=t,this.pointerTracker.domElement=t,t.style.touchAction="none";const e=n=>{this.enabled&&n.preventDefault()},i=n=>{if(!this.enabled)return;n.preventDefault();const{camera:l,raycaster:r,domElement:_,up:x,pivotMesh:p,pointerTracker:y,scene:W,pivotPoint:E,enabled:pt}=this;if(y.addPointer(n),this.needsUpdate=!0,y.isPointerTouch()){if(p.visible=!1,y.getPointerCount()===0)_.setPointerCapture(n.pointerId);else if(y.getPointerCount()>2){this.resetState();return}}y.getCenterPoint(v),U(v.x,v.y,_,v),w(r,v,l);const tt=Math.abs(r.ray.direction.dot(x));if(tt<G||tt<Y)return;const I=this._raycast(r);I&&(y.getPointerCount()===2||y.isRightClicked()||y.isLeftClicked()&&n.shiftKey?(this.setState(y.isPointerTouch()?Q:T),E.copy(I.point),p.position.copy(I.point),p.visible=y.isPointerTouch()?!1:pt,p.updateMatrixWorld(),W.add(p)):y.isLeftClicked()&&(this.setState(R),E.copy(I.point),p.position.copy(I.point),p.updateMatrixWorld(),W.add(p)))};let o=!1;const s=n=>{const{pointerTracker:l}=this;if(!this.enabled)return;n.preventDefault();const{pivotMesh:r,enabled:_}=this;this.zoomDirectionSet=!1,this.zoomPointSet=!1,this.state!==C&&(this.needsUpdate=!0),l.setHoverEvent(n),l.updatePointer(n)&&(l.isPointerTouch()&&l.getPointerCount()===2&&(o||(o=!0,queueMicrotask(()=>{o=!1,l.getCenterPoint($);const x=l.getStartTouchPointerDistance(),p=l.getTouchPointerDistance(),y=p-x;if(this.state===C||this.state===Q){l.getCenterPoint($),l.getStartCenterPoint(nt);const W=2*window.devicePixelRatio,E=$.distanceTo(nt);(Math.abs(y)>W||E>W)&&(Math.abs(y)>E?(this.setState(A),this.zoomDirectionSet=!1):this.setState(T))}if(this.state===A){const W=l.getPreviousTouchPointerDistance();this.zoomDelta+=p-W,r.visible=!1}else this.state===T&&(r.visible=_)}))),this.dispatchEvent(rt))},d=n=>{const{pointerTracker:l}=this;!this.enabled||l.getPointerCount()===0||(l.deletePointer(n),l.getPointerType()==="touch"&&l.getPointerCount()===0&&t.releasePointerCapture(n.pointerId),this.resetState(),this.needsUpdate=!0)},a=n=>{if(!this.enabled)return;n.preventDefault();const{pointerTracker:l}=this;l.setHoverEvent(n),l.updatePointer(n),this.dispatchEvent(at);let r;switch(n.deltaMode){case 2:r=n.deltaY*800;break;case 1:r=n.deltaY*40;break;case 0:r=n.deltaY;break}const _=Math.sign(r),x=Math.abs(r);this.zoomDelta-=.25*_*x,this.needsUpdate=!0,this._lastUsedState=A,this.dispatchEvent(ct)},u=n=>{this.enabled&&this.resetState()};t.addEventListener("contextmenu",e),t.addEventListener("pointerdown",i),t.addEventListener("wheel",a,{passive:!1});const c=t.getRootNode();c.addEventListener("pointermove",s),c.addEventListener("pointerup",d),c.addEventListener("pointerleave",u),this._detachCallback=()=>{t.removeEventListener("contextmenu",e),t.removeEventListener("pointerdown",i),t.removeEventListener("wheel",a),c.removeEventListener("pointermove",s),c.removeEventListener("pointerup",d),c.removeEventListener("pointerleave",u)}}detach(){this.domElement=null,this._detachCallback&&(this._detachCallback(),this._detachCallback=null,this.pointerTracker.reset())}getUpDirection(t,e){e.copy(this.up)}getCameraUpDirection(t){this.getUpDirection(this.camera.position,t)}getPivotPoint(t){let e=null;this._lastUsedState===A?this._zoomPointWasSet&&(e=t.copy(this.zoomPoint)):(this._lastUsedState===T||this._lastUsedState===R)&&(e=t.copy(this.pivotPoint));const{camera:i,raycaster:o}=this;e!==null&&(h.copy(e).project(i),(h.x<-1||h.x>1||h.y<-1||h.y>1)&&(e=null)),w(o,{x:0,y:0},i);const s=this._raycast(o);return s&&(e===null||s.distance<e.distanceTo(o.ray.origin))&&(e=t.copy(s.point)),e}resetState(){this.state!==C&&this.dispatchEvent(ct),this.state=C,this.pivotMesh.removeFromParent(),this.pivotMesh.visible=this.enabled,this.actionHeightOffset=0,this.pointerTracker.reset()}setState(t=this.state,e=!0){this.state!==t&&(this.state===C&&e&&this.dispatchEvent(at),this.pivotMesh.visible=this.enabled,this.dragInertia.set(0,0,0),this.rotationInertia.set(0,0),this.inertiaStableFrames=0,this.state=t,t!==C&&t!==Q&&(this._lastUsedState=t))}update(t=Math.min(this.clock.getDelta(),64/1e3)){if(!this.enabled||!this.camera||t===0)return;const{camera:e,cameraRadius:i,pivotPoint:o,up:s,state:d,adjustHeight:a,autoAdjustCameraRotation:u}=this;e.updateMatrixWorld(),this.getCameraUpDirection(P),this._upInitialized||(this._upInitialized=!0,this.up.copy(P)),this.zoomPointSet=!1;const c=this._inertiaNeedsUpdate(),n=this.needsUpdate||c;if(this.needsUpdate||c){const r=this.zoomDelta;this._updateZoom(),this._updatePosition(t),this._updateRotation(t),d===R||d===T?(S.set(0,0,-1).transformDirection(e.matrixWorld),this.inertiaTargetDistance=h.copy(o).sub(e.position).dot(S)):d===C&&this._updateInertia(t),(d!==C||r!==0||c)&&this.dispatchEvent(rt),this.needsUpdate=!1}const l=e.isOrthographicCamera?null:a&&this._getPointBelowCamera()||null;if(this.getCameraUpDirection(P),this._setFrame(P),(this.state===R||this.state===T)&&this.actionHeightOffset!==0){const{actionHeightOffset:r}=this;e.position.addScaledVector(s,-r),o.addScaledVector(s,-r),l&&(l.distance-=r)}if(this.actionHeightOffset=0,l){const r=l.distance;if(r<i){const _=i-r;e.position.addScaledVector(s,_),o.addScaledVector(s,_),this.actionHeightOffset=_}}this.pointerTracker.updateFrame(),n&&u&&(this.getCameraUpDirection(P),this._alignCameraUp(P,1),this.getCameraUpDirection(P),this._clampRotation(P))}adjustCamera(t){const{adjustHeight:e,cameraRadius:i}=this;if(t.isPerspectiveCamera){this.getUpDirection(t.position,P);const o=e&&this._getPointBelowCamera(t.position,P)||null;if(o){const s=o.distance;s<i&&t.position.addScaledVector(P,i-s)}}}dispose(){this.detach()}_updateInertia(t){const{rotationInertia:e,pivotPoint:i,dragInertia:o,enableDamping:s,dampingFactor:d,camera:a,cameraRadius:u,minDistance:c,inertiaTargetDistance:n}=this;if(!this.enableDamping||this.inertiaStableFrames>1){o.set(0,0,0),e.set(0,0,0);return}const l=Math.pow(2,-t/d),r=Math.max(a.near,u,c,n),p=.25*(2/(2*1e3));if(e.lengthSq()>0){w(m,h.set(0,0,-1),a),m.applyMatrix4(a.matrixWorldInverse),m.direction.normalize(),m.recast(-m.direction.dot(m.origin)).at(r/m.direction.z,h),h.applyMatrix4(a.matrixWorld),w(m,D.set(p,p,-1),a),m.applyMatrix4(a.matrixWorldInverse),m.direction.normalize(),m.recast(-m.direction.dot(m.origin)).at(r/m.direction.z,D),D.applyMatrix4(a.matrixWorld),h.sub(i).normalize(),D.sub(i).normalize();const y=h.angleTo(D)/t;e.multiplyScalar(l),(e.lengthSq()<y**2||!s)&&e.set(0,0)}if(o.lengthSq()>0){w(m,h.set(0,0,-1),a),m.applyMatrix4(a.matrixWorldInverse),m.direction.normalize(),m.recast(-m.direction.dot(m.origin)).at(r/m.direction.z,h),h.applyMatrix4(a.matrixWorld),w(m,D.set(p,p,-1),a),m.applyMatrix4(a.matrixWorldInverse),m.direction.normalize(),m.recast(-m.direction.dot(m.origin)).at(r/m.direction.z,D),D.applyMatrix4(a.matrixWorld);const y=h.distanceTo(D)/t;o.multiplyScalar(l),(o.lengthSq()<y**2||!s)&&o.set(0,0,0)}e.lengthSq()>0&&this._applyRotation(e.x*t,e.y*t,i),o.lengthSq()>0&&(a.position.addScaledVector(o,t),a.updateMatrixWorld())}_inertiaNeedsUpdate(){const{rotationInertia:t,dragInertia:e}=this;return t.lengthSq()!==0||e.lengthSq()!==0}_updateZoom(){const{zoomPoint:t,zoomDirection:e,camera:i,minDistance:o,maxDistance:s,pointerTracker:d,domElement:a,minZoom:u,maxZoom:c,zoomSpeed:n,state:l}=this;let r=this.zoomDelta;if(this.zoomDelta=0,!(!d.getLatestPoint(v)||r===0&&l!==A))if(this.rotationInertia.set(0,0),this.dragInertia.set(0,0,0),i.isOrthographicCamera){this._updateZoomDirection();const _=this.zoomPointSet||this._updateZoomPoint();q.unproject(i);const x=Math.pow(.95,Math.abs(r*.05));let p=r>0?1/Math.abs(x):x;p*=n,p>1?c<i.zoom*p&&(p=1):u>i.zoom*p&&(p=1),i.zoom*=p,i.updateProjectionMatrix(),_&&(U(v.x,v.y,a,X),X.unproject(i),i.position.sub(X).add(q),i.updateMatrixWorld())}else{this._updateZoomDirection();const _=h.copy(e);if(this.zoomPointSet||this._updateZoomPoint()){const x=t.distanceTo(i.position);if(r<0){const p=Math.min(0,x-s);r=r*x*n*.0025,r=Math.max(r,p)}else{const p=Math.max(0,x-o);r=r*Math.max(x-o,0)*n*.0025,r=Math.min(r,p)}i.position.addScaledVector(e,r),i.updateMatrixWorld()}else{const x=this._getPointBelowCamera();if(x){const p=x.distance;_.set(0,0,-1).transformDirection(i.matrixWorld),i.position.addScaledVector(_,r*p*.01),i.updateMatrixWorld()}}}}_updateZoomDirection(){if(this.zoomDirectionSet)return;const{domElement:t,raycaster:e,camera:i,zoomDirection:o,pointerTracker:s}=this;s.getLatestPoint(v),U(v.x,v.y,t,q),w(e,q,i),o.copy(e.ray.direction).normalize(),this.zoomDirectionSet=!0}_updateZoomPoint(){const{camera:t,zoomDirectionSet:e,zoomDirection:i,raycaster:o,zoomPoint:s,pointerTracker:d,domElement:a}=this;if(this._zoomPointWasSet=!1,!e)return!1;t.isOrthographicCamera&&d.getLatestPoint(O)?(U(O.x,O.y,a,O),w(o,O,t)):(o.ray.origin.copy(t.position),o.ray.direction.copy(i),o.near=0,o.far=1/0);const u=this._raycast(o);return u?(s.copy(u.point),this.zoomPointSet=!0,this._zoomPointWasSet=!0,!0):!1}_getPointBelowCamera(t=this.camera.position,e=this.up){const{raycaster:i}=this;i.ray.direction.copy(e).multiplyScalar(-1),i.ray.origin.copy(t).addScaledVector(e,1e5),i.near=0,i.far=1/0;const o=this._raycast(i);return o&&(o.distance-=1e5),o}_updatePosition(t){const{raycaster:e,camera:i,pivotPoint:o,up:s,pointerTracker:d,domElement:a,state:u,dragInertia:c}=this;if(u===R){if(d.getCenterPoint(v),U(v.x,v.y,a,v),ot.setFromNormalAndCoplanarPoint(s,o),w(e,v,i),Math.abs(e.ray.direction.dot(s))<G){const n=Math.acos(G);Z.crossVectors(e.ray.direction,s).normalize(),e.ray.direction.copy(s).applyAxisAngle(Z,n).multiplyScalar(-1)}if(this.getUpDirection(o,P),Math.abs(e.ray.direction.dot(P))<Y){const n=Math.acos(Y);Z.crossVectors(e.ray.direction,P).normalize(),e.ray.direction.copy(P).applyAxisAngle(Z,n).multiplyScalar(-1)}e.ray.intersectPlane(ot,h)&&(D.subVectors(o,h),i.position.add(D),i.updateMatrixWorld(),D.multiplyScalar(1/t),d.getMoveDistance()/t<2*window.devicePixelRatio?this.inertiaStableFrames++:(c.copy(D),this.inertiaStableFrames=0))}}_updateRotation(t){const{pivotPoint:e,pointerTracker:i,domElement:o,state:s,rotationInertia:d}=this;s===T&&(i.getCenterPoint(v),i.getPreviousCenterPoint(st),F.subVectors(v,st).multiplyScalar(2*Math.PI/o.clientHeight),this._applyRotation(F.x,F.y,e),F.multiplyScalar(1/t),i.getMoveDistance()/t<2*window.devicePixelRatio?this.inertiaStableFrames++:(d.copy(F),this.inertiaStableFrames=0))}_applyRotation(t,e,i){if(t===0&&e===0)return;const{camera:o,minAltitude:s,maxAltitude:d,rotationSpeed:a}=this,u=-t*a;let c=e*a;S.set(0,0,1).transformDirection(o.matrixWorld),b.set(1,0,0).transformDirection(o.matrixWorld),this.getUpDirection(i,P);let n;P.dot(S)>1-1e-10?n=0:(h.crossVectors(P,S).normalize(),n=Math.sign(h.dot(b))*P.angleTo(S)),c>0?(c=Math.min(n-s,c),c=Math.max(0,c)):(c=Math.max(n-d,c),c=Math.min(0,c)),z.setFromAxisAngle(P,u),N(i,z,k),o.matrixWorld.premultiply(k),b.set(1,0,0).transformDirection(o.matrixWorld),z.setFromAxisAngle(b,-c),N(i,z,k),o.matrixWorld.premultiply(k),o.matrixWorld.decompose(o.position,o.quaternion,h)}_setFrame(t){const{up:e,camera:i,zoomPoint:o,zoomDirectionSet:s,zoomPointSet:d,scaleZoomOrientationAtEdges:a}=this;if(s&&(d||this._updateZoomPoint())){if(z.setFromUnitVectors(e,t),a){this.getUpDirection(o,h);let u=Math.max(h.dot(e)-.6,0)/.4;u=B.mapLinear(u,0,.5,0,1),u=Math.min(u,1),i.isOrthographicCamera&&(u*=.1),z.slerp(_t,1-u)}N(o,z,k),i.updateMatrixWorld(),i.matrixWorld.premultiply(k),i.matrixWorld.decompose(i.position,i.quaternion,h),this.zoomDirectionSet=!1,this._updateZoomDirection()}e.copy(t),i.updateMatrixWorld()}_raycast(t){const{scene:e,useFallbackPlane:i,fallbackPlane:o}=this,s=t.intersectObject(e)[0]||null;if(s)return s;if(i){const d=o;if(t.ray.intersectPlane(d,h))return{point:h.clone(),distance:t.ray.origin.distanceTo(h)}}return null}_alignCameraUp(t,e=1){const{camera:i,state:o,pivotPoint:s,zoomPoint:d,zoomPointSet:a}=this;i.updateMatrixWorld(),S.set(0,0,-1).transformDirection(i.matrixWorld),b.set(-1,0,0).transformDirection(i.matrixWorld);let u=B.mapLinear(1-Math.abs(S.dot(t)),0,.2,0,1);u=B.clamp(u,0,1),e*=u,K.crossVectors(t,S),K.lerp(b,1-e).normalize(),z.setFromUnitVectors(b,K),i.quaternion.premultiply(z);let c=null;o===R||o===T?c=H.copy(s):a&&(c=H.copy(d)),c&&(L.copy(i.matrixWorld).invert(),h.copy(c).applyMatrix4(L),i.updateMatrixWorld(),h.applyMatrix4(i.matrixWorld),j.subVectors(c,h),i.position.add(j)),i.updateMatrixWorld()}_clampRotation(t){const{camera:e,minAltitude:i,maxAltitude:o,state:s,pivotPoint:d,zoomPoint:a,zoomPointSet:u}=this;e.updateMatrixWorld(),S.set(0,0,1).transformDirection(e.matrixWorld),b.set(1,0,0).transformDirection(e.matrixWorld);let c;t.dot(S)>1-1e-10?c=0:(h.crossVectors(t,S),c=Math.sign(h.dot(b))*t.angleTo(S));let n;if(c>o)n=o;else if(c<i)n=i;else return;S.copy(t),z.setFromAxisAngle(b,n),S.applyQuaternion(z).normalize(),h.crossVectors(S,b).normalize(),k.makeBasis(b,h,S),e.quaternion.setFromRotationMatrix(k);let l=null;s===R||s===T?l=H.copy(d):u&&(l=H.copy(a)),l&&(L.copy(e.matrixWorld).invert(),h.copy(l).applyMatrix4(L),e.updateMatrixWorld(),h.applyMatrix4(e.matrixWorld),j.subVectors(l,h),e.position.add(j)),e.updateMatrixWorld()}}export{R as D,Mt as E,C as N,A as Z,U as a,N as m,w as s};
//# sourceMappingURL=EnvironmentControls-BBSDix_Q.js.map
