{"version":3,"file":"projection-C9BaK7e8.js","sources":["../../../src/core/plugins/EnforceNonZeroErrorPlugin.js","../../../node_modules/@react-three/drei/web/Html.js","../../../node_modules/three-stdlib/_polyfill/uv1.js","../../../node_modules/three-stdlib/lines/LineSegmentsGeometry.js","../../../node_modules/three-stdlib/lines/LineGeometry.js","../../../node_modules/three-stdlib/lines/LineMaterial.js","../../../node_modules/three-stdlib/lines/LineSegments2.js","../../../node_modules/three-stdlib/lines/Line2.js","../../../node_modules/@react-three/drei/core/calculateScaleFactor.js","../../../node_modules/@react-three/drei/core/Line.js","../../../node_modules/@react-three/drei/web/pivotControls/context.js","../../../node_modules/@react-three/drei/web/pivotControls/AxisArrow.js","../../../node_modules/@react-three/drei/web/pivotControls/AxisRotator.js","../../../node_modules/@react-three/drei/web/pivotControls/PlaneSlider.js","../../../node_modules/@react-three/drei/web/pivotControls/ScalingSphere.js","../../../node_modules/@react-three/drei/web/pivotControls/index.js","../../r3f/plugins/ImageOverlayPlugin.jsx","../../../node_modules/three/examples/jsm/lines/LineSegmentsGeometry.js","../../../node_modules/three/examples/jsm/lines/LineMaterial.js","../../../node_modules/three/examples/jsm/lines/LineSegments2.js","../../r3f/projection.jsx"],"sourcesContent":["export class EnforceNonZeroErrorPlugin {\n\n\tconstructor() {\n\n\t\tthis.name = 'ENFORCE_NONZERO_ERROR';\n\t\tthis.priority = - Infinity;\n\t\tthis.originalError = new Map();\n\n\t}\n\n\tpreprocessNode( tile ) {\n\n\t\t// if a tile has zero error then traverse the parents and find some geometric error value in\n\t\t// the parent hierarchy to use for calculating a pseudo geometric error for this tile.\n\t\tif ( tile.geometricError === 0 ) {\n\n\t\t\tlet parent = tile.parent;\n\t\t\tlet depth = 1;\n\n\t\t\tlet targetDepth = - 1;\n\t\t\tlet targetError = Infinity;\n\t\t\twhile ( parent !== null ) {\n\n\t\t\t\tif ( parent.geometricError !== 0 && parent.geometricError < targetError ) {\n\n\t\t\t\t\ttargetError = parent.geometricError;\n\t\t\t\t\ttargetDepth = depth;\n\n\t\t\t\t}\n\n\t\t\t\tparent = parent.parent;\n\t\t\t\tdepth ++;\n\n\t\t\t}\n\n\t\t\t// find the smallest error in the parent list to avoid grabbing artificially inflated error values\n\t\t\t// for the sake of forced refinement. Then scale the error by the depth.\n\t\t\tif ( targetDepth !== - 1 ) {\n\n\t\t\t\ttile.geometricError = targetError * ( 2 ** - depth );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { Vector3, DoubleSide, OrthographicCamera, PerspectiveCamera, Vector2 } from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst v1 = /* @__PURE__ */new Vector3();\nconst v2 = /* @__PURE__ */new Vector3();\nconst v3 = /* @__PURE__ */new Vector3();\nconst v4 = /* @__PURE__ */new Vector2();\nfunction defaultCalculatePosition(el, camera, size) {\n  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  objectPos.project(camera);\n  const widthHalf = size.width / 2;\n  const heightHalf = size.height / 2;\n  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];\n}\nfunction isObjectBehindCamera(el, camera) {\n  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n  const deltaCamObj = objectPos.sub(cameraPos);\n  const camDir = camera.getWorldDirection(v3);\n  return deltaCamObj.angleTo(camDir) > Math.PI / 2;\n}\nfunction isObjectVisible(el, camera, raycaster, occlude) {\n  const elPos = v1.setFromMatrixPosition(el.matrixWorld);\n  const screenPos = elPos.clone();\n  screenPos.project(camera);\n  v4.set(screenPos.x, screenPos.y);\n  raycaster.setFromCamera(v4, camera);\n  const intersects = raycaster.intersectObjects(occlude, true);\n  if (intersects.length) {\n    const intersectionDistance = intersects[0].distance;\n    const pointDistance = elPos.distanceTo(raycaster.ray.origin);\n    return pointDistance < intersectionDistance;\n  }\n  return true;\n}\nfunction objectScale(el, camera) {\n  if (camera instanceof OrthographicCamera) {\n    return camera.zoom;\n  } else if (camera instanceof PerspectiveCamera) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    const vFOV = camera.fov * Math.PI / 180;\n    const dist = objectPos.distanceTo(cameraPos);\n    const scaleFOV = 2 * Math.tan(vFOV / 2) * dist;\n    return 1 / scaleFOV;\n  } else {\n    return 1;\n  }\n}\nfunction objectZIndex(el, camera, zIndexRange) {\n  if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    const dist = objectPos.distanceTo(cameraPos);\n    const A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);\n    const B = zIndexRange[1] - A * camera.far;\n    return Math.round(A * dist + B);\n  }\n  return undefined;\n}\nconst epsilon = value => Math.abs(value) < 1e-10 ? 0 : value;\nfunction getCSSMatrix(matrix, multipliers, prepend = '') {\n  let matrix3d = 'matrix3d(';\n  for (let i = 0; i !== 16; i++) {\n    matrix3d += epsilon(multipliers[i] * matrix.elements[i]) + (i !== 15 ? ',' : ')');\n  }\n  return prepend + matrix3d;\n}\nconst getCameraCSSMatrix = (multipliers => {\n  return matrix => getCSSMatrix(matrix, multipliers);\n})([1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1]);\nconst getObjectCSSMatrix = (scaleMultipliers => {\n  return (matrix, factor) => getCSSMatrix(matrix, scaleMultipliers(factor), 'translate(-50%,-50%)');\n})(f => [1 / f, 1 / f, 1 / f, 1, -1 / f, -1 / f, -1 / f, -1, 1 / f, 1 / f, 1 / f, 1, 1, 1, 1, 1]);\nfunction isRefObject(ref) {\n  return ref && typeof ref === 'object' && 'current' in ref;\n}\nconst Html = /* @__PURE__ */React.forwardRef(({\n  children,\n  eps = 0.001,\n  style,\n  className,\n  prepend,\n  center,\n  fullscreen,\n  portal,\n  distanceFactor,\n  sprite = false,\n  transform = false,\n  occlude,\n  onOcclude,\n  castShadow,\n  receiveShadow,\n  material,\n  geometry,\n  zIndexRange = [16777271, 0],\n  calculatePosition = defaultCalculatePosition,\n  as = 'div',\n  wrapperClass,\n  pointerEvents = 'auto',\n  ...props\n}, ref) => {\n  const {\n    gl,\n    camera,\n    scene,\n    size,\n    raycaster,\n    events,\n    viewport\n  } = useThree();\n  const [el] = React.useState(() => document.createElement(as));\n  const root = React.useRef(null);\n  const group = React.useRef(null);\n  const oldZoom = React.useRef(0);\n  const oldPosition = React.useRef([0, 0]);\n  const transformOuterRef = React.useRef(null);\n  const transformInnerRef = React.useRef(null);\n  // Append to the connected element, which makes HTML work with views\n  const target = (portal == null ? void 0 : portal.current) || events.connected || gl.domElement.parentNode;\n  const occlusionMeshRef = React.useRef(null);\n  const isMeshSizeSet = React.useRef(false);\n  const isRayCastOcclusion = React.useMemo(() => {\n    return occlude && occlude !== 'blending' || Array.isArray(occlude) && occlude.length && isRefObject(occlude[0]);\n  }, [occlude]);\n  React.useLayoutEffect(() => {\n    const el = gl.domElement;\n    if (occlude && occlude === 'blending') {\n      el.style.zIndex = `${Math.floor(zIndexRange[0] / 2)}`;\n      el.style.position = 'absolute';\n      el.style.pointerEvents = 'none';\n    } else {\n      el.style.zIndex = null;\n      el.style.position = null;\n      el.style.pointerEvents = null;\n    }\n  }, [occlude]);\n  React.useLayoutEffect(() => {\n    if (group.current) {\n      const currentRoot = root.current = ReactDOM.createRoot(el);\n      scene.updateMatrixWorld();\n      if (transform) {\n        el.style.cssText = `position:absolute;top:0;left:0;pointer-events:none;overflow:hidden;`;\n      } else {\n        const vec = calculatePosition(group.current, camera, size);\n        el.style.cssText = `position:absolute;top:0;left:0;transform:translate3d(${vec[0]}px,${vec[1]}px,0);transform-origin:0 0;`;\n      }\n      if (target) {\n        if (prepend) target.prepend(el);else target.appendChild(el);\n      }\n      return () => {\n        if (target) target.removeChild(el);\n        currentRoot.unmount();\n      };\n    }\n  }, [target, transform]);\n  React.useLayoutEffect(() => {\n    if (wrapperClass) el.className = wrapperClass;\n  }, [wrapperClass]);\n  const styles = React.useMemo(() => {\n    if (transform) {\n      return {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: size.width,\n        height: size.height,\n        transformStyle: 'preserve-3d',\n        pointerEvents: 'none'\n      };\n    } else {\n      return {\n        position: 'absolute',\n        transform: center ? 'translate3d(-50%,-50%,0)' : 'none',\n        ...(fullscreen && {\n          top: -size.height / 2,\n          left: -size.width / 2,\n          width: size.width,\n          height: size.height\n        }),\n        ...style\n      };\n    }\n  }, [style, center, fullscreen, size, transform]);\n  const transformInnerStyles = React.useMemo(() => ({\n    position: 'absolute',\n    pointerEvents\n  }), [pointerEvents]);\n  React.useLayoutEffect(() => {\n    isMeshSizeSet.current = false;\n    if (transform) {\n      var _root$current;\n      (_root$current = root.current) == null || _root$current.render(/*#__PURE__*/React.createElement(\"div\", {\n        ref: transformOuterRef,\n        style: styles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: transformInnerRef,\n        style: transformInnerStyles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        className: className,\n        style: style,\n        children: children\n      }))));\n    } else {\n      var _root$current2;\n      (_root$current2 = root.current) == null || _root$current2.render(/*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        style: styles,\n        className: className,\n        children: children\n      }));\n    }\n  });\n  const visible = React.useRef(true);\n  useFrame(gl => {\n    if (group.current) {\n      camera.updateMatrixWorld();\n      group.current.updateWorldMatrix(true, false);\n      const vec = transform ? oldPosition.current : calculatePosition(group.current, camera, size);\n      if (transform || Math.abs(oldZoom.current - camera.zoom) > eps || Math.abs(oldPosition.current[0] - vec[0]) > eps || Math.abs(oldPosition.current[1] - vec[1]) > eps) {\n        const isBehindCamera = isObjectBehindCamera(group.current, camera);\n        let raytraceTarget = false;\n        if (isRayCastOcclusion) {\n          if (Array.isArray(occlude)) {\n            raytraceTarget = occlude.map(item => item.current);\n          } else if (occlude !== 'blending') {\n            raytraceTarget = [scene];\n          }\n        }\n        const previouslyVisible = visible.current;\n        if (raytraceTarget) {\n          const isvisible = isObjectVisible(group.current, camera, raycaster, raytraceTarget);\n          visible.current = isvisible && !isBehindCamera;\n        } else {\n          visible.current = !isBehindCamera;\n        }\n        if (previouslyVisible !== visible.current) {\n          if (onOcclude) onOcclude(!visible.current);else el.style.display = visible.current ? 'block' : 'none';\n        }\n        const halfRange = Math.floor(zIndexRange[0] / 2);\n        const zRange = occlude ? isRayCastOcclusion //\n        ? [zIndexRange[0], halfRange] : [halfRange - 1, 0] : zIndexRange;\n        el.style.zIndex = `${objectZIndex(group.current, camera, zRange)}`;\n        if (transform) {\n          const [widthHalf, heightHalf] = [size.width / 2, size.height / 2];\n          const fov = camera.projectionMatrix.elements[5] * heightHalf;\n          const {\n            isOrthographicCamera,\n            top,\n            left,\n            bottom,\n            right\n          } = camera;\n          const cameraMatrix = getCameraCSSMatrix(camera.matrixWorldInverse);\n          const cameraTransform = isOrthographicCamera ? `scale(${fov})translate(${epsilon(-(right + left) / 2)}px,${epsilon((top + bottom) / 2)}px)` : `translateZ(${fov}px)`;\n          let matrix = group.current.matrixWorld;\n          if (sprite) {\n            matrix = camera.matrixWorldInverse.clone().transpose().copyPosition(matrix).scale(group.current.scale);\n            matrix.elements[3] = matrix.elements[7] = matrix.elements[11] = 0;\n            matrix.elements[15] = 1;\n          }\n          el.style.width = size.width + 'px';\n          el.style.height = size.height + 'px';\n          el.style.perspective = isOrthographicCamera ? '' : `${fov}px`;\n          if (transformOuterRef.current && transformInnerRef.current) {\n            transformOuterRef.current.style.transform = `${cameraTransform}${cameraMatrix}translate(${widthHalf}px,${heightHalf}px)`;\n            transformInnerRef.current.style.transform = getObjectCSSMatrix(matrix, 1 / ((distanceFactor || 10) / 400));\n          }\n        } else {\n          const scale = distanceFactor === undefined ? 1 : objectScale(group.current, camera) * distanceFactor;\n          el.style.transform = `translate3d(${vec[0]}px,${vec[1]}px,0) scale(${scale})`;\n        }\n        oldPosition.current = vec;\n        oldZoom.current = camera.zoom;\n      }\n    }\n    if (!isRayCastOcclusion && occlusionMeshRef.current && !isMeshSizeSet.current) {\n      if (transform) {\n        if (transformOuterRef.current) {\n          const el = transformOuterRef.current.children[0];\n          if (el != null && el.clientWidth && el != null && el.clientHeight) {\n            const {\n              isOrthographicCamera\n            } = camera;\n            if (isOrthographicCamera || geometry) {\n              if (props.scale) {\n                if (!Array.isArray(props.scale)) {\n                  occlusionMeshRef.current.scale.setScalar(1 / props.scale);\n                } else if (props.scale instanceof Vector3) {\n                  occlusionMeshRef.current.scale.copy(props.scale.clone().divideScalar(1));\n                } else {\n                  occlusionMeshRef.current.scale.set(1 / props.scale[0], 1 / props.scale[1], 1 / props.scale[2]);\n                }\n              }\n            } else {\n              const ratio = (distanceFactor || 10) / 400;\n              const w = el.clientWidth * ratio;\n              const h = el.clientHeight * ratio;\n              occlusionMeshRef.current.scale.set(w, h, 1);\n            }\n            isMeshSizeSet.current = true;\n          }\n        }\n      } else {\n        const ele = el.children[0];\n        if (ele != null && ele.clientWidth && ele != null && ele.clientHeight) {\n          const ratio = 1 / viewport.factor;\n          const w = ele.clientWidth * ratio;\n          const h = ele.clientHeight * ratio;\n          occlusionMeshRef.current.scale.set(w, h, 1);\n          isMeshSizeSet.current = true;\n        }\n        occlusionMeshRef.current.lookAt(gl.camera.position);\n      }\n    }\n  });\n  const shaders = React.useMemo(() => ({\n    vertexShader: !transform ? /* glsl */`\n          /*\n            This shader is from the THREE's SpriteMaterial.\n            We need to turn the backing plane into a Sprite\n            (make it always face the camera) if \"transfrom\"\n            is false.\n          */\n          #include <common>\n\n          void main() {\n            vec2 center = vec2(0., 1.);\n            float rotation = 0.0;\n\n            // This is somewhat arbitrary, but it seems to work well\n            // Need to figure out how to derive this dynamically if it even matters\n            float size = 0.03;\n\n            vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n            vec2 scale;\n            scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n            scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n            bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n            if ( isPerspective ) scale *= - mvPosition.z;\n\n            vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale * size;\n            vec2 rotatedPosition;\n            rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n            rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n            mvPosition.xy += rotatedPosition;\n\n            gl_Position = projectionMatrix * mvPosition;\n          }\n      ` : undefined,\n    fragmentShader: /* glsl */`\n        void main() {\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n      `\n  }), [transform]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: group\n  }), occlude && !isRayCastOcclusion && /*#__PURE__*/React.createElement(\"mesh\", {\n    castShadow: castShadow,\n    receiveShadow: receiveShadow,\n    ref: occlusionMeshRef\n  }, geometry || /*#__PURE__*/React.createElement(\"planeGeometry\", null), material || /*#__PURE__*/React.createElement(\"shaderMaterial\", {\n    side: DoubleSide,\n    vertexShader: shaders.vertexShader,\n    fragmentShader: shaders.fragmentShader\n  })));\n});\n\nexport { Html };\n","import { version } from \"./constants.js\";\nconst UV1 = version >= 125 ? \"uv1\" : \"uv2\";\nexport {\n  UV1\n};\n//# sourceMappingURL=uv1.js.map\n","import { InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Box3, Sphere, Vector3 } from \"three\";\nconst _box = /* @__PURE__ */ new Box3();\nconst _vector = /* @__PURE__ */ new Vector3();\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n  constructor() {\n    super();\n    this.isLineSegmentsGeometry = true;\n    this.type = \"LineSegmentsGeometry\";\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    this.setIndex(index);\n    this.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n    return this;\n  }\n  setPositions(array) {\n    let lineSegments;\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1);\n    this.setAttribute(\"instanceStart\", new InterleavedBufferAttribute(instanceBuffer, 3, 0));\n    this.setAttribute(\"instanceEnd\", new InterleavedBufferAttribute(instanceBuffer, 3, 3));\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  }\n  setColors(array, itemSize = 3) {\n    let colors;\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, itemSize * 2, 1);\n    this.setAttribute(\"instanceColorStart\", new InterleavedBufferAttribute(instanceColorBuffer, itemSize, 0));\n    this.setAttribute(\"instanceColorEnd\", new InterleavedBufferAttribute(instanceColorBuffer, itemSize, itemSize));\n    return this;\n  }\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry));\n    return this;\n  }\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry;\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      this.boundingBox.setFromBufferAttribute(start);\n      _box.setFromBufferAttribute(end);\n      this.boundingBox.union(_box);\n    }\n  }\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    if (this.boundingBox === null) {\n      this.computeBoundingBox();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      const center = this.boundingSphere.center;\n      this.boundingBox.getCenter(center);\n      let maxRadiusSq = 0;\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        _vector.fromBufferAttribute(end, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n      }\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error(\n          \"THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.\",\n          this\n        );\n      }\n    }\n  }\n  toJSON() {\n  }\n  applyMatrix(matrix) {\n    console.warn(\"THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().\");\n    return this.applyMatrix4(matrix);\n  }\n}\nexport {\n  LineSegmentsGeometry\n};\n//# sourceMappingURL=LineSegmentsGeometry.js.map\n","import { LineSegmentsGeometry } from \"./LineSegmentsGeometry.js\";\nclass LineGeometry extends LineSegmentsGeometry {\n  constructor() {\n    super();\n    this.isLineGeometry = true;\n    this.type = \"LineGeometry\";\n  }\n  setPositions(array) {\n    const length = array.length - 3;\n    const points = new Float32Array(2 * length);\n    for (let i = 0; i < length; i += 3) {\n      points[2 * i] = array[i];\n      points[2 * i + 1] = array[i + 1];\n      points[2 * i + 2] = array[i + 2];\n      points[2 * i + 3] = array[i + 3];\n      points[2 * i + 4] = array[i + 4];\n      points[2 * i + 5] = array[i + 5];\n    }\n    super.setPositions(points);\n    return this;\n  }\n  setColors(array, itemSize = 3) {\n    const length = array.length - itemSize;\n    const colors = new Float32Array(2 * length);\n    if (itemSize === 3) {\n      for (let i = 0; i < length; i += itemSize) {\n        colors[2 * i] = array[i];\n        colors[2 * i + 1] = array[i + 1];\n        colors[2 * i + 2] = array[i + 2];\n        colors[2 * i + 3] = array[i + 3];\n        colors[2 * i + 4] = array[i + 4];\n        colors[2 * i + 5] = array[i + 5];\n      }\n    } else {\n      for (let i = 0; i < length; i += itemSize) {\n        colors[2 * i] = array[i];\n        colors[2 * i + 1] = array[i + 1];\n        colors[2 * i + 2] = array[i + 2];\n        colors[2 * i + 3] = array[i + 3];\n        colors[2 * i + 4] = array[i + 4];\n        colors[2 * i + 5] = array[i + 5];\n        colors[2 * i + 6] = array[i + 6];\n        colors[2 * i + 7] = array[i + 7];\n      }\n    }\n    super.setColors(colors, itemSize);\n    return this;\n  }\n  fromLine(line) {\n    const geometry = line.geometry;\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n}\nexport {\n  LineGeometry\n};\n//# sourceMappingURL=LineGeometry.js.map\n","import { ShaderMaterial, UniformsUtils, UniformsLib, Vector2 } from \"three\";\nimport { version } from \"../_polyfill/constants.js\";\nclass LineMaterial extends ShaderMaterial {\n  constructor(parameters) {\n    super({\n      type: \"LineMaterial\",\n      uniforms: UniformsUtils.clone(\n        UniformsUtils.merge([\n          UniformsLib.common,\n          UniformsLib.fog,\n          {\n            worldUnits: { value: 1 },\n            linewidth: { value: 1 },\n            resolution: { value: new Vector2(1, 1) },\n            dashOffset: { value: 0 },\n            dashScale: { value: 1 },\n            dashSize: { value: 1 },\n            gapSize: { value: 1 }\n            // todo FIX - maybe change to totalSize\n          }\n        ])\n      ),\n      vertexShader: (\n        /* glsl */\n        `\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\t\t\t\t#include <clipping_planes_pars_vertex>\n\n\t\t\t\tuniform float linewidth;\n\t\t\t\tuniform vec2 resolution;\n\n\t\t\t\tattribute vec3 instanceStart;\n\t\t\t\tattribute vec3 instanceEnd;\n\n\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\tvarying vec4 vLineColor;\n\t\t\t\t\t\tattribute vec4 instanceColorStart;\n\t\t\t\t\t\tattribute vec4 instanceColorEnd;\n\t\t\t\t\t#else\n\t\t\t\t\t\tvarying vec3 vLineColor;\n\t\t\t\t\t\tattribute vec3 instanceColorStart;\n\t\t\t\t\t\tattribute vec3 instanceColorEnd;\n\t\t\t\t\t#endif\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\tvarying vec4 worldPos;\n\t\t\t\t\tvarying vec3 worldStart;\n\t\t\t\t\tvarying vec3 worldEnd;\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#else\n\n\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\tuniform float dashScale;\n\t\t\t\t\tattribute float instanceDistanceStart;\n\t\t\t\t\tattribute float instanceDistanceEnd;\n\t\t\t\t\tvarying float vLineDistance;\n\n\t\t\t\t#endif\n\n\t\t\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t\t\t// conservative estimate of the near plane\n\t\t\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#ifdef USE_COLOR\n\n\t\t\t\t\t\tvLineColor = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\t\t\t\t\t\tvUv = uv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\t\t\t// camera space\n\t\t\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\tworldStart = start.xyz;\n\t\t\t\t\t\tworldEnd = end.xyz;\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tvUv = uv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\t\t\tif ( perspective ) {\n\n\t\t\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// clip space\n\t\t\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t\t\t// ndc space\n\t\t\t\t\tvec3 ndcStart = clipStart.xyz / clipStart.w;\n\t\t\t\t\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\n\n\t\t\t\t\t// direction\n\t\t\t\t\tvec2 dir = ndcEnd.xy - ndcStart.xy;\n\n\t\t\t\t\t// account for clip-space aspect ratio\n\t\t\t\t\tdir.x *= aspect;\n\t\t\t\t\tdir = normalize( dir );\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\t// get the offset direction as perpendicular to the view vector\n\t\t\t\t\t\tvec3 worldDir = normalize( end.xyz - start.xyz );\n\t\t\t\t\t\tvec3 offset;\n\t\t\t\t\t\tif ( position.y < 0.5 ) {\n\n\t\t\t\t\t\t\toffset = normalize( cross( start.xyz, worldDir ) );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\toffset = normalize( cross( end.xyz, worldDir ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// sign flip\n\t\t\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t\t\tfloat forwardOffset = dot( worldDir, vec3( 0.0, 0.0, 1.0 ) );\n\n\t\t\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t\t\t// won't be rendering the endcaps\n\t\t\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t\t\t// extend the line bounds to encompass  endcaps\n\t\t\t\t\t\t\tstart.xyz += - worldDir * linewidth * 0.5;\n\t\t\t\t\t\t\tend.xyz += worldDir * linewidth * 0.5;\n\n\t\t\t\t\t\t\t// shift the position of the quad so it hugs the forward edge of the line\n\t\t\t\t\t\t\toffset.xy -= dir * forwardOffset;\n\t\t\t\t\t\t\toffset.z += 0.5;\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// endcaps\n\t\t\t\t\t\tif ( position.y > 1.0 || position.y < 0.0 ) {\n\n\t\t\t\t\t\t\toffset.xy += dir * 2.0 * forwardOffset;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// adjust for linewidth\n\t\t\t\t\t\toffset *= linewidth * 0.5;\n\n\t\t\t\t\t\t// set the world position\n\t\t\t\t\t\tworldPos = ( position.y < 0.5 ) ? start : end;\n\t\t\t\t\t\tworldPos.xyz += offset;\n\n\t\t\t\t\t\t// project the worldpos\n\t\t\t\t\t\tvec4 clip = projectionMatrix * worldPos;\n\n\t\t\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t\t\t// segments overlap neatly\n\t\t\t\t\t\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\n\t\t\t\t\t\tclip.z = clipPose.z * clip.w;\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\t\t\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\t\t\tdir.x /= aspect;\n\t\t\t\t\t\toffset.x /= aspect;\n\n\t\t\t\t\t\t// sign flip\n\t\t\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t\t\t// endcaps\n\t\t\t\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\t\t\t\toffset += - dir;\n\n\t\t\t\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\t\t\t\toffset += dir;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// adjust for linewidth\n\t\t\t\t\t\toffset *= linewidth;\n\n\t\t\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\t\t\toffset /= resolution.y;\n\n\t\t\t\t\t\t// select end\n\t\t\t\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t\t\t\t// back to clip space\n\t\t\t\t\t\toffset *= clip.w;\n\n\t\t\t\t\t\tclip.xy += offset;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tgl_Position = clip;\n\n\t\t\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t\t#include <clipping_planes_vertex>\n\t\t\t\t\t#include <fog_vertex>\n\n\t\t\t\t}\n\t\t\t`\n      ),\n      fragmentShader: (\n        /* glsl */\n        `\n\t\t\t\tuniform vec3 diffuse;\n\t\t\t\tuniform float opacity;\n\t\t\t\tuniform float linewidth;\n\n\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\tuniform float dashOffset;\n\t\t\t\t\tuniform float dashSize;\n\t\t\t\t\tuniform float gapSize;\n\n\t\t\t\t#endif\n\n\t\t\t\tvarying float vLineDistance;\n\n\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\tvarying vec4 worldPos;\n\t\t\t\t\tvarying vec3 worldStart;\n\t\t\t\t\tvarying vec3 worldEnd;\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#else\n\n\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#endif\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <clipping_planes_pars_fragment>\n\n\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\tvarying vec4 vLineColor;\n\t\t\t\t\t#else\n\t\t\t\t\t\tvarying vec3 vLineColor;\n\t\t\t\t\t#endif\n\t\t\t\t#endif\n\n\t\t\t\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\n\n\t\t\t\t\tfloat mua;\n\t\t\t\t\tfloat mub;\n\n\t\t\t\t\tvec3 p13 = p1 - p3;\n\t\t\t\t\tvec3 p43 = p4 - p3;\n\n\t\t\t\t\tvec3 p21 = p2 - p1;\n\n\t\t\t\t\tfloat d1343 = dot( p13, p43 );\n\t\t\t\t\tfloat d4321 = dot( p43, p21 );\n\t\t\t\t\tfloat d1321 = dot( p13, p21 );\n\t\t\t\t\tfloat d4343 = dot( p43, p43 );\n\t\t\t\t\tfloat d2121 = dot( p21, p21 );\n\n\t\t\t\t\tfloat denom = d2121 * d4343 - d4321 * d4321;\n\n\t\t\t\t\tfloat numer = d1343 * d4321 - d1321 * d4343;\n\n\t\t\t\t\tmua = numer / denom;\n\t\t\t\t\tmua = clamp( mua, 0.0, 1.0 );\n\t\t\t\t\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\n\t\t\t\t\tmub = clamp( mub, 0.0, 1.0 );\n\n\t\t\t\t\treturn vec2( mua, mub );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tfloat alpha = opacity;\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\t\t\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\n\t\t\t\t\t\tvec3 lineDir = worldEnd - worldStart;\n\t\t\t\t\t\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\n\n\t\t\t\t\t\tvec3 p1 = worldStart + lineDir * params.x;\n\t\t\t\t\t\tvec3 p2 = rayEnd * params.y;\n\t\t\t\t\t\tvec3 delta = p1 - p2;\n\t\t\t\t\t\tfloat len = length( delta );\n\t\t\t\t\t\tfloat norm = len / linewidth;\n\n\t\t\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\t\t\tfloat dnorm = fwidth( norm );\n\t\t\t\t\t\t\t\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\n\n\t\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t\tif ( norm > 0.5 ) {\n\n\t\t\t\t\t\t\t\t\tdiscard;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\t\t// artifacts appear on some hardware if a derivative is taken within a conditional\n\t\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\t\t\t\t\t\t\tfloat dlen = fwidth( len2 );\n\n\t\t\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\t\t\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\t\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tvec4 diffuseColor = vec4( diffuse, alpha );\n\t\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\t\tdiffuseColor *= vLineColor;\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tdiffuseColor.rgb *= vLineColor;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\t\t\tgl_FragColor = diffuseColor;\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <${version >= 154 ? \"colorspace_fragment\" : \"encodings_fragment\"}>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t\t\t}\n\t\t\t`\n      ),\n      clipping: true\n      // required for clipping support\n    });\n    this.isLineMaterial = true;\n    this.onBeforeCompile = function() {\n      if (this.transparent) {\n        this.defines.USE_LINE_COLOR_ALPHA = \"1\";\n      } else {\n        delete this.defines.USE_LINE_COLOR_ALPHA;\n      }\n    };\n    Object.defineProperties(this, {\n      color: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.diffuse.value;\n        },\n        set: function(value) {\n          this.uniforms.diffuse.value = value;\n        }\n      },\n      worldUnits: {\n        enumerable: true,\n        get: function() {\n          return \"WORLD_UNITS\" in this.defines;\n        },\n        set: function(value) {\n          if (value === true) {\n            this.defines.WORLD_UNITS = \"\";\n          } else {\n            delete this.defines.WORLD_UNITS;\n          }\n        }\n      },\n      linewidth: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.linewidth.value;\n        },\n        set: function(value) {\n          this.uniforms.linewidth.value = value;\n        }\n      },\n      dashed: {\n        enumerable: true,\n        get: function() {\n          return Boolean(\"USE_DASH\" in this.defines);\n        },\n        set(value) {\n          if (Boolean(value) !== Boolean(\"USE_DASH\" in this.defines)) {\n            this.needsUpdate = true;\n          }\n          if (value === true) {\n            this.defines.USE_DASH = \"\";\n          } else {\n            delete this.defines.USE_DASH;\n          }\n        }\n      },\n      dashScale: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashScale.value;\n        },\n        set: function(value) {\n          this.uniforms.dashScale.value = value;\n        }\n      },\n      dashSize: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashSize.value;\n        },\n        set: function(value) {\n          this.uniforms.dashSize.value = value;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashOffset.value;\n        },\n        set: function(value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      gapSize: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.gapSize.value;\n        },\n        set: function(value) {\n          this.uniforms.gapSize.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.opacity.value;\n        },\n        set: function(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.resolution.value;\n        },\n        set: function(value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      alphaToCoverage: {\n        enumerable: true,\n        get: function() {\n          return Boolean(\"USE_ALPHA_TO_COVERAGE\" in this.defines);\n        },\n        set: function(value) {\n          if (Boolean(value) !== Boolean(\"USE_ALPHA_TO_COVERAGE\" in this.defines)) {\n            this.needsUpdate = true;\n          }\n          if (value === true) {\n            this.defines.USE_ALPHA_TO_COVERAGE = \"\";\n            this.extensions.derivatives = true;\n          } else {\n            delete this.defines.USE_ALPHA_TO_COVERAGE;\n            this.extensions.derivatives = false;\n          }\n        }\n      }\n    });\n    this.setValues(parameters);\n  }\n}\nexport {\n  LineMaterial\n};\n//# sourceMappingURL=LineMaterial.js.map\n","import { Mesh, InstancedInterleavedBuffer, InterleavedBufferAttribute, Vector4, Vector3, Box3, Sphere, MathUtils, Matrix4, Line3 } from \"three\";\nimport { LineSegmentsGeometry } from \"./LineSegmentsGeometry.js\";\nimport { LineMaterial } from \"./LineMaterial.js\";\nimport { UV1 } from \"../_polyfill/uv1.js\";\nconst _viewport = /* @__PURE__ */ new Vector4();\nconst _start = /* @__PURE__ */ new Vector3();\nconst _end = /* @__PURE__ */ new Vector3();\nconst _start4 = /* @__PURE__ */ new Vector4();\nconst _end4 = /* @__PURE__ */ new Vector4();\nconst _ssOrigin = /* @__PURE__ */ new Vector4();\nconst _ssOrigin3 = /* @__PURE__ */ new Vector3();\nconst _mvMatrix = /* @__PURE__ */ new Matrix4();\nconst _line = /* @__PURE__ */ new Line3();\nconst _closestPoint = /* @__PURE__ */ new Vector3();\nconst _box = /* @__PURE__ */ new Box3();\nconst _sphere = /* @__PURE__ */ new Sphere();\nconst _clipToWorldVector = /* @__PURE__ */ new Vector4();\nlet _ray, _lineWidth;\nfunction getWorldSpaceHalfWidth(camera, distance, resolution) {\n  _clipToWorldVector.set(0, 0, -distance, 1).applyMatrix4(camera.projectionMatrix);\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n  _clipToWorldVector.x = _lineWidth / resolution.width;\n  _clipToWorldVector.y = _lineWidth / resolution.height;\n  _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse);\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n  return Math.abs(Math.max(_clipToWorldVector.x, _clipToWorldVector.y));\n}\nfunction raycastWorldUnits(lineSegments, intersects) {\n  const matrixWorld = lineSegments.matrixWorld;\n  const geometry = lineSegments.geometry;\n  const instanceStart = geometry.attributes.instanceStart;\n  const instanceEnd = geometry.attributes.instanceEnd;\n  const segmentCount = Math.min(geometry.instanceCount, instanceStart.count);\n  for (let i = 0, l = segmentCount; i < l; i++) {\n    _line.start.fromBufferAttribute(instanceStart, i);\n    _line.end.fromBufferAttribute(instanceEnd, i);\n    _line.applyMatrix4(matrixWorld);\n    const pointOnLine = new Vector3();\n    const point = new Vector3();\n    _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n    const isInside = point.distanceTo(pointOnLine) < _lineWidth * 0.5;\n    if (isInside) {\n      intersects.push({\n        point,\n        pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        [UV1]: null\n      });\n    }\n  }\n}\nfunction raycastScreenSpace(lineSegments, camera, intersects) {\n  const projectionMatrix = camera.projectionMatrix;\n  const material = lineSegments.material;\n  const resolution = material.resolution;\n  const matrixWorld = lineSegments.matrixWorld;\n  const geometry = lineSegments.geometry;\n  const instanceStart = geometry.attributes.instanceStart;\n  const instanceEnd = geometry.attributes.instanceEnd;\n  const segmentCount = Math.min(geometry.instanceCount, instanceStart.count);\n  const near = -camera.near;\n  _ray.at(1, _ssOrigin);\n  _ssOrigin.w = 1;\n  _ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n  _ssOrigin.applyMatrix4(projectionMatrix);\n  _ssOrigin.multiplyScalar(1 / _ssOrigin.w);\n  _ssOrigin.x *= resolution.x / 2;\n  _ssOrigin.y *= resolution.y / 2;\n  _ssOrigin.z = 0;\n  _ssOrigin3.copy(_ssOrigin);\n  _mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n  for (let i = 0, l = segmentCount; i < l; i++) {\n    _start4.fromBufferAttribute(instanceStart, i);\n    _end4.fromBufferAttribute(instanceEnd, i);\n    _start4.w = 1;\n    _end4.w = 1;\n    _start4.applyMatrix4(_mvMatrix);\n    _end4.applyMatrix4(_mvMatrix);\n    const isBehindCameraNear = _start4.z > near && _end4.z > near;\n    if (isBehindCameraNear) {\n      continue;\n    }\n    if (_start4.z > near) {\n      const deltaDist = _start4.z - _end4.z;\n      const t = (_start4.z - near) / deltaDist;\n      _start4.lerp(_end4, t);\n    } else if (_end4.z > near) {\n      const deltaDist = _end4.z - _start4.z;\n      const t = (_end4.z - near) / deltaDist;\n      _end4.lerp(_start4, t);\n    }\n    _start4.applyMatrix4(projectionMatrix);\n    _end4.applyMatrix4(projectionMatrix);\n    _start4.multiplyScalar(1 / _start4.w);\n    _end4.multiplyScalar(1 / _end4.w);\n    _start4.x *= resolution.x / 2;\n    _start4.y *= resolution.y / 2;\n    _end4.x *= resolution.x / 2;\n    _end4.y *= resolution.y / 2;\n    _line.start.copy(_start4);\n    _line.start.z = 0;\n    _line.end.copy(_end4);\n    _line.end.z = 0;\n    const param = _line.closestPointToPointParameter(_ssOrigin3, true);\n    _line.at(param, _closestPoint);\n    const zPos = MathUtils.lerp(_start4.z, _end4.z, param);\n    const isInClipSpace = zPos >= -1 && zPos <= 1;\n    const isInside = _ssOrigin3.distanceTo(_closestPoint) < _lineWidth * 0.5;\n    if (isInClipSpace && isInside) {\n      _line.start.fromBufferAttribute(instanceStart, i);\n      _line.end.fromBufferAttribute(instanceEnd, i);\n      _line.start.applyMatrix4(matrixWorld);\n      _line.end.applyMatrix4(matrixWorld);\n      const pointOnLine = new Vector3();\n      const point = new Vector3();\n      _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n      intersects.push({\n        point,\n        pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        [UV1]: null\n      });\n    }\n  }\n}\nclass LineSegments2 extends Mesh {\n  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({ color: Math.random() * 16777215 })) {\n    super(geometry, material);\n    this.isLineSegments2 = true;\n    this.type = \"LineSegments2\";\n  }\n  // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n  computeLineDistances() {\n    const geometry = this.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const lineDistances = new Float32Array(2 * instanceStart.count);\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i);\n      _end.fromBufferAttribute(instanceEnd, i);\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n    }\n    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1);\n    geometry.setAttribute(\"instanceDistanceStart\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));\n    geometry.setAttribute(\"instanceDistanceEnd\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));\n    return this;\n  }\n  raycast(raycaster, intersects) {\n    const worldUnits = this.material.worldUnits;\n    const camera = raycaster.camera;\n    if (camera === null && !worldUnits) {\n      console.error(\n        'LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.'\n      );\n    }\n    const threshold = raycaster.params.Line2 !== void 0 ? raycaster.params.Line2.threshold || 0 : 0;\n    _ray = raycaster.ray;\n    const matrixWorld = this.matrixWorld;\n    const geometry = this.geometry;\n    const material = this.material;\n    _lineWidth = material.linewidth + threshold;\n    if (geometry.boundingSphere === null) {\n      geometry.computeBoundingSphere();\n    }\n    _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);\n    let sphereMargin;\n    if (worldUnits) {\n      sphereMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToSphere = Math.max(camera.near, _sphere.distanceToPoint(_ray.origin));\n      sphereMargin = getWorldSpaceHalfWidth(camera, distanceToSphere, material.resolution);\n    }\n    _sphere.radius += sphereMargin;\n    if (_ray.intersectsSphere(_sphere) === false) {\n      return;\n    }\n    if (geometry.boundingBox === null) {\n      geometry.computeBoundingBox();\n    }\n    _box.copy(geometry.boundingBox).applyMatrix4(matrixWorld);\n    let boxMargin;\n    if (worldUnits) {\n      boxMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToBox = Math.max(camera.near, _box.distanceToPoint(_ray.origin));\n      boxMargin = getWorldSpaceHalfWidth(camera, distanceToBox, material.resolution);\n    }\n    _box.expandByScalar(boxMargin);\n    if (_ray.intersectsBox(_box) === false) {\n      return;\n    }\n    if (worldUnits) {\n      raycastWorldUnits(this, intersects);\n    } else {\n      raycastScreenSpace(this, camera, intersects);\n    }\n  }\n  onBeforeRender(renderer) {\n    const uniforms = this.material.uniforms;\n    if (uniforms && uniforms.resolution) {\n      renderer.getViewport(_viewport);\n      this.material.uniforms.resolution.value.set(_viewport.z, _viewport.w);\n    }\n  }\n}\nexport {\n  LineSegments2\n};\n//# sourceMappingURL=LineSegments2.js.map\n","import { LineSegments2 } from \"./LineSegments2.js\";\nimport { LineGeometry } from \"./LineGeometry.js\";\nimport { LineMaterial } from \"./LineMaterial.js\";\nclass Line2 extends LineSegments2 {\n  constructor(geometry = new LineGeometry(), material = new LineMaterial({ color: Math.random() * 16777215 })) {\n    super(geometry, material);\n    this.isLine2 = true;\n    this.type = \"Line2\";\n  }\n}\nexport {\n  Line2\n};\n//# sourceMappingURL=Line2.js.map\n","import * as THREE from 'three';\n\nconst tV0 = /* @__PURE__ */new THREE.Vector3();\nconst tV1 = /* @__PURE__ */new THREE.Vector3();\nconst tV2 = /* @__PURE__ */new THREE.Vector3();\nconst getPoint2 = (point3, camera, size) => {\n  const widthHalf = size.width / 2;\n  const heightHalf = size.height / 2;\n  camera.updateMatrixWorld(false);\n  const vector = point3.project(camera);\n  vector.x = vector.x * widthHalf + widthHalf;\n  vector.y = -(vector.y * heightHalf) + heightHalf;\n  return vector;\n};\nconst getPoint3 = (point2, camera, size, zValue = 1) => {\n  const vector = tV0.set(point2.x / size.width * 2 - 1, -(point2.y / size.height) * 2 + 1, zValue);\n  vector.unproject(camera);\n  return vector;\n};\nconst calculateScaleFactor = (point3, radiusPx, camera, size) => {\n  const point2 = getPoint2(tV2.copy(point3), camera, size);\n  let scale = 0;\n  for (let i = 0; i < 2; ++i) {\n    const point2off = tV1.copy(point2).setComponent(i, point2.getComponent(i) + radiusPx);\n    const point3off = getPoint3(point2off, camera, size, point2off.z);\n    scale = Math.max(scale, point3.distanceTo(point3off));\n  }\n  return scale;\n};\n\nexport { calculateScaleFactor };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, Vector4, Vector2, Color } from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { LineSegments2, Line2, LineMaterial, LineSegmentsGeometry, LineGeometry } from 'three-stdlib';\n\nconst Line = /* @__PURE__ */React.forwardRef(function Line({\n  points,\n  color = 0xffffff,\n  vertexColors,\n  linewidth,\n  lineWidth,\n  segments,\n  dashed,\n  ...rest\n}, ref) {\n  var _vertexColors$, _ref;\n  const size = useThree(state => state.size);\n  const line2 = React.useMemo(() => segments ? new LineSegments2() : new Line2(), [segments]);\n  const [lineMaterial] = React.useState(() => new LineMaterial());\n  const itemSize = (vertexColors == null || (_vertexColors$ = vertexColors[0]) == null ? void 0 : _vertexColors$.length) === 4 ? 4 : 3;\n  const lineGeom = React.useMemo(() => {\n    const geom = segments ? new LineSegmentsGeometry() : new LineGeometry();\n    const pValues = points.map(p => {\n      const isArray = Array.isArray(p);\n      return p instanceof Vector3 || p instanceof Vector4 ? [p.x, p.y, p.z] : p instanceof Vector2 ? [p.x, p.y, 0] : isArray && p.length === 3 ? [p[0], p[1], p[2]] : isArray && p.length === 2 ? [p[0], p[1], 0] : p;\n    });\n    geom.setPositions(pValues.flat());\n    if (vertexColors) {\n      // using vertexColors requires the color value to be white see #1813\n      color = 0xffffff;\n      const cValues = vertexColors.map(c => c instanceof Color ? c.toArray() : c);\n      geom.setColors(cValues.flat(), itemSize);\n    }\n    return geom;\n  }, [points, segments, vertexColors, itemSize]);\n  React.useLayoutEffect(() => {\n    line2.computeLineDistances();\n  }, [points, line2]);\n  React.useLayoutEffect(() => {\n    if (dashed) {\n      lineMaterial.defines.USE_DASH = '';\n    } else {\n      // Setting lineMaterial.defines.USE_DASH to undefined is apparently not sufficient.\n      delete lineMaterial.defines.USE_DASH;\n    }\n    lineMaterial.needsUpdate = true;\n  }, [dashed, lineMaterial]);\n  React.useEffect(() => {\n    return () => {\n      lineGeom.dispose();\n      lineMaterial.dispose();\n    };\n  }, [lineGeom]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: line2,\n    ref: ref\n  }, rest), /*#__PURE__*/React.createElement(\"primitive\", {\n    object: lineGeom,\n    attach: \"geometry\"\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: lineMaterial,\n    attach: \"material\",\n    color: color,\n    vertexColors: Boolean(vertexColors),\n    resolution: [size.width, size.height],\n    linewidth: (_ref = linewidth !== null && linewidth !== void 0 ? linewidth : lineWidth) !== null && _ref !== void 0 ? _ref : 1,\n    dashed: dashed,\n    transparent: itemSize === 4\n  }, rest)));\n});\n\nexport { Line };\n","import * as React from 'react';\n\nconst context = /* @__PURE__ */React.createContext(null);\n\nexport { context };\n","import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Line } from '../../core/Line.js';\nimport { Html } from '../Html.js';\nimport { context } from './context.js';\n\nconst vec1 = /* @__PURE__ */new THREE.Vector3();\nconst vec2 = /* @__PURE__ */new THREE.Vector3();\nconst calculateOffset = (clickPoint, normal, rayStart, rayDir) => {\n  const e1 = normal.dot(normal);\n  const e2 = normal.dot(clickPoint) - normal.dot(rayStart);\n  const e3 = normal.dot(rayDir);\n  if (e3 === 0) {\n    return -e2 / e1;\n  }\n  vec1.copy(rayDir).multiplyScalar(e1 / e3).sub(normal);\n  vec2.copy(rayDir).multiplyScalar(e2 / e3).add(rayStart).sub(clickPoint);\n  const offset = -vec1.dot(vec2) / vec1.dot(vec1);\n  return offset;\n};\nconst upV = /* @__PURE__ */new THREE.Vector3(0, 1, 0);\nconst offsetMatrix = /* @__PURE__ */new THREE.Matrix4();\nconst AxisArrow = ({\n  direction,\n  axis\n}) => {\n  const {\n    translation,\n    translationLimits,\n    annotations,\n    annotationsClass,\n    depthTest,\n    scale,\n    lineWidth,\n    fixed,\n    axisColors,\n    hoveredColor,\n    opacity,\n    renderOrder,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    userData\n  } = React.useContext(context);\n  const camControls = useThree(state => state.controls);\n  const divRef = React.useRef(null);\n  const objRef = React.useRef(null);\n  const clickInfo = React.useRef(null);\n  const offset0 = React.useRef(0);\n  const [isHovered, setIsHovered] = React.useState(false);\n  const onPointerDown = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.innerText = `${translation.current[axis].toFixed(2)}`;\n      divRef.current.style.display = 'block';\n    }\n    e.stopPropagation();\n    const rotation = new THREE.Matrix4().extractRotation(objRef.current.matrixWorld);\n    const clickPoint = e.point.clone();\n    const origin = new THREE.Vector3().setFromMatrixPosition(objRef.current.matrixWorld);\n    const dir = direction.clone().applyMatrix4(rotation).normalize();\n    clickInfo.current = {\n      clickPoint,\n      dir\n    };\n    offset0.current = translation.current[axis];\n    onDragStart({\n      component: 'Arrow',\n      axis,\n      origin,\n      directions: [dir]\n    });\n    camControls && (camControls.enabled = false);\n    // @ts-ignore - setPointerCapture is not in the type definition\n    e.target.setPointerCapture(e.pointerId);\n  }, [annotations, direction, camControls, onDragStart, translation, axis]);\n  const onPointerMove = React.useCallback(e => {\n    e.stopPropagation();\n    if (!isHovered) setIsHovered(true);\n    if (clickInfo.current) {\n      const {\n        clickPoint,\n        dir\n      } = clickInfo.current;\n      const [min, max] = (translationLimits == null ? void 0 : translationLimits[axis]) || [undefined, undefined];\n      let offset = calculateOffset(clickPoint, dir, e.ray.origin, e.ray.direction);\n      if (min !== undefined) {\n        offset = Math.max(offset, min - offset0.current);\n      }\n      if (max !== undefined) {\n        offset = Math.min(offset, max - offset0.current);\n      }\n      translation.current[axis] = offset0.current + offset;\n      if (annotations) {\n        divRef.current.innerText = `${translation.current[axis].toFixed(2)}`;\n      }\n      offsetMatrix.makeTranslation(dir.x * offset, dir.y * offset, dir.z * offset);\n      onDrag(offsetMatrix);\n    }\n  }, [annotations, onDrag, isHovered, translation, translationLimits, axis]);\n  const onPointerUp = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.style.display = 'none';\n    }\n    e.stopPropagation();\n    clickInfo.current = null;\n    onDragEnd();\n    camControls && (camControls.enabled = true);\n    // @ts-ignore - releasePointerCapture & PointerEvent#pointerId is not in the type definition\n    e.target.releasePointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragEnd]);\n  const onPointerOut = React.useCallback(e => {\n    e.stopPropagation();\n    setIsHovered(false);\n  }, []);\n  const {\n    cylinderLength,\n    coneWidth,\n    coneLength,\n    matrixL\n  } = React.useMemo(() => {\n    const coneWidth = fixed ? lineWidth / scale * 1.6 : scale / 20;\n    const coneLength = fixed ? 0.2 : scale / 5;\n    const cylinderLength = fixed ? 1 - coneLength : scale - coneLength;\n    const quaternion = new THREE.Quaternion().setFromUnitVectors(upV, direction.clone().normalize());\n    const matrixL = new THREE.Matrix4().makeRotationFromQuaternion(quaternion);\n    return {\n      cylinderLength,\n      coneWidth,\n      coneLength,\n      matrixL\n    };\n  }, [direction, scale, lineWidth, fixed]);\n  const color_ = isHovered ? hoveredColor : axisColors[axis];\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: objRef\n  }, /*#__PURE__*/React.createElement(\"group\", {\n    matrix: matrixL,\n    matrixAutoUpdate: false,\n    onPointerDown: onPointerDown,\n    onPointerMove: onPointerMove,\n    onPointerUp: onPointerUp,\n    onPointerOut: onPointerOut\n  }, annotations && /*#__PURE__*/React.createElement(Html, {\n    position: [0, -coneLength, 0]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'none',\n      background: '#151520',\n      color: 'white',\n      padding: '6px 8px',\n      borderRadius: 7,\n      whiteSpace: 'nowrap'\n    },\n    className: annotationsClass,\n    ref: divRef\n  })), /*#__PURE__*/React.createElement(\"mesh\", {\n    visible: false,\n    position: [0, (cylinderLength + coneLength) / 2.0, 0],\n    userData: userData\n  }, /*#__PURE__*/React.createElement(\"cylinderGeometry\", {\n    args: [coneWidth * 1.4, coneWidth * 1.4, cylinderLength + coneLength, 8, 1]\n  })), /*#__PURE__*/React.createElement(Line, {\n    transparent: true,\n    raycast: () => null,\n    depthTest: depthTest,\n    points: [0, 0, 0, 0, cylinderLength, 0],\n    lineWidth: lineWidth,\n    side: THREE.DoubleSide,\n    color: color_,\n    opacity: opacity,\n    polygonOffset: true,\n    renderOrder: 1,\n    polygonOffsetFactor: -10,\n    fog: false\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    raycast: () => null,\n    position: [0, cylinderLength + coneLength / 2.0, 0],\n    renderOrder: renderOrder\n  }, /*#__PURE__*/React.createElement(\"coneGeometry\", {\n    args: [coneWidth, coneLength, 24, 1]\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    transparent: true,\n    depthTest: depthTest,\n    color: color_,\n    opacity: opacity,\n    polygonOffset: true,\n    polygonOffsetFactor: -10,\n    fog: false\n  }))));\n};\n\nexport { AxisArrow, calculateOffset };\n","import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Line } from '../../core/Line.js';\nimport { Html } from '../Html.js';\nimport { context } from './context.js';\n\nconst clickDir = /* @__PURE__ */new THREE.Vector3();\nconst intersectionDir = /* @__PURE__ */new THREE.Vector3();\nconst toDegrees = radians => radians * 180 / Math.PI;\nconst toRadians = degrees => degrees * Math.PI / 180;\nconst calculateAngle = (clickPoint, intersectionPoint, origin, e1, e2) => {\n  clickDir.copy(clickPoint).sub(origin);\n  intersectionDir.copy(intersectionPoint).sub(origin);\n  const dote1e1 = e1.dot(e1);\n  const dote2e2 = e2.dot(e2);\n  const uClick = clickDir.dot(e1) / dote1e1;\n  const vClick = clickDir.dot(e2) / dote2e2;\n  const uIntersection = intersectionDir.dot(e1) / dote1e1;\n  const vIntersection = intersectionDir.dot(e2) / dote2e2;\n  const angleClick = Math.atan2(vClick, uClick);\n  const angleIntersection = Math.atan2(vIntersection, uIntersection);\n  return angleIntersection - angleClick;\n};\nconst fmod = (num, denom) => {\n  let k = Math.floor(num / denom);\n  k = k < 0 ? k + 1 : k;\n  return num - k * denom;\n};\nconst minimizeAngle = angle => {\n  let result = fmod(angle, 2 * Math.PI);\n  if (Math.abs(result) < 1e-6) {\n    return 0.0;\n  }\n  if (result < 0.0) {\n    result += 2 * Math.PI;\n  }\n  return result;\n};\nconst rotMatrix = /* @__PURE__ */new THREE.Matrix4();\nconst posNew = /* @__PURE__ */new THREE.Vector3();\nconst ray = /* @__PURE__ */new THREE.Ray();\nconst intersection = /* @__PURE__ */new THREE.Vector3();\nconst AxisRotator = ({\n  dir1,\n  dir2,\n  axis\n}) => {\n  const {\n    rotationLimits,\n    annotations,\n    annotationsClass,\n    depthTest,\n    scale,\n    lineWidth,\n    fixed,\n    axisColors,\n    hoveredColor,\n    renderOrder,\n    opacity,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    userData\n  } = React.useContext(context);\n  const camControls = useThree(state => state.controls);\n  const divRef = React.useRef(null);\n  const objRef = React.useRef(null);\n  const angle0 = React.useRef(0);\n  const angle = React.useRef(0);\n  const clickInfo = React.useRef(null);\n  const [isHovered, setIsHovered] = React.useState(false);\n  const onPointerDown = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.innerText = `${toDegrees(angle.current).toFixed(0)}º`;\n      divRef.current.style.display = 'block';\n    }\n    e.stopPropagation();\n    const clickPoint = e.point.clone();\n    const origin = new THREE.Vector3().setFromMatrixPosition(objRef.current.matrixWorld);\n    const e1 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 0).normalize();\n    const e2 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 1).normalize();\n    const normal = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 2).normalize();\n    const plane = new THREE.Plane().setFromNormalAndCoplanarPoint(normal, origin);\n    clickInfo.current = {\n      clickPoint,\n      origin,\n      e1,\n      e2,\n      normal,\n      plane\n    };\n    onDragStart({\n      component: 'Rotator',\n      axis,\n      origin,\n      directions: [e1, e2, normal]\n    });\n    camControls && (camControls.enabled = false);\n    // @ts-ignore\n    e.target.setPointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragStart, axis]);\n  const onPointerMove = React.useCallback(e => {\n    e.stopPropagation();\n    if (!isHovered) setIsHovered(true);\n    if (clickInfo.current) {\n      const {\n        clickPoint,\n        origin,\n        e1,\n        e2,\n        normal,\n        plane\n      } = clickInfo.current;\n      const [min, max] = (rotationLimits == null ? void 0 : rotationLimits[axis]) || [undefined, undefined];\n      ray.copy(e.ray);\n      ray.intersectPlane(plane, intersection);\n      ray.direction.negate();\n      ray.intersectPlane(plane, intersection);\n      let deltaAngle = calculateAngle(clickPoint, intersection, origin, e1, e2);\n      let degrees = toDegrees(deltaAngle);\n\n      // @ts-ignore\n      if (e.shiftKey) {\n        degrees = Math.round(degrees / 10) * 10;\n        deltaAngle = toRadians(degrees);\n      }\n      if (min !== undefined && max !== undefined && max - min < 2 * Math.PI) {\n        deltaAngle = minimizeAngle(deltaAngle);\n        deltaAngle = deltaAngle > Math.PI ? deltaAngle - 2 * Math.PI : deltaAngle;\n        deltaAngle = THREE.MathUtils.clamp(deltaAngle, min - angle0.current, max - angle0.current);\n        angle.current = angle0.current + deltaAngle;\n      } else {\n        angle.current = minimizeAngle(angle0.current + deltaAngle);\n        angle.current = angle.current > Math.PI ? angle.current - 2 * Math.PI : angle.current;\n      }\n      if (annotations) {\n        degrees = toDegrees(angle.current);\n        divRef.current.innerText = `${degrees.toFixed(0)}º`;\n      }\n      rotMatrix.makeRotationAxis(normal, deltaAngle);\n      posNew.copy(origin).applyMatrix4(rotMatrix).sub(origin).negate();\n      rotMatrix.setPosition(posNew);\n      onDrag(rotMatrix);\n    }\n  }, [annotations, onDrag, isHovered, rotationLimits, axis]);\n  const onPointerUp = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.style.display = 'none';\n    }\n    e.stopPropagation();\n    angle0.current = angle.current;\n    clickInfo.current = null;\n    onDragEnd();\n    camControls && (camControls.enabled = true);\n    // @ts-ignore\n    e.target.releasePointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragEnd]);\n  const onPointerOut = React.useCallback(e => {\n    e.stopPropagation();\n    setIsHovered(false);\n  }, []);\n  const matrixL = React.useMemo(() => {\n    const dir1N = dir1.clone().normalize();\n    const dir2N = dir2.clone().normalize();\n    return new THREE.Matrix4().makeBasis(dir1N, dir2N, dir1N.clone().cross(dir2N));\n  }, [dir1, dir2]);\n  const r = fixed ? 0.65 : scale * 0.65;\n  const arc = React.useMemo(() => {\n    const segments = 32;\n    const points = [];\n    for (let j = 0; j <= segments; j++) {\n      const angle = j * (Math.PI / 2) / segments;\n      points.push(new THREE.Vector3(Math.cos(angle) * r, Math.sin(angle) * r, 0));\n    }\n    return points;\n  }, [r]);\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: objRef,\n    onPointerDown: onPointerDown,\n    onPointerMove: onPointerMove,\n    onPointerUp: onPointerUp,\n    onPointerOut: onPointerOut,\n    matrix: matrixL,\n    matrixAutoUpdate: false\n  }, annotations && /*#__PURE__*/React.createElement(Html, {\n    position: [r, r, 0]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'none',\n      background: '#151520',\n      color: 'white',\n      padding: '6px 8px',\n      borderRadius: 7,\n      whiteSpace: 'nowrap'\n    },\n    className: annotationsClass,\n    ref: divRef\n  })), /*#__PURE__*/React.createElement(Line, {\n    points: arc,\n    lineWidth: lineWidth * 4,\n    visible: false,\n    userData: userData\n  }), /*#__PURE__*/React.createElement(Line, {\n    transparent: true,\n    raycast: () => null,\n    depthTest: depthTest,\n    points: arc,\n    lineWidth: lineWidth,\n    side: THREE.DoubleSide,\n    color: isHovered ? hoveredColor : axisColors[axis],\n    opacity: opacity,\n    polygonOffset: true,\n    polygonOffsetFactor: -10,\n    renderOrder: renderOrder,\n    fog: false\n  }));\n};\n\nexport { AxisRotator };\n","import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Line } from '../../core/Line.js';\nimport { Html } from '../Html.js';\nimport { context } from './context.js';\n\nconst decomposeIntoBasis = (e1, e2, offset) => {\n  const i1 = Math.abs(e1.x) >= Math.abs(e1.y) && Math.abs(e1.x) >= Math.abs(e1.z) ? 0 : Math.abs(e1.y) >= Math.abs(e1.x) && Math.abs(e1.y) >= Math.abs(e1.z) ? 1 : 2;\n  const e2DegrowthOrder = [0, 1, 2].sort((a, b) => Math.abs(e2.getComponent(b)) - Math.abs(e2.getComponent(a)));\n  const i2 = i1 === e2DegrowthOrder[0] ? e2DegrowthOrder[1] : e2DegrowthOrder[0];\n  const a1 = e1.getComponent(i1);\n  const a2 = e1.getComponent(i2);\n  const b1 = e2.getComponent(i1);\n  const b2 = e2.getComponent(i2);\n  const c1 = offset.getComponent(i1);\n  const c2 = offset.getComponent(i2);\n  const y = (c2 - c1 * (a2 / a1)) / (b2 - b1 * (a2 / a1));\n  const x = (c1 - y * b1) / a1;\n  return [x, y];\n};\nconst ray = /* @__PURE__ */new THREE.Ray();\nconst intersection = /* @__PURE__ */new THREE.Vector3();\nconst offsetMatrix = /* @__PURE__ */new THREE.Matrix4();\nconst PlaneSlider = ({\n  dir1,\n  dir2,\n  axis\n}) => {\n  const {\n    translation,\n    translationLimits,\n    annotations,\n    annotationsClass,\n    depthTest,\n    scale,\n    lineWidth,\n    fixed,\n    axisColors,\n    hoveredColor,\n    opacity,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    userData\n  } = React.useContext(context);\n  const camControls = useThree(state => state.controls);\n  const divRef = React.useRef(null);\n  const objRef = React.useRef(null);\n  const clickInfo = React.useRef(null);\n  const offsetX0 = React.useRef(0);\n  const offsetY0 = React.useRef(0);\n  const [isHovered, setIsHovered] = React.useState(false);\n  const onPointerDown = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.innerText = `${translation.current[(axis + 1) % 3].toFixed(2)}, ${translation.current[(axis + 2) % 3].toFixed(2)}`;\n      divRef.current.style.display = 'block';\n    }\n    e.stopPropagation();\n    const clickPoint = e.point.clone();\n    const origin = new THREE.Vector3().setFromMatrixPosition(objRef.current.matrixWorld);\n    const e1 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 0).normalize();\n    const e2 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 1).normalize();\n    const normal = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 2).normalize();\n    const plane = new THREE.Plane().setFromNormalAndCoplanarPoint(normal, origin);\n    clickInfo.current = {\n      clickPoint,\n      e1,\n      e2,\n      plane\n    };\n    offsetX0.current = translation.current[(axis + 1) % 3];\n    offsetY0.current = translation.current[(axis + 2) % 3];\n    onDragStart({\n      component: 'Slider',\n      axis,\n      origin,\n      directions: [e1, e2, normal]\n    });\n    camControls && (camControls.enabled = false);\n    // @ts-ignore\n    e.target.setPointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragStart, axis]);\n  const onPointerMove = React.useCallback(e => {\n    e.stopPropagation();\n    if (!isHovered) setIsHovered(true);\n    if (clickInfo.current) {\n      const {\n        clickPoint,\n        e1,\n        e2,\n        plane\n      } = clickInfo.current;\n      const [minX, maxX] = (translationLimits == null ? void 0 : translationLimits[(axis + 1) % 3]) || [undefined, undefined];\n      const [minY, maxY] = (translationLimits == null ? void 0 : translationLimits[(axis + 2) % 3]) || [undefined, undefined];\n      ray.copy(e.ray);\n      ray.intersectPlane(plane, intersection);\n      ray.direction.negate();\n      ray.intersectPlane(plane, intersection);\n      intersection.sub(clickPoint);\n      let [offsetX, offsetY] = decomposeIntoBasis(e1, e2, intersection);\n      /* let offsetY = (intersection.y - (intersection.x * e1.y) / e1.x) / (e2.y - (e2.x * e1.y) / e1.x)\n      let offsetX = (intersection.x - offsetY * e2.x) / e1.x */\n      if (minX !== undefined) {\n        offsetX = Math.max(offsetX, minX - offsetX0.current);\n      }\n      if (maxX !== undefined) {\n        offsetX = Math.min(offsetX, maxX - offsetX0.current);\n      }\n      if (minY !== undefined) {\n        offsetY = Math.max(offsetY, minY - offsetY0.current);\n      }\n      if (maxY !== undefined) {\n        offsetY = Math.min(offsetY, maxY - offsetY0.current);\n      }\n      translation.current[(axis + 1) % 3] = offsetX0.current + offsetX;\n      translation.current[(axis + 2) % 3] = offsetY0.current + offsetY;\n      if (annotations) {\n        divRef.current.innerText = `${translation.current[(axis + 1) % 3].toFixed(2)}, ${translation.current[(axis + 2) % 3].toFixed(2)}`;\n      }\n      offsetMatrix.makeTranslation(offsetX * e1.x + offsetY * e2.x, offsetX * e1.y + offsetY * e2.y, offsetX * e1.z + offsetY * e2.z);\n      onDrag(offsetMatrix);\n    }\n  }, [annotations, onDrag, isHovered, translation, translationLimits, axis]);\n  const onPointerUp = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.style.display = 'none';\n    }\n    e.stopPropagation();\n    clickInfo.current = null;\n    onDragEnd();\n    camControls && (camControls.enabled = true);\n    // @ts-ignore\n    e.target.releasePointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragEnd]);\n  const onPointerOut = React.useCallback(e => {\n    e.stopPropagation();\n    setIsHovered(false);\n  }, []);\n  const matrixL = React.useMemo(() => {\n    const dir1N = dir1.clone().normalize();\n    const dir2N = dir2.clone().normalize();\n    return new THREE.Matrix4().makeBasis(dir1N, dir2N, dir1N.clone().cross(dir2N));\n  }, [dir1, dir2]);\n  const pos1 = fixed ? 1 / 7 : scale / 7;\n  const length = fixed ? 0.225 : scale * 0.225;\n  const color = isHovered ? hoveredColor : axisColors[axis];\n  const points = React.useMemo(() => [new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, length, 0), new THREE.Vector3(length, length, 0), new THREE.Vector3(length, 0, 0), new THREE.Vector3(0, 0, 0)], [length]);\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: objRef,\n    matrix: matrixL,\n    matrixAutoUpdate: false\n  }, annotations && /*#__PURE__*/React.createElement(Html, {\n    position: [0, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'none',\n      background: '#151520',\n      color: 'white',\n      padding: '6px 8px',\n      borderRadius: 7,\n      whiteSpace: 'nowrap'\n    },\n    className: annotationsClass,\n    ref: divRef\n  })), /*#__PURE__*/React.createElement(\"group\", {\n    position: [pos1 * 1.7, pos1 * 1.7, 0]\n  }, /*#__PURE__*/React.createElement(\"mesh\", {\n    visible: true,\n    onPointerDown: onPointerDown,\n    onPointerMove: onPointerMove,\n    onPointerUp: onPointerUp,\n    onPointerOut: onPointerOut,\n    scale: length,\n    userData: userData\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    transparent: true,\n    depthTest: depthTest,\n    color: color,\n    polygonOffset: true,\n    polygonOffsetFactor: -10,\n    side: THREE.DoubleSide,\n    fog: false\n  })), /*#__PURE__*/React.createElement(Line, {\n    position: [-length / 2, -length / 2, 0],\n    transparent: true,\n    depthTest: depthTest,\n    points: points,\n    lineWidth: lineWidth,\n    color: color,\n    opacity: opacity,\n    polygonOffset: true,\n    polygonOffsetFactor: -10,\n    userData: userData,\n    fog: false\n  })));\n};\n\nexport { PlaneSlider };\n","import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Html } from '../Html.js';\nimport { context } from './context.js';\nimport { calculateScaleFactor } from '../../core/calculateScaleFactor.js';\n\nconst vec1 = /* @__PURE__ */new THREE.Vector3();\nconst vec2 = /* @__PURE__ */new THREE.Vector3();\nconst calculateOffset = (clickPoint, normal, rayStart, rayDir) => {\n  const e1 = normal.dot(normal);\n  const e2 = normal.dot(clickPoint) - normal.dot(rayStart);\n  const e3 = normal.dot(rayDir);\n  if (e3 === 0) {\n    return -e2 / e1;\n  }\n  vec1.copy(rayDir).multiplyScalar(e1 / e3).sub(normal);\n  vec2.copy(rayDir).multiplyScalar(e2 / e3).add(rayStart).sub(clickPoint);\n  const offset = -vec1.dot(vec2) / vec1.dot(vec1);\n  return offset;\n};\nconst upV = /* @__PURE__ */new THREE.Vector3(0, 1, 0);\nconst scaleV = /* @__PURE__ */new THREE.Vector3();\nconst scaleMatrix = /* @__PURE__ */new THREE.Matrix4();\nconst ScalingSphere = ({\n  direction,\n  axis\n}) => {\n  const {\n    scaleLimits,\n    annotations,\n    annotationsClass,\n    depthTest,\n    scale,\n    lineWidth,\n    fixed,\n    axisColors,\n    hoveredColor,\n    opacity,\n    renderOrder,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    userData\n  } = React.useContext(context);\n  const size = useThree(state => state.size);\n  const camControls = useThree(state => state.controls);\n  const divRef = React.useRef(null);\n  const objRef = React.useRef(null);\n  const meshRef = React.useRef(null);\n  const scale0 = React.useRef(1);\n  const scaleCur = React.useRef(1);\n  const clickInfo = React.useRef(null);\n  const [isHovered, setIsHovered] = React.useState(false);\n  const position = fixed ? 1.2 : 1.2 * scale;\n  const onPointerDown = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.innerText = `${scaleCur.current.toFixed(2)}`;\n      divRef.current.style.display = 'block';\n    }\n    e.stopPropagation();\n    const rotation = new THREE.Matrix4().extractRotation(objRef.current.matrixWorld);\n    const clickPoint = e.point.clone();\n    const origin = new THREE.Vector3().setFromMatrixPosition(objRef.current.matrixWorld);\n    const dir = direction.clone().applyMatrix4(rotation).normalize();\n    const mPLG = objRef.current.matrixWorld.clone();\n    const mPLGInv = mPLG.clone().invert();\n    const offsetMultiplier = fixed ? 1 / calculateScaleFactor(objRef.current.getWorldPosition(vec1), scale, e.camera, size) : 1;\n    clickInfo.current = {\n      clickPoint,\n      dir,\n      mPLG,\n      mPLGInv,\n      offsetMultiplier\n    };\n    onDragStart({\n      component: 'Sphere',\n      axis,\n      origin,\n      directions: [dir]\n    });\n    camControls && (camControls.enabled = false);\n    // @ts-ignore - setPointerCapture is not in the type definition\n    e.target.setPointerCapture(e.pointerId);\n  }, [annotations, camControls, direction, onDragStart, axis, fixed, scale, size]);\n  const onPointerMove = React.useCallback(e => {\n    e.stopPropagation();\n    if (!isHovered) setIsHovered(true);\n    if (clickInfo.current) {\n      const {\n        clickPoint,\n        dir,\n        mPLG,\n        mPLGInv,\n        offsetMultiplier\n      } = clickInfo.current;\n      const [min, max] = (scaleLimits == null ? void 0 : scaleLimits[axis]) || [1e-5, undefined]; // always limit the minimal value, since setting it very low might break the transform\n\n      const offsetW = calculateOffset(clickPoint, dir, e.ray.origin, e.ray.direction);\n      const offsetL = offsetW * offsetMultiplier;\n      const offsetH = fixed ? offsetL : offsetL / scale;\n      let upscale = Math.pow(2, offsetH * 0.2);\n\n      // @ts-ignore\n      if (e.shiftKey) {\n        upscale = Math.round(upscale * 10) / 10;\n      }\n      upscale = Math.max(upscale, min / scale0.current);\n      if (max !== undefined) {\n        upscale = Math.min(upscale, max / scale0.current);\n      }\n      scaleCur.current = scale0.current * upscale;\n      meshRef.current.position.set(0, position + offsetL, 0);\n      if (annotations) {\n        divRef.current.innerText = `${scaleCur.current.toFixed(2)}`;\n      }\n      scaleV.set(1, 1, 1);\n      scaleV.setComponent(axis, upscale);\n      scaleMatrix.makeScale(scaleV.x, scaleV.y, scaleV.z).premultiply(mPLG).multiply(mPLGInv);\n      onDrag(scaleMatrix);\n    }\n  }, [annotations, position, onDrag, isHovered, scaleLimits, axis]);\n  const onPointerUp = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.style.display = 'none';\n    }\n    e.stopPropagation();\n    scale0.current = scaleCur.current;\n    clickInfo.current = null;\n    meshRef.current.position.set(0, position, 0);\n    onDragEnd();\n    camControls && (camControls.enabled = true);\n    // @ts-ignore - releasePointerCapture & PointerEvent#pointerId is not in the type definition\n    e.target.releasePointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragEnd, position]);\n  const onPointerOut = React.useCallback(e => {\n    e.stopPropagation();\n    setIsHovered(false);\n  }, []);\n  const {\n    radius,\n    matrixL\n  } = React.useMemo(() => {\n    const radius = fixed ? lineWidth / scale * 1.8 : scale / 22.5;\n    const quaternion = new THREE.Quaternion().setFromUnitVectors(upV, direction.clone().normalize());\n    const matrixL = new THREE.Matrix4().makeRotationFromQuaternion(quaternion);\n    return {\n      radius,\n      matrixL\n    };\n  }, [direction, scale, lineWidth, fixed]);\n  const color = isHovered ? hoveredColor : axisColors[axis];\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: objRef\n  }, /*#__PURE__*/React.createElement(\"group\", {\n    matrix: matrixL,\n    matrixAutoUpdate: false,\n    onPointerDown: onPointerDown,\n    onPointerMove: onPointerMove,\n    onPointerUp: onPointerUp,\n    onPointerOut: onPointerOut\n  }, annotations && /*#__PURE__*/React.createElement(Html, {\n    position: [0, position / 2, 0]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'none',\n      background: '#151520',\n      color: 'white',\n      padding: '6px 8px',\n      borderRadius: 7,\n      whiteSpace: 'nowrap'\n    },\n    className: annotationsClass,\n    ref: divRef\n  })), /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: meshRef,\n    position: [0, position, 0],\n    renderOrder: renderOrder,\n    userData: userData\n  }, /*#__PURE__*/React.createElement(\"sphereGeometry\", {\n    args: [radius, 12, 12]\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    transparent: true,\n    depthTest: depthTest,\n    color: color,\n    opacity: opacity,\n    polygonOffset: true,\n    polygonOffsetFactor: -10\n  }))));\n};\n\nexport { ScalingSphere, calculateOffset };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { AxisArrow } from './AxisArrow.js';\nimport { AxisRotator } from './AxisRotator.js';\nimport { PlaneSlider } from './PlaneSlider.js';\nimport { ScalingSphere } from './ScalingSphere.js';\nimport { context } from './context.js';\nimport { calculateScaleFactor } from '../../core/calculateScaleFactor.js';\n\nconst mL0 = /* @__PURE__ */new THREE.Matrix4();\nconst mW0 = /* @__PURE__ */new THREE.Matrix4();\nconst mP = /* @__PURE__ */new THREE.Matrix4();\nconst mPInv = /* @__PURE__ */new THREE.Matrix4();\nconst mW = /* @__PURE__ */new THREE.Matrix4();\nconst mL = /* @__PURE__ */new THREE.Matrix4();\nconst mL0Inv = /* @__PURE__ */new THREE.Matrix4();\nconst mdL = /* @__PURE__ */new THREE.Matrix4();\nconst mG = /* @__PURE__ */new THREE.Matrix4();\nconst bb = /* @__PURE__ */new THREE.Box3();\nconst bbObj = /* @__PURE__ */new THREE.Box3();\nconst vCenter = /* @__PURE__ */new THREE.Vector3();\nconst vSize = /* @__PURE__ */new THREE.Vector3();\nconst vAnchorOffset = /* @__PURE__ */new THREE.Vector3();\nconst vPosition = /* @__PURE__ */new THREE.Vector3();\nconst vScale = /* @__PURE__ */new THREE.Vector3();\nconst xDir = /* @__PURE__ */new THREE.Vector3(1, 0, 0);\nconst yDir = /* @__PURE__ */new THREE.Vector3(0, 1, 0);\nconst zDir = /* @__PURE__ */new THREE.Vector3(0, 0, 1);\nconst PivotControls = /* @__PURE__ */React.forwardRef(({\n  enabled = true,\n  matrix,\n  onDragStart,\n  onDrag,\n  onDragEnd,\n  autoTransform = true,\n  anchor,\n  disableAxes = false,\n  disableSliders = false,\n  disableRotations = false,\n  disableScaling = false,\n  activeAxes = [true, true, true],\n  offset = [0, 0, 0],\n  rotation = [0, 0, 0],\n  scale = 1,\n  lineWidth = 4,\n  fixed = false,\n  translationLimits,\n  rotationLimits,\n  scaleLimits,\n  depthTest = true,\n  renderOrder = 500,\n  axisColors = ['#ff2060', '#20df80', '#2080ff'],\n  hoveredColor = '#ffff40',\n  annotations = false,\n  annotationsClass,\n  opacity = 1,\n  visible = true,\n  userData,\n  children,\n  ...props\n}, fRef) => {\n  const invalidate = useThree(state => state.invalidate);\n  const parentRef = React.useRef(null);\n  const ref = React.useRef(null);\n  const gizmoRef = React.useRef(null);\n  const childrenRef = React.useRef(null);\n  const translation = React.useRef([0, 0, 0]);\n  const cameraScale = React.useRef(new THREE.Vector3(1, 1, 1));\n  const gizmoScale = React.useRef(new THREE.Vector3(1, 1, 1));\n  React.useLayoutEffect(() => {\n    if (!anchor) return;\n    childrenRef.current.updateWorldMatrix(true, true);\n    mPInv.copy(childrenRef.current.matrixWorld).invert();\n    bb.makeEmpty();\n    childrenRef.current.traverse(obj => {\n      if (!obj.geometry) return;\n      if (!obj.geometry.boundingBox) obj.geometry.computeBoundingBox();\n      mL.copy(obj.matrixWorld).premultiply(mPInv);\n      bbObj.copy(obj.geometry.boundingBox);\n      bbObj.applyMatrix4(mL);\n      bb.union(bbObj);\n    });\n    vCenter.copy(bb.max).add(bb.min).multiplyScalar(0.5);\n    vSize.copy(bb.max).sub(bb.min).multiplyScalar(0.5);\n    vAnchorOffset.copy(vSize).multiply(new THREE.Vector3(...anchor)).add(vCenter);\n    vPosition.set(...offset).add(vAnchorOffset);\n    gizmoRef.current.position.copy(vPosition);\n    invalidate();\n  });\n  const config = React.useMemo(() => ({\n    onDragStart: props => {\n      mL0.copy(ref.current.matrix);\n      mW0.copy(ref.current.matrixWorld);\n      onDragStart && onDragStart(props);\n      invalidate();\n    },\n    onDrag: mdW => {\n      mP.copy(parentRef.current.matrixWorld);\n      mPInv.copy(mP).invert();\n      // After applying the delta\n      mW.copy(mW0).premultiply(mdW);\n      mL.copy(mW).premultiply(mPInv);\n      mL0Inv.copy(mL0).invert();\n      mdL.copy(mL).multiply(mL0Inv);\n      if (autoTransform) {\n        ref.current.matrix.copy(mL);\n      }\n      onDrag && onDrag(mL, mdL, mW, mdW);\n      invalidate();\n    },\n    onDragEnd: () => {\n      if (onDragEnd) onDragEnd();\n      invalidate();\n    },\n    translation,\n    translationLimits,\n    rotationLimits,\n    axisColors,\n    hoveredColor,\n    opacity,\n    scale,\n    lineWidth,\n    fixed,\n    depthTest,\n    renderOrder,\n    userData,\n    annotations,\n    annotationsClass\n  }), [onDragStart, onDrag, onDragEnd, translation, translationLimits, rotationLimits, scaleLimits, depthTest, scale, lineWidth, fixed, ...axisColors, hoveredColor, opacity, userData, autoTransform, annotations, annotationsClass]);\n  const vec = new THREE.Vector3();\n  useFrame(state => {\n    if (fixed) {\n      const sf = calculateScaleFactor(gizmoRef.current.getWorldPosition(vec), scale, state.camera, state.size);\n      cameraScale.current.setScalar(sf);\n    }\n    if (matrix && matrix instanceof THREE.Matrix4) {\n      ref.current.matrix = matrix;\n    }\n    // Update gizmo scale in accordance with matrix changes\n    // Without this, there might be noticable turbulences if scaling happens fast enough\n    ref.current.updateWorldMatrix(true, true);\n    mG.makeRotationFromEuler(gizmoRef.current.rotation).setPosition(gizmoRef.current.position).premultiply(ref.current.matrixWorld);\n    gizmoScale.current.setFromMatrixScale(mG);\n    vScale.copy(cameraScale.current).divide(gizmoScale.current);\n    if (Math.abs(gizmoRef.current.scale.x - vScale.x) > 1e-4 || Math.abs(gizmoRef.current.scale.y - vScale.y) > 1e-4 || Math.abs(gizmoRef.current.scale.z - vScale.z) > 1e-4) {\n      gizmoRef.current.scale.copy(vScale);\n      state.invalidate();\n    }\n  });\n  React.useImperativeHandle(fRef, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(context.Provider, {\n    value: config\n  }, /*#__PURE__*/React.createElement(\"group\", {\n    ref: parentRef\n  }, /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref,\n    matrix: matrix,\n    matrixAutoUpdate: false\n  }, props), /*#__PURE__*/React.createElement(\"group\", {\n    visible: visible,\n    ref: gizmoRef,\n    position: offset,\n    rotation: rotation\n  }, enabled && /*#__PURE__*/React.createElement(React.Fragment, null, !disableAxes && activeAxes[0] && /*#__PURE__*/React.createElement(AxisArrow, {\n    axis: 0,\n    direction: xDir\n  }), !disableAxes && activeAxes[1] && /*#__PURE__*/React.createElement(AxisArrow, {\n    axis: 1,\n    direction: yDir\n  }), !disableAxes && activeAxes[2] && /*#__PURE__*/React.createElement(AxisArrow, {\n    axis: 2,\n    direction: zDir\n  }), !disableSliders && activeAxes[0] && activeAxes[1] && /*#__PURE__*/React.createElement(PlaneSlider, {\n    axis: 2,\n    dir1: xDir,\n    dir2: yDir\n  }), !disableSliders && activeAxes[0] && activeAxes[2] && /*#__PURE__*/React.createElement(PlaneSlider, {\n    axis: 1,\n    dir1: zDir,\n    dir2: xDir\n  }), !disableSliders && activeAxes[2] && activeAxes[1] && /*#__PURE__*/React.createElement(PlaneSlider, {\n    axis: 0,\n    dir1: yDir,\n    dir2: zDir\n  }), !disableRotations && activeAxes[0] && activeAxes[1] && /*#__PURE__*/React.createElement(AxisRotator, {\n    axis: 2,\n    dir1: xDir,\n    dir2: yDir\n  }), !disableRotations && activeAxes[0] && activeAxes[2] && /*#__PURE__*/React.createElement(AxisRotator, {\n    axis: 1,\n    dir1: zDir,\n    dir2: xDir\n  }), !disableRotations && activeAxes[2] && activeAxes[1] && /*#__PURE__*/React.createElement(AxisRotator, {\n    axis: 0,\n    dir1: yDir,\n    dir2: zDir\n  }), !disableScaling && activeAxes[0] && /*#__PURE__*/React.createElement(ScalingSphere, {\n    axis: 0,\n    direction: xDir\n  }), !disableScaling && activeAxes[1] && /*#__PURE__*/React.createElement(ScalingSphere, {\n    axis: 1,\n    direction: yDir\n  }), !disableScaling && activeAxes[2] && /*#__PURE__*/React.createElement(ScalingSphere, {\n    axis: 2,\n    direction: zDir\n  }))), /*#__PURE__*/React.createElement(\"group\", {\n    ref: childrenRef\n  }, children))));\n});\n\nexport { PivotControls };\n","import { useFrame, useThree } from '@react-three/fiber';\nimport { ImageOverlayPlugin as ImageOverlayPluginImpl } from '3d-tiles-renderer/plugins';\nimport { TilesPlugin, TilesPluginContext, TilesRendererContext } from '3d-tiles-renderer/r3f';\nimport { forwardRef, useContext, useEffect, useMemo, useRef } from 'react';\nimport { Matrix4 } from 'three';\n\nexport const ImageOverlayPlugin = forwardRef( function ImageOverlayPlugin( { children, ...rest }, ref ) {\n\n\tconst gl = useThree( state => state.gl );\n\treturn (\n\t\t<TilesPlugin plugin={ ImageOverlayPluginImpl } args={ { renderer: gl, ...rest } } ref={ ref }>\n\t\t\t{ children }\n\t\t</TilesPlugin>\n\t);\n\n} );\n\nexport const ImageOverlay = forwardRef( function ImageOverlay( props, ref ) {\n\n\tconst {\n\t\ttype,\n\t\torder = null,\n\t\topacity = 1,\n\t\tcolor = 0xffffff,\n\t\tworldToProjection = null,\n\t\t...rest\n\t} = props;\n\n\tconst plugin = useContext( TilesPluginContext );\n\tconst tiles = useContext( TilesRendererContext );\n\tconst overlay = useMemo( () => {\n\n\t\treturn new type( rest );\n\n\t}, [ type, useObjectDep( rest ) ] ); // eslint-disable-line\n\n\tuseEffect( () => {\n\n\t\tplugin.addOverlay( overlay, order );\n\n\t\treturn () => {\n\n\t\t\tplugin.deleteOverlay( overlay );\n\n\t\t};\n\n\t}, [ overlay, plugin ] ); // eslint-disable-line\n\n\tuseEffect( () => {\n\n\t\tplugin.setOverlayOrder( overlay, order );\n\n\t}, [ overlay, plugin, order ] );\n\n\tuseEffect( () => {\n\n\t\toverlay.opacity = opacity;\n\t\toverlay.color.set( color );\n\t\tif ( worldToProjection && ! overlay.frame ) {\n\n\t\t\toverlay.frame = new Matrix4();\n\n\t\t} else if ( ! worldToProjection && overlay.frame ) {\n\n\t\t\toverlay.frame = null;\n\n\t\t}\n\n\t}, [ overlay, opacity, color, worldToProjection ] );\n\n\tuseFrame( () => {\n\n\t\tif ( worldToProjection && tiles ) {\n\n\t\t\toverlay.frame.copy( worldToProjection ).multiply( tiles.group.matrixWorld );\n\n\t\t}\n\n\t} );\n\n\tuseApplyRefs( overlay, ref );\n\n} );\n\nfunction useApplyRefs( target, ...refs ) {\n\n\tuseEffect( () => {\n\n\t\trefs.forEach( ref => {\n\n\t\t\tif ( ref ) {\n\n\t\t\t\tif ( ref instanceof Function ) {\n\n\t\t\t\t\tref( target );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tref.current = target;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}, [ target, ...refs ] ); // eslint-disable-line\n\n}\n\n// checks if the first level of object key-values are equal\nfunction areObjectsEqual( a, b ) {\n\n\t// early check for equivalence\n\tif ( a === b ) {\n\n\t\treturn true;\n\n\t}\n\n\t// if either of the objects is null or undefined, then perform a simple check\n\tif ( ! a || ! b ) {\n\n\t\treturn a === b;\n\n\t}\n\n\t// check all keys and values in the first object\n\tfor ( const key in a ) {\n\n\t\tif ( a[ key ] !== b[ key ] ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\t// check all keys and values in the second object\n\tfor ( const key in b ) {\n\n\t\tif ( a[ key ] !== b[ key ] ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\n// Helper for using an object as a dependency in a useEffect or useMemo array\nfunction useObjectDep( object ) {\n\n\t// only modify the returned object reference if it has changed\n\tconst ref = useRef();\n\tif ( ! areObjectsEqual( ref.current, object ) ) {\n\n\t\tref.current = object;\n\n\t}\n\n\treturn ref.current;\n\n}\n","import {\n\tBox3,\n\tFloat32BufferAttribute,\n\tInstancedBufferGeometry,\n\tInstancedInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tSphere,\n\tVector3,\n\tWireframeGeometry\n} from 'three';\n\nconst _box = new Box3();\nconst _vector = new Vector3();\n\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isLineSegmentsGeometry = true;\n\n\t\tthis.type = 'LineSegmentsGeometry';\n\n\t\tconst positions = [ - 1, 2, 0, 1, 2, 0, - 1, 1, 0, 1, 1, 0, - 1, 0, 0, 1, 0, 0, - 1, - 1, 0, 1, - 1, 0 ];\n\t\tconst uvs = [ - 1, 2, 1, 2, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 2, 1, - 2 ];\n\t\tconst index = [ 0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5 ];\n\n\t\tthis.setIndex( index );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst start = this.attributes.instanceStart;\n\t\tconst end = this.attributes.instanceEnd;\n\n\t\tif ( start !== undefined ) {\n\n\t\t\tstart.applyMatrix4( matrix );\n\n\t\t\tend.applyMatrix4( matrix );\n\n\t\t\tstart.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetPositions( array ) {\n\n\t\tlet lineSegments;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\tlineSegments = array;\n\n\t\t} else if ( Array.isArray( array ) ) {\n\n\t\t\tlineSegments = new Float32Array( array );\n\n\t\t}\n\n\t\tconst instanceBuffer = new InstancedInterleavedBuffer( lineSegments, 6, 1 ); // xyz, xyz\n\n\t\tthis.setAttribute( 'instanceStart', new InterleavedBufferAttribute( instanceBuffer, 3, 0 ) ); // xyz\n\t\tthis.setAttribute( 'instanceEnd', new InterleavedBufferAttribute( instanceBuffer, 3, 3 ) ); // xyz\n\n\t\tthis.instanceCount = this.attributes.instanceStart.count;\n\n\t\t//\n\n\t\tthis.computeBoundingBox();\n\t\tthis.computeBoundingSphere();\n\n\t\treturn this;\n\n\t}\n\n\tsetColors( array ) {\n\n\t\tlet colors;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\tcolors = array;\n\n\t\t} else if ( Array.isArray( array ) ) {\n\n\t\t\tcolors = new Float32Array( array );\n\n\t\t}\n\n\t\tconst instanceColorBuffer = new InstancedInterleavedBuffer( colors, 6, 1 ); // rgb, rgb\n\n\t\tthis.setAttribute( 'instanceColorStart', new InterleavedBufferAttribute( instanceColorBuffer, 3, 0 ) ); // rgb\n\t\tthis.setAttribute( 'instanceColorEnd', new InterleavedBufferAttribute( instanceColorBuffer, 3, 3 ) ); // rgb\n\n\t\treturn this;\n\n\t}\n\n\tfromWireframeGeometry( geometry ) {\n\n\t\tthis.setPositions( geometry.attributes.position.array );\n\n\t\treturn this;\n\n\t}\n\n\tfromEdgesGeometry( geometry ) {\n\n\t\tthis.setPositions( geometry.attributes.position.array );\n\n\t\treturn this;\n\n\t}\n\n\tfromMesh( mesh ) {\n\n\t\tthis.fromWireframeGeometry( new WireframeGeometry( mesh.geometry ) );\n\n\t\t// set colors, maybe\n\n\t\treturn this;\n\n\t}\n\n\tfromLineSegments( lineSegments ) {\n\n\t\tconst geometry = lineSegments.geometry;\n\n\t\tthis.setPositions( geometry.attributes.position.array ); // assumes non-indexed\n\n\t\t// set colors, maybe\n\n\t\treturn this;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst start = this.attributes.instanceStart;\n\t\tconst end = this.attributes.instanceEnd;\n\n\t\tif ( start !== undefined && end !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( start );\n\n\t\t\t_box.setFromBufferAttribute( end );\n\n\t\t\tthis.boundingBox.union( _box );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tconst start = this.attributes.instanceStart;\n\t\tconst end = this.attributes.instanceEnd;\n\n\t\tif ( start !== undefined && end !== undefined ) {\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\tthis.boundingBox.getCenter( center );\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = start.count; i < il; i ++ ) {\n\n\t\t\t\t_vector.fromBufferAttribute( start, i );\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );\n\n\t\t\t\t_vector.fromBufferAttribute( end, i );\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\t// todo\n\n\t}\n\n\tapplyMatrix( matrix ) {\n\n\t\tconsole.warn( 'THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().' );\n\n\t\treturn this.applyMatrix4( matrix );\n\n\t}\n\n}\n\nexport { LineSegmentsGeometry };\n","import {\n\tShaderLib,\n\tShaderMaterial,\n\tUniformsLib,\n\tUniformsUtils,\n\tVector2,\n} from 'three';\n\nUniformsLib.line = {\n\n\tworldUnits: { value: 1 },\n\tlinewidth: { value: 1 },\n\tresolution: { value: new Vector2( 1, 1 ) },\n\tdashOffset: { value: 0 },\n\tdashScale: { value: 1 },\n\tdashSize: { value: 1 },\n\tgapSize: { value: 1 } // todo FIX - maybe change to totalSize\n\n};\n\nShaderLib[ 'line' ] = {\n\n\tuniforms: UniformsUtils.merge( [\n\t\tUniformsLib.common,\n\t\tUniformsLib.fog,\n\t\tUniformsLib.line\n\t] ),\n\n\tvertexShader:\n\t/* glsl */`\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n\t\tuniform float linewidth;\n\t\tuniform vec2 resolution;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n\t\t#ifdef WORLD_UNITS\n\n\t\t\tvarying vec4 worldPos;\n\t\t\tvarying vec3 worldStart;\n\t\t\tvarying vec3 worldEnd;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t#endif\n\n\t\t#else\n\n\t\t\tvarying vec2 vUv;\n\n\t\t#endif\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashScale;\n\t\t\tattribute float instanceDistanceStart;\n\t\t\tattribute float instanceDistanceEnd;\n\t\t\tvarying float vLineDistance;\n\n\t\t#endif\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\t\t\t\tvUv = uv;\n\n\t\t\t#endif\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\tworldStart = start.xyz;\n\t\t\t\tworldEnd = end.xyz;\n\n\t\t\t#else\n\n\t\t\t\tvUv = uv;\n\n\t\t\t#endif\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec3 ndcStart = clipStart.xyz / clipStart.w;\n\t\t\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd.xy - ndcStart.xy;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\tvec3 worldDir = normalize( end.xyz - start.xyz );\n\t\t\t\tvec3 tmpFwd = normalize( mix( start.xyz, end.xyz, 0.5 ) );\n\t\t\t\tvec3 worldUp = normalize( cross( worldDir, tmpFwd ) );\n\t\t\t\tvec3 worldFwd = cross( worldDir, worldUp );\n\t\t\t\tworldPos = position.y < 0.5 ? start: end;\n\n\t\t\t\t// height offset\n\t\t\t\tfloat hw = linewidth * 0.5;\n\t\t\t\tworldPos.xyz += position.x < 0.0 ? hw * worldUp : - hw * worldUp;\n\n\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t// won't be rendering the endcaps\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t// cap extension\n\t\t\t\t\tworldPos.xyz += position.y < 0.5 ? - hw * worldDir : hw * worldDir;\n\n\t\t\t\t\t// add width to the box\n\t\t\t\t\tworldPos.xyz += worldFwd * hw;\n\n\t\t\t\t\t// endcaps\n\t\t\t\t\tif ( position.y > 1.0 || position.y < 0.0 ) {\n\n\t\t\t\t\t\tworldPos.xyz -= worldFwd * 2.0 * hw;\n\n\t\t\t\t\t}\n\n\t\t\t\t#endif\n\n\t\t\t\t// project the worldpos\n\t\t\t\tvec4 clip = projectionMatrix * worldPos;\n\n\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t// segments overlap neatly\n\t\t\t\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\n\t\t\t\tclip.z = clipPose.z * clip.w;\n\n\t\t\t#else\n\n\t\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\tdir.x /= aspect;\n\t\t\t\toffset.x /= aspect;\n\n\t\t\t\t// sign flip\n\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t// endcaps\n\t\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\t\toffset += - dir;\n\n\t\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\t\toffset += dir;\n\n\t\t\t\t}\n\n\t\t\t\t// adjust for linewidth\n\t\t\t\toffset *= linewidth;\n\n\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\toffset /= resolution.y;\n\n\t\t\t\t// select end\n\t\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t\t// back to clip space\n\t\t\t\toffset *= clip.w;\n\n\t\t\t\tclip.xy += offset;\n\n\t\t\t#endif\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t`,\n\n\tfragmentShader:\n\t/* glsl */`\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\t\tuniform float linewidth;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashOffset;\n\t\t\tuniform float dashSize;\n\t\t\tuniform float gapSize;\n\n\t\t#endif\n\n\t\tvarying float vLineDistance;\n\n\t\t#ifdef WORLD_UNITS\n\n\t\t\tvarying vec4 worldPos;\n\t\t\tvarying vec3 worldStart;\n\t\t\tvarying vec3 worldEnd;\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t#endif\n\n\t\t#else\n\n\t\t\tvarying vec2 vUv;\n\n\t\t#endif\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n\t\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\n\n\t\t\tfloat mua;\n\t\t\tfloat mub;\n\n\t\t\tvec3 p13 = p1 - p3;\n\t\t\tvec3 p43 = p4 - p3;\n\n\t\t\tvec3 p21 = p2 - p1;\n\n\t\t\tfloat d1343 = dot( p13, p43 );\n\t\t\tfloat d4321 = dot( p43, p21 );\n\t\t\tfloat d1321 = dot( p13, p21 );\n\t\t\tfloat d4343 = dot( p43, p43 );\n\t\t\tfloat d2121 = dot( p21, p21 );\n\n\t\t\tfloat denom = d2121 * d4343 - d4321 * d4321;\n\n\t\t\tfloat numer = d1343 * d4321 - d1321 * d4343;\n\n\t\t\tmua = numer / denom;\n\t\t\tmua = clamp( mua, 0.0, 1.0 );\n\t\t\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\n\t\t\tmub = clamp( mub, 0.0, 1.0 );\n\n\t\t\treturn vec2( mua, mub );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t#endif\n\n\t\t\tfloat alpha = opacity;\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\n\t\t\t\tvec3 lineDir = worldEnd - worldStart;\n\t\t\t\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\n\n\t\t\t\tvec3 p1 = worldStart + lineDir * params.x;\n\t\t\t\tvec3 p2 = rayEnd * params.y;\n\t\t\t\tvec3 delta = p1 - p2;\n\t\t\t\tfloat len = length( delta );\n\t\t\t\tfloat norm = len / linewidth;\n\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\tfloat dnorm = fwidth( norm );\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tif ( norm > 0.5 ) {\n\n\t\t\t\t\t\t\tdiscard;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#endif\n\n\t\t\t#else\n\n\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t// artifacts appear on some hardware if a derivative is taken within a conditional\n\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\tfloat len2 = a * a + b * b;\n\t\t\t\t\tfloat dlen = fwidth( len2 );\n\n\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t#else\n\n\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t\t\t}\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\tvec4 diffuseColor = vec4( diffuse, alpha );\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tgl_FragColor = vec4( diffuseColor.rgb, alpha );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <colorspace_fragment>\n\t\t\t#include <fog_fragment>\n\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t}\n\t\t`\n};\n\nclass LineMaterial extends ShaderMaterial {\n\n\n\tstatic get type() {\n\n\t\treturn 'LineMaterial';\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\tuniforms: UniformsUtils.clone( ShaderLib[ 'line' ].uniforms ),\n\n\t\t\tvertexShader: ShaderLib[ 'line' ].vertexShader,\n\t\t\tfragmentShader: ShaderLib[ 'line' ].fragmentShader,\n\n\t\t\tclipping: true // required for clipping support\n\n\t\t} );\n\n\t\tthis.isLineMaterial = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tget color() {\n\n\t\treturn this.uniforms.diffuse.value;\n\n\t}\n\n\tset color( value ) {\n\n\t\tthis.uniforms.diffuse.value = value;\n\n\t}\n\n\tget worldUnits() {\n\n\t\treturn 'WORLD_UNITS' in this.defines;\n\n\t}\n\n\tset worldUnits( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.defines.WORLD_UNITS = '';\n\n\t\t} else {\n\n\t\t\tdelete this.defines.WORLD_UNITS;\n\n\t\t}\n\n\t}\n\n\tget linewidth() {\n\n\t\treturn this.uniforms.linewidth.value;\n\n\t}\n\n\tset linewidth( value ) {\n\n\t\tif ( ! this.uniforms.linewidth ) return;\n\t\tthis.uniforms.linewidth.value = value;\n\n\t}\n\n\tget dashed() {\n\n\t\treturn 'USE_DASH' in this.defines;\n\n\t}\n\n\tset dashed( value ) {\n\n\t\tif ( ( value === true ) !== this.dashed ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.defines.USE_DASH = '';\n\n\t\t} else {\n\n\t\t\tdelete this.defines.USE_DASH;\n\n\t\t}\n\n\t}\n\n\tget dashScale() {\n\n\t\treturn this.uniforms.dashScale.value;\n\n\t}\n\n\tset dashScale( value ) {\n\n\t\tthis.uniforms.dashScale.value = value;\n\n\t}\n\n\tget dashSize() {\n\n\t\treturn this.uniforms.dashSize.value;\n\n\t}\n\n\tset dashSize( value ) {\n\n\t\tthis.uniforms.dashSize.value = value;\n\n\t}\n\n\tget dashOffset() {\n\n\t\treturn this.uniforms.dashOffset.value;\n\n\t}\n\n\tset dashOffset( value ) {\n\n\t\tthis.uniforms.dashOffset.value = value;\n\n\t}\n\n\tget gapSize() {\n\n\t\treturn this.uniforms.gapSize.value;\n\n\t}\n\n\tset gapSize( value ) {\n\n\t\tthis.uniforms.gapSize.value = value;\n\n\t}\n\n\tget opacity() {\n\n\t\treturn this.uniforms.opacity.value;\n\n\t}\n\n\tset opacity( value ) {\n\n\t\tif ( ! this.uniforms ) return;\n\t\tthis.uniforms.opacity.value = value;\n\n\t}\n\n\tget resolution() {\n\n\t\treturn this.uniforms.resolution.value;\n\n\t}\n\n\tset resolution( value ) {\n\n\t\tthis.uniforms.resolution.value.copy( value );\n\n\t}\n\n\tget alphaToCoverage() {\n\n\t\treturn 'USE_ALPHA_TO_COVERAGE' in this.defines;\n\n\t}\n\n\tset alphaToCoverage( value ) {\n\n\t\tif ( ! this.defines ) return;\n\n\t\tif ( ( value === true ) !== this.alphaToCoverage ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.defines.USE_ALPHA_TO_COVERAGE = '';\n\n\t\t} else {\n\n\t\t\tdelete this.defines.USE_ALPHA_TO_COVERAGE;\n\n\t\t}\n\n\t}\n\n}\n\nexport { LineMaterial };\n","import {\n\tBox3,\n\tInstancedInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tLine3,\n\tMathUtils,\n\tMatrix4,\n\tMesh,\n\tSphere,\n\tVector3,\n\tVector4\n} from 'three';\nimport { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\nimport { LineMaterial } from '../lines/LineMaterial.js';\n\nconst _viewport = new Vector4();\n\nconst _start = new Vector3();\nconst _end = new Vector3();\n\nconst _start4 = new Vector4();\nconst _end4 = new Vector4();\n\nconst _ssOrigin = new Vector4();\nconst _ssOrigin3 = new Vector3();\nconst _mvMatrix = new Matrix4();\nconst _line = new Line3();\nconst _closestPoint = new Vector3();\n\nconst _box = new Box3();\nconst _sphere = new Sphere();\nconst _clipToWorldVector = new Vector4();\n\nlet _ray, _lineWidth;\n\n// Returns the margin required to expand by in world space given the distance from the camera,\n// line width, resolution, and camera projection\nfunction getWorldSpaceHalfWidth( camera, distance, resolution ) {\n\n\t// transform into clip space, adjust the x and y values by the pixel width offset, then\n\t// transform back into world space to get world offset. Note clip space is [-1, 1] so full\n\t// width does not need to be halved.\n\t_clipToWorldVector.set( 0, 0, - distance, 1.0 ).applyMatrix4( camera.projectionMatrix );\n\t_clipToWorldVector.multiplyScalar( 1.0 / _clipToWorldVector.w );\n\t_clipToWorldVector.x = _lineWidth / resolution.width;\n\t_clipToWorldVector.y = _lineWidth / resolution.height;\n\t_clipToWorldVector.applyMatrix4( camera.projectionMatrixInverse );\n\t_clipToWorldVector.multiplyScalar( 1.0 / _clipToWorldVector.w );\n\n\treturn Math.abs( Math.max( _clipToWorldVector.x, _clipToWorldVector.y ) );\n\n}\n\nfunction raycastWorldUnits( lineSegments, intersects ) {\n\n\tconst matrixWorld = lineSegments.matrixWorld;\n\tconst geometry = lineSegments.geometry;\n\tconst instanceStart = geometry.attributes.instanceStart;\n\tconst instanceEnd = geometry.attributes.instanceEnd;\n\tconst segmentCount = Math.min( geometry.instanceCount, instanceStart.count );\n\n\tfor ( let i = 0, l = segmentCount; i < l; i ++ ) {\n\n\t\t_line.start.fromBufferAttribute( instanceStart, i );\n\t\t_line.end.fromBufferAttribute( instanceEnd, i );\n\n\t\t_line.applyMatrix4( matrixWorld );\n\n\t\tconst pointOnLine = new Vector3();\n\t\tconst point = new Vector3();\n\n\t\t_ray.distanceSqToSegment( _line.start, _line.end, point, pointOnLine );\n\t\tconst isInside = point.distanceTo( pointOnLine ) < _lineWidth * 0.5;\n\n\t\tif ( isInside ) {\n\n\t\t\tintersects.push( {\n\t\t\t\tpoint,\n\t\t\t\tpointOnLine,\n\t\t\t\tdistance: _ray.origin.distanceTo( point ),\n\t\t\t\tobject: lineSegments,\n\t\t\t\tface: null,\n\t\t\t\tfaceIndex: i,\n\t\t\t\tuv: null,\n\t\t\t\tuv1: null,\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n}\n\nfunction raycastScreenSpace( lineSegments, camera, intersects ) {\n\n\tconst projectionMatrix = camera.projectionMatrix;\n\tconst material = lineSegments.material;\n\tconst resolution = material.resolution;\n\tconst matrixWorld = lineSegments.matrixWorld;\n\n\tconst geometry = lineSegments.geometry;\n\tconst instanceStart = geometry.attributes.instanceStart;\n\tconst instanceEnd = geometry.attributes.instanceEnd;\n\tconst segmentCount = Math.min( geometry.instanceCount, instanceStart.count );\n\n\tconst near = - camera.near;\n\n\t//\n\n\t// pick a point 1 unit out along the ray to avoid the ray origin\n\t// sitting at the camera origin which will cause \"w\" to be 0 when\n\t// applying the projection matrix.\n\t_ray.at( 1, _ssOrigin );\n\n\t// ndc space [ - 1.0, 1.0 ]\n\t_ssOrigin.w = 1;\n\t_ssOrigin.applyMatrix4( camera.matrixWorldInverse );\n\t_ssOrigin.applyMatrix4( projectionMatrix );\n\t_ssOrigin.multiplyScalar( 1 / _ssOrigin.w );\n\n\t// screen space\n\t_ssOrigin.x *= resolution.x / 2;\n\t_ssOrigin.y *= resolution.y / 2;\n\t_ssOrigin.z = 0;\n\n\t_ssOrigin3.copy( _ssOrigin );\n\n\t_mvMatrix.multiplyMatrices( camera.matrixWorldInverse, matrixWorld );\n\n\tfor ( let i = 0, l = segmentCount; i < l; i ++ ) {\n\n\t\t_start4.fromBufferAttribute( instanceStart, i );\n\t\t_end4.fromBufferAttribute( instanceEnd, i );\n\n\t\t_start4.w = 1;\n\t\t_end4.w = 1;\n\n\t\t// camera space\n\t\t_start4.applyMatrix4( _mvMatrix );\n\t\t_end4.applyMatrix4( _mvMatrix );\n\n\t\t// skip the segment if it's entirely behind the camera\n\t\tconst isBehindCameraNear = _start4.z > near && _end4.z > near;\n\t\tif ( isBehindCameraNear ) {\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\t// trim the segment if it extends behind camera near\n\t\tif ( _start4.z > near ) {\n\n\t\t\tconst deltaDist = _start4.z - _end4.z;\n\t\t\tconst t = ( _start4.z - near ) / deltaDist;\n\t\t\t_start4.lerp( _end4, t );\n\n\t\t} else if ( _end4.z > near ) {\n\n\t\t\tconst deltaDist = _end4.z - _start4.z;\n\t\t\tconst t = ( _end4.z - near ) / deltaDist;\n\t\t\t_end4.lerp( _start4, t );\n\n\t\t}\n\n\t\t// clip space\n\t\t_start4.applyMatrix4( projectionMatrix );\n\t\t_end4.applyMatrix4( projectionMatrix );\n\n\t\t// ndc space [ - 1.0, 1.0 ]\n\t\t_start4.multiplyScalar( 1 / _start4.w );\n\t\t_end4.multiplyScalar( 1 / _end4.w );\n\n\t\t// screen space\n\t\t_start4.x *= resolution.x / 2;\n\t\t_start4.y *= resolution.y / 2;\n\n\t\t_end4.x *= resolution.x / 2;\n\t\t_end4.y *= resolution.y / 2;\n\n\t\t// create 2d segment\n\t\t_line.start.copy( _start4 );\n\t\t_line.start.z = 0;\n\n\t\t_line.end.copy( _end4 );\n\t\t_line.end.z = 0;\n\n\t\t// get closest point on ray to segment\n\t\tconst param = _line.closestPointToPointParameter( _ssOrigin3, true );\n\t\t_line.at( param, _closestPoint );\n\n\t\t// check if the intersection point is within clip space\n\t\tconst zPos = MathUtils.lerp( _start4.z, _end4.z, param );\n\t\tconst isInClipSpace = zPos >= - 1 && zPos <= 1;\n\n\t\tconst isInside = _ssOrigin3.distanceTo( _closestPoint ) < _lineWidth * 0.5;\n\n\t\tif ( isInClipSpace && isInside ) {\n\n\t\t\t_line.start.fromBufferAttribute( instanceStart, i );\n\t\t\t_line.end.fromBufferAttribute( instanceEnd, i );\n\n\t\t\t_line.start.applyMatrix4( matrixWorld );\n\t\t\t_line.end.applyMatrix4( matrixWorld );\n\n\t\t\tconst pointOnLine = new Vector3();\n\t\t\tconst point = new Vector3();\n\n\t\t\t_ray.distanceSqToSegment( _line.start, _line.end, point, pointOnLine );\n\n\t\t\tintersects.push( {\n\t\t\t\tpoint: point,\n\t\t\t\tpointOnLine: pointOnLine,\n\t\t\t\tdistance: _ray.origin.distanceTo( point ),\n\t\t\t\tobject: lineSegments,\n\t\t\t\tface: null,\n\t\t\t\tfaceIndex: i,\n\t\t\t\tuv: null,\n\t\t\t\tuv1: null,\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n}\n\nclass LineSegments2 extends Mesh {\n\n\tconstructor( geometry = new LineSegmentsGeometry(), material = new LineMaterial( { color: Math.random() * 0xffffff } ) ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isLineSegments2 = true;\n\n\t\tthis.type = 'LineSegments2';\n\n\t}\n\n\t// for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst instanceStart = geometry.attributes.instanceStart;\n\t\tconst instanceEnd = geometry.attributes.instanceEnd;\n\t\tconst lineDistances = new Float32Array( 2 * instanceStart.count );\n\n\t\tfor ( let i = 0, j = 0, l = instanceStart.count; i < l; i ++, j += 2 ) {\n\n\t\t\t_start.fromBufferAttribute( instanceStart, i );\n\t\t\t_end.fromBufferAttribute( instanceEnd, i );\n\n\t\t\tlineDistances[ j ] = ( j === 0 ) ? 0 : lineDistances[ j - 1 ];\n\t\t\tlineDistances[ j + 1 ] = lineDistances[ j ] + _start.distanceTo( _end );\n\n\t\t}\n\n\t\tconst instanceDistanceBuffer = new InstancedInterleavedBuffer( lineDistances, 2, 1 ); // d0, d1\n\n\t\tgeometry.setAttribute( 'instanceDistanceStart', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 0 ) ); // d0\n\t\tgeometry.setAttribute( 'instanceDistanceEnd', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 1 ) ); // d1\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst worldUnits = this.material.worldUnits;\n\t\tconst camera = raycaster.camera;\n\n\t\tif ( camera === null && ! worldUnits ) {\n\n\t\t\tconsole.error( 'LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.' );\n\n\t\t}\n\n\t\tconst threshold = ( raycaster.params.Line2 !== undefined ) ? raycaster.params.Line2.threshold || 0 : 0;\n\n\t\t_ray = raycaster.ray;\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\n\t\t_lineWidth = material.linewidth + threshold;\n\n\t\t// check if we intersect the sphere bounds\n\t\tif ( geometry.boundingSphere === null ) {\n\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t}\n\n\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( matrixWorld );\n\n\t\t// increase the sphere bounds by the worst case line screen space width\n\t\tlet sphereMargin;\n\t\tif ( worldUnits ) {\n\n\t\t\tsphereMargin = _lineWidth * 0.5;\n\n\t\t} else {\n\n\t\t\tconst distanceToSphere = Math.max( camera.near, _sphere.distanceToPoint( _ray.origin ) );\n\t\t\tsphereMargin = getWorldSpaceHalfWidth( camera, distanceToSphere, material.resolution );\n\n\t\t}\n\n\t\t_sphere.radius += sphereMargin;\n\n\t\tif ( _ray.intersectsSphere( _sphere ) === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// check if we intersect the box bounds\n\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\tgeometry.computeBoundingBox();\n\n\t\t}\n\n\t\t_box.copy( geometry.boundingBox ).applyMatrix4( matrixWorld );\n\n\t\t// increase the box bounds by the worst case line width\n\t\tlet boxMargin;\n\t\tif ( worldUnits ) {\n\n\t\t\tboxMargin = _lineWidth * 0.5;\n\n\t\t} else {\n\n\t\t\tconst distanceToBox = Math.max( camera.near, _box.distanceToPoint( _ray.origin ) );\n\t\t\tboxMargin = getWorldSpaceHalfWidth( camera, distanceToBox, material.resolution );\n\n\t\t}\n\n\t\t_box.expandByScalar( boxMargin );\n\n\t\tif ( _ray.intersectsBox( _box ) === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( worldUnits ) {\n\n\t\t\traycastWorldUnits( this, intersects );\n\n\t\t} else {\n\n\t\t\traycastScreenSpace( this, camera, intersects );\n\n\t\t}\n\n\t}\n\n\tonBeforeRender( renderer ) {\n\n\t\tconst uniforms = this.material.uniforms;\n\n\t\tif ( uniforms && uniforms.resolution ) {\n\n\t\t\trenderer.getViewport( _viewport );\n\t\t\tthis.material.uniforms.resolution.value.set( _viewport.z, _viewport.w );\n\n\t\t}\n\n\t}\n\n}\n\nexport { LineSegments2 };\n","import { StrictMode, useEffect, useMemo, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { TilesPlugin, TilesRenderer, EnvironmentControls } from '3d-tiles-renderer/r3f';\nimport { TilesFadePlugin, EnforceNonZeroErrorPlugin, GeoJSONOverlay } from '3d-tiles-renderer/plugins';\nimport { BoxGeometry, EdgesGeometry, Euler, Matrix4, Quaternion, Vector3 } from 'three';\nimport { PivotControls } from '@react-three/drei';\nimport { ImageOverlay, ImageOverlayPlugin } from './plugins/ImageOverlayPlugin.jsx';\nimport { LineSegments2 } from 'three/examples/jsm/lines/LineSegments2.js';\nimport { LineSegmentsGeometry } from 'three/examples/jsm/lines/LineSegmentsGeometry.js';\n\nconst tilesetUrl = 'https://raw.githubusercontent.com/NASA-AMMOS/3DTilesSampleData/master/msl-dingo-gap/0528_0260184_to_s64o256_colorize/0528_0260184_to_s64o256_colorize/0528_0260184_to_s64o256_colorize_tileset.json';\n\n// construct a shape via geojson\nconst shape = [];\nfor ( let i = 0; i < 100; i ++ ) {\n\n\tconst x = Math.sin( Math.PI * 2 * i / 100 );\n\tconst y = Math.cos( Math.PI * 2 * i / 100 );\n\tconst len = Math.sin( 10 * 2 * Math.PI * i / 100 ) * 10 + 75;\n\n\tshape.push( [ x * len, y * len ] );\n\n}\n\nconst geojson = {\n\ttype: 'Feature',\n\tgeometry: {\n\t\ttype: 'Polygon',\n\t\tcoordinates: [ shape ],\n\t},\n};\n\nfunction Scene() {\n\n\tconst [ transformRoot, setTransformRoot ] = useState( null );\n\tconst [ overlay, setOverlay ] = useState( null );\n\n\tconst worldMatrix = useMemo( () => {\n\n\t\tconst scale = new Vector3().set( 40, 40, 20 );\n\t\tconst position = new Vector3( - scale.x, 10, scale.y * 0.25 );\n\t\tconst rotation = new Euler( - Math.PI / 2 );\n\t\tconst quaternion = new Quaternion().setFromEuler( rotation );\n\t\treturn new Matrix4().compose( position, quaternion, scale );\n\n\t}, [] );\n\n\tconst boxMesh = useMemo( () => {\n\n\t\tconst boxGeometry = new BoxGeometry();\n\t\tboxGeometry.translate( 0.5, 0.5, 0.5 );\n\n\t\tconst edgesGeometry = new EdgesGeometry( boxGeometry );\n\t\tconst linesGeometry = new LineSegmentsGeometry().fromEdgesGeometry( edgesGeometry );\n\t\tconst lines = new LineSegments2( linesGeometry );\n\t\tlines.material.color.set( 0xffff00 );\n\t\tlines.material.linewidth = 2;\n\t\treturn lines;\n\n\t}, [] );\n\n\tconst worldToProjectionMatrix = useMemo( () => {\n\n\t\treturn new Matrix4();\n\n\t}, [] );\n\n\tuseEffect( () => {\n\n\t\treturn () => {\n\n\t\t\tboxMesh.geometry.dispose();\n\t\t\tboxMesh.material.dispose();\n\n\t\t};\n\n\t}, [ boxMesh ] );\n\n\tuseFrame( () => {\n\n\t\tif ( overlay && boxMesh ) {\n\n\t\t\tboxMesh.scale.x = overlay.aspectRatio;\n\t\t\tworldToProjectionMatrix.copy( transformRoot.matrixWorld ).invert();\n\n\t\t}\n\n\t} );\n\n\treturn (\n\t\t<>\n\t\t\t<color attach=\"background\" args={ [ 0x222222 ] } />\n\n\t\t\t{/* 3D Tiles renderer tileset */}\n\t\t\t<group rotation-x={ Math.PI / 2 }>\n\t\t\t\t<TilesRenderer url={ tilesetUrl } errorTarget={ 6 }>\n\t\t\t\t\t<TilesPlugin plugin={ TilesFadePlugin } fadeDuration={ 500 } />\n\t\t\t\t\t<ImageOverlayPlugin>\n\t\t\t\t\t\t<ImageOverlay\n\t\t\t\t\t\t\ttype={ GeoJSONOverlay }\n\t\t\t\t\t\t\tgeojson={ geojson }\n\t\t\t\t\t\t\tcolor={ 'red' }\n\t\t\t\t\t\t\tstrokeWidth={ 10 }\n\t\t\t\t\t\t\tfillStyle={ 'rgba( 255, 255, 255, 0.25 )' }\n\t\t\t\t\t\t\tworldToProjection={ worldToProjectionMatrix }\n\t\t\t\t\t\t\tref={ setOverlay }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ImageOverlayPlugin>\n\t\t\t\t\t<TilesPlugin plugin={ EnforceNonZeroErrorPlugin } />\n\t\t\t\t</TilesRenderer>\n\t\t\t</group>\n\n\t\t\t{/* Controls */}\n\t\t\t<EnvironmentControls enableDamping={ true } maxDistance={ 1000 } minDistance={ 1 } cameraRadius={ 0 } />\n\t\t\t<PivotControls scale={ 150 } matrix={ worldMatrix } fixed>\n\t\t\t\t<group ref={ setTransformRoot } position-z={ - 1 }>\n\t\t\t\t\t<primitive object={ boxMesh } />\n\t\t\t\t</group>\n\t\t\t</PivotControls>\n\t\t</>\n\t);\n\n}\n\nfunction App() {\n\n\treturn (\n\t\t<Canvas\n\t\t\tframeloop='demand'\n\t\t\tcamera={ {\n\t\t\t\tposition: [ 0, 40, 35 ],\n\t\t\t} }\n\t\t\tstyle={ {\n\t\t\t\twidth: '100%',\n\t\t\t\theight: '100%',\n\t\t\t\tposition: 'absolute',\n\t\t\t\tmargin: 0,\n\t\t\t\tleft: 0,\n\t\t\t\ttop: 0,\n\t\t\t} }\n\t\t\tonContextMenu={ e => {\n\n\t\t\t\t// disable the context menu click for pivot controls\n\t\t\t\te.preventDefault();\n\n\t\t\t} }\n\t\t>\n\t\t\t<Scene />\n\t\t</Canvas>\n\t);\n\n}\n\ncreateRoot( document.getElementById( 'root' ) ).render(\n\t<StrictMode>\n\t\t<App />\n\t</StrictMode>,\n);\n\n"],"names":["EnforceNonZeroErrorPlugin","tile","parent","depth","targetDepth","targetError","v1","Vector3","v2","v3","v4","Vector2","defaultCalculatePosition","el","camera","size","objectPos","widthHalf","heightHalf","isObjectBehindCamera","cameraPos","deltaCamObj","camDir","isObjectVisible","raycaster","occlude","elPos","screenPos","intersects","intersectionDistance","objectScale","OrthographicCamera","PerspectiveCamera","vFOV","dist","objectZIndex","zIndexRange","A","B","epsilon","value","getCSSMatrix","matrix","multipliers","prepend","matrix3d","i","getCameraCSSMatrix","getObjectCSSMatrix","scaleMultipliers","factor","f","isRefObject","ref","Html","React.forwardRef","children","eps","style","className","center","fullscreen","portal","distanceFactor","sprite","transform","onOcclude","castShadow","receiveShadow","material","geometry","calculatePosition","as","wrapperClass","pointerEvents","props","gl","scene","events","viewport","useThree","React.useState","root","React.useRef","group","oldZoom","oldPosition","transformOuterRef","transformInnerRef","target","occlusionMeshRef","isMeshSizeSet","isRayCastOcclusion","React.useMemo","React.useLayoutEffect","currentRoot","ReactDOM.createRoot","vec","styles","transformInnerStyles","_root$current","React.createElement","_root$current2","visible","useFrame","isBehindCamera","raytraceTarget","item","previouslyVisible","isvisible","halfRange","zRange","fov","isOrthographicCamera","top","left","bottom","right","cameraMatrix","cameraTransform","scale","ratio","w","h","ele","shaders","_extends","DoubleSide","UV1","version","_box","Box3","_vector","InstancedBufferGeometry","positions","uvs","index","Float32BufferAttribute","start","end","array","lineSegments","instanceBuffer","InstancedInterleavedBuffer","InterleavedBufferAttribute","itemSize","colors","instanceColorBuffer","mesh","WireframeGeometry","Sphere","maxRadiusSq","il","LineGeometry","LineSegmentsGeometry","length","points","line","ShaderMaterial","parameters","UniformsUtils","UniformsLib","_viewport","Vector4","_start","_end","_start4","_end4","_ssOrigin","_ssOrigin3","_mvMatrix","Matrix4","_line","Line3","_closestPoint","_sphere","_clipToWorldVector","_ray","_lineWidth","getWorldSpaceHalfWidth","distance","resolution","raycastWorldUnits","matrixWorld","instanceStart","instanceEnd","segmentCount","l","pointOnLine","point","raycastScreenSpace","projectionMatrix","near","deltaDist","t","param","zPos","MathUtils","isInClipSpace","isInside","Mesh","LineMaterial","lineDistances","j","instanceDistanceBuffer","worldUnits","threshold","sphereMargin","distanceToSphere","boxMargin","distanceToBox","renderer","uniforms","Line2","LineSegments2","tV0","THREE.Vector3","tV1","tV2","getPoint2","point3","vector","getPoint3","point2","zValue","calculateScaleFactor","radiusPx","point2off","point3off","Line","color","vertexColors","linewidth","lineWidth","segments","dashed","rest","_vertexColors$","_ref","state","line2","lineMaterial","lineGeom","geom","pValues","p","isArray","cValues","c","Color","React.useEffect","context","React.createContext","vec1","vec2","calculateOffset","clickPoint","normal","rayStart","rayDir","e1","e2","e3","upV","offsetMatrix","THREE.Matrix4","AxisArrow","direction","axis","translation","translationLimits","annotations","annotationsClass","depthTest","fixed","axisColors","hoveredColor","opacity","renderOrder","onDragStart","onDrag","onDragEnd","userData","React.useContext","camControls","divRef","objRef","clickInfo","offset0","isHovered","setIsHovered","onPointerDown","React.useCallback","e","rotation","origin","dir","onPointerMove","min","max","offset","onPointerUp","onPointerOut","cylinderLength","coneWidth","coneLength","matrixL","quaternion","THREE.Quaternion","color_","THREE.DoubleSide","clickDir","intersectionDir","toDegrees","radians","toRadians","degrees","calculateAngle","intersectionPoint","dote1e1","dote2e2","uClick","vClick","uIntersection","vIntersection","angleClick","fmod","num","denom","k","minimizeAngle","angle","result","rotMatrix","posNew","ray","THREE.Ray","intersection","AxisRotator","dir1","dir2","rotationLimits","angle0","plane","THREE.Plane","deltaAngle","THREE.MathUtils","dir1N","dir2N","r","arc","decomposeIntoBasis","i1","e2DegrowthOrder","a","b","i2","a1","a2","b1","b2","c1","y","PlaneSlider","offsetX0","offsetY0","minX","maxX","minY","maxY","offsetX","offsetY","pos1","scaleV","scaleMatrix","ScalingSphere","scaleLimits","meshRef","scale0","scaleCur","position","mPLG","mPLGInv","offsetMultiplier","offsetL","offsetH","upscale","radius","mL0","mW0","mP","mPInv","mW","mL","mL0Inv","mdL","mG","bb","THREE.Box3","bbObj","vCenter","vSize","vAnchorOffset","vPosition","vScale","xDir","yDir","zDir","PivotControls","enabled","autoTransform","anchor","disableAxes","disableSliders","disableRotations","disableScaling","activeAxes","fRef","invalidate","parentRef","gizmoRef","childrenRef","cameraScale","gizmoScale","obj","config","mdW","sf","React.useImperativeHandle","React.Fragment","ImageOverlayPlugin","forwardRef","jsx","TilesPlugin","ImageOverlayPluginImpl","ImageOverlay","type","order","worldToProjection","plugin","useContext","TilesPluginContext","tiles","TilesRendererContext","overlay","useMemo","useObjectDep","useEffect","useApplyRefs","refs","areObjectsEqual","key","object","useRef","ShaderLib","tilesetUrl","shape","x","len","geojson","Scene","transformRoot","setTransformRoot","useState","setOverlay","worldMatrix","Euler","Quaternion","boxMesh","boxGeometry","BoxGeometry","edgesGeometry","EdgesGeometry","linesGeometry","lines","worldToProjectionMatrix","jsxs","Fragment","TilesRenderer","TilesFadePlugin","GeoJSONOverlay","EnvironmentControls","App","Canvas","createRoot","StrictMode"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19]}